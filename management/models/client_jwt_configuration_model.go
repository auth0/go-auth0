/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ClientJwtConfiguration Configuration related to JWTs for the client.
type ClientJwtConfiguration struct {
	// Number of seconds the JWT will be valid for (affects `exp` claim).
	LifetimeInSeconds *int32 `json:"lifetime_in_seconds,omitempty"`
	// Whether the client secret is base64 encoded (true) or unencoded (false).
	SecretEncoded *bool `json:"secret_encoded,omitempty"`
	// Configuration related to id token claims for the client.
	Scopes               map[string]interface{}     `json:"scopes,omitempty"`
	Alg                  *ClientJwtConfigurationAlg `json:"alg,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClientJwtConfiguration ClientJwtConfiguration

// GetLifetimeInSeconds returns the LifetimeInSeconds field value if set, zero value otherwise.
func (o *ClientJwtConfiguration) GetLifetimeInSeconds() int32 {
	if o == nil || IsNil(o.LifetimeInSeconds) {
		var ret int32
		return ret
	}
	return *o.LifetimeInSeconds
}

// GetLifetimeInSecondsOk returns a tuple with the LifetimeInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientJwtConfiguration) GetLifetimeInSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.LifetimeInSeconds) {
		return nil, false
	}
	return o.LifetimeInSeconds, true
}

// HasLifetimeInSeconds returns a boolean if a field has been set.
func (o *ClientJwtConfiguration) HasLifetimeInSeconds() bool {
	if o != nil && !IsNil(o.LifetimeInSeconds) {
		return true
	}

	return false
}

// SetLifetimeInSeconds gets a reference to the given int32 and assigns it to the LifetimeInSeconds field.
func (o *ClientJwtConfiguration) SetLifetimeInSeconds(v int32) {
	o.LifetimeInSeconds = &v
}

// GetSecretEncoded returns the SecretEncoded field value if set, zero value otherwise.
func (o *ClientJwtConfiguration) GetSecretEncoded() bool {
	if o == nil || IsNil(o.SecretEncoded) {
		var ret bool
		return ret
	}
	return *o.SecretEncoded
}

// GetSecretEncodedOk returns a tuple with the SecretEncoded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientJwtConfiguration) GetSecretEncodedOk() (*bool, bool) {
	if o == nil || IsNil(o.SecretEncoded) {
		return nil, false
	}
	return o.SecretEncoded, true
}

// HasSecretEncoded returns a boolean if a field has been set.
func (o *ClientJwtConfiguration) HasSecretEncoded() bool {
	if o != nil && !IsNil(o.SecretEncoded) {
		return true
	}

	return false
}

// SetSecretEncoded gets a reference to the given bool and assigns it to the SecretEncoded field.
func (o *ClientJwtConfiguration) SetSecretEncoded(v bool) {
	o.SecretEncoded = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *ClientJwtConfiguration) GetScopes() map[string]interface{} {
	if o == nil || IsNil(o.Scopes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientJwtConfiguration) GetScopesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Scopes) {
		return map[string]interface{}{}, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *ClientJwtConfiguration) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given map[string]interface{} and assigns it to the Scopes field.
func (o *ClientJwtConfiguration) SetScopes(v map[string]interface{}) {
	o.Scopes = v
}

// GetAlg returns the Alg field value if set, zero value otherwise.
func (o *ClientJwtConfiguration) GetAlg() ClientJwtConfigurationAlg {
	if o == nil || IsNil(o.Alg) {
		var ret ClientJwtConfigurationAlg
		return ret
	}
	return *o.Alg
}

// GetAlgOk returns a tuple with the Alg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientJwtConfiguration) GetAlgOk() (*ClientJwtConfigurationAlg, bool) {
	if o == nil || IsNil(o.Alg) {
		return nil, false
	}
	return o.Alg, true
}

// HasAlg returns a boolean if a field has been set.
func (o *ClientJwtConfiguration) HasAlg() bool {
	if o != nil && !IsNil(o.Alg) {
		return true
	}

	return false
}

// SetAlg gets a reference to the given ClientJwtConfigurationAlg and assigns it to the Alg field.
func (o *ClientJwtConfiguration) SetAlg(v ClientJwtConfigurationAlg) {
	o.Alg = &v
}

func (o ClientJwtConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientJwtConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LifetimeInSeconds) {
		toSerialize["lifetime_in_seconds"] = o.LifetimeInSeconds
	}
	if !IsNil(o.SecretEncoded) {
		toSerialize["secret_encoded"] = o.SecretEncoded
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.Alg) {
		toSerialize["alg"] = o.Alg
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClientJwtConfiguration) UnmarshalJSON(data []byte) (err error) {
	varClientJwtConfiguration := _ClientJwtConfiguration{}

	err = json.Unmarshal(data, &varClientJwtConfiguration)

	if err != nil {
		return err
	}

	*o = ClientJwtConfiguration(varClientJwtConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "lifetime_in_seconds")
		delete(additionalProperties, "secret_encoded")
		delete(additionalProperties, "scopes")
		delete(additionalProperties, "alg")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClientJwtConfiguration struct {
	value *ClientJwtConfiguration
	isSet bool
}

func (v NullableClientJwtConfiguration) Get() *ClientJwtConfiguration {
	return v.value
}

func (v *NullableClientJwtConfiguration) Set(val *ClientJwtConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableClientJwtConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableClientJwtConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientJwtConfiguration(val *ClientJwtConfiguration) *NullableClientJwtConfiguration {
	return &NullableClientJwtConfiguration{value: val, isSet: true}
}

func (v NullableClientJwtConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientJwtConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
