/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ClientJwtConfiguration Configuration related to JWTs for the client.
type ClientJwtConfiguration struct {
	// Number of seconds the JWT will be valid for (affects `exp` claim).
	LifetimeInSeconds int32 `json:"lifetime_in_seconds"`
	// Whether the client secret is base64 encoded (true) or unencoded (false).
	SecretEncoded bool `json:"secret_encoded"`
	// Configuration related to id token claims for the client.
	Scopes               map[string]interface{}    `json:"scopes"`
	Alg                  ClientJwtConfigurationAlg `json:"alg"`
	AdditionalProperties map[string]interface{}
}

type _ClientJwtConfiguration ClientJwtConfiguration

// GetLifetimeInSeconds returns the LifetimeInSeconds field value
func (o *ClientJwtConfiguration) GetLifetimeInSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LifetimeInSeconds
}

// GetLifetimeInSecondsOk returns a tuple with the LifetimeInSeconds field value
// and a boolean to check if the value has been set.
func (o *ClientJwtConfiguration) GetLifetimeInSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LifetimeInSeconds, true
}

// SetLifetimeInSeconds sets field value
func (o *ClientJwtConfiguration) SetLifetimeInSeconds(v int32) {
	o.LifetimeInSeconds = v
}

// GetSecretEncoded returns the SecretEncoded field value
func (o *ClientJwtConfiguration) GetSecretEncoded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SecretEncoded
}

// GetSecretEncodedOk returns a tuple with the SecretEncoded field value
// and a boolean to check if the value has been set.
func (o *ClientJwtConfiguration) GetSecretEncodedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretEncoded, true
}

// SetSecretEncoded sets field value
func (o *ClientJwtConfiguration) SetSecretEncoded(v bool) {
	o.SecretEncoded = v
}

// GetScopes returns the Scopes field value
func (o *ClientJwtConfiguration) GetScopes() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *ClientJwtConfiguration) GetScopesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *ClientJwtConfiguration) SetScopes(v map[string]interface{}) {
	o.Scopes = v
}

// GetAlg returns the Alg field value
func (o *ClientJwtConfiguration) GetAlg() ClientJwtConfigurationAlg {
	if o == nil {
		var ret ClientJwtConfigurationAlg
		return ret
	}

	return o.Alg
}

// GetAlgOk returns a tuple with the Alg field value
// and a boolean to check if the value has been set.
func (o *ClientJwtConfiguration) GetAlgOk() (*ClientJwtConfigurationAlg, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alg, true
}

// SetAlg sets field value
func (o *ClientJwtConfiguration) SetAlg(v ClientJwtConfigurationAlg) {
	o.Alg = v
}

func (o ClientJwtConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientJwtConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lifetime_in_seconds"] = o.LifetimeInSeconds
	toSerialize["secret_encoded"] = o.SecretEncoded
	toSerialize["scopes"] = o.Scopes
	toSerialize["alg"] = o.Alg

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClientJwtConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lifetime_in_seconds",
		"secret_encoded",
		"scopes",
		"alg",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClientJwtConfiguration := _ClientJwtConfiguration{}

	err = json.Unmarshal(data, &varClientJwtConfiguration)

	if err != nil {
		return err
	}

	*o = ClientJwtConfiguration(varClientJwtConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "lifetime_in_seconds")
		delete(additionalProperties, "secret_encoded")
		delete(additionalProperties, "scopes")
		delete(additionalProperties, "alg")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClientJwtConfiguration struct {
	value *ClientJwtConfiguration
	isSet bool
}

func (v NullableClientJwtConfiguration) Get() *ClientJwtConfiguration {
	return v.value
}

func (v *NullableClientJwtConfiguration) Set(val *ClientJwtConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableClientJwtConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableClientJwtConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientJwtConfiguration(val *ClientJwtConfiguration) *NullableClientJwtConfiguration {
	return &NullableClientJwtConfiguration{value: val, isSet: true}
}

func (v NullableClientJwtConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientJwtConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
