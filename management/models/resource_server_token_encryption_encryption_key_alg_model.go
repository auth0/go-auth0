/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ResourceServerTokenEncryptionEncryptionKeyAlg Algorithm used to encrypt the token.
type ResourceServerTokenEncryptionEncryptionKeyAlg string

// List of resourceServer_token_encryption_encryption_key_alg
const (
	RESOURCESERVERTOKENENCRYPTIONENCRYPTIONKEYALG__256 ResourceServerTokenEncryptionEncryptionKeyAlg = "RSA-OAEP-256"
	RESOURCESERVERTOKENENCRYPTIONENCRYPTIONKEYALG__384 ResourceServerTokenEncryptionEncryptionKeyAlg = "RSA-OAEP-384"
	RESOURCESERVERTOKENENCRYPTIONENCRYPTIONKEYALG__512 ResourceServerTokenEncryptionEncryptionKeyAlg = "RSA-OAEP-512"
)

// All allowed values of ResourceServerTokenEncryptionEncryptionKeyAlg enum
var AllowedResourceServerTokenEncryptionEncryptionKeyAlgEnumValues = []ResourceServerTokenEncryptionEncryptionKeyAlg{
	"RSA-OAEP-256",
	"RSA-OAEP-384",
	"RSA-OAEP-512",
}

func (v *ResourceServerTokenEncryptionEncryptionKeyAlg) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceServerTokenEncryptionEncryptionKeyAlg(value)
	for _, existing := range AllowedResourceServerTokenEncryptionEncryptionKeyAlgEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceServerTokenEncryptionEncryptionKeyAlg", value)
}

// NewResourceServerTokenEncryptionEncryptionKeyAlgFromValue returns a pointer to a valid ResourceServerTokenEncryptionEncryptionKeyAlg
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceServerTokenEncryptionEncryptionKeyAlgFromValue(v string) (*ResourceServerTokenEncryptionEncryptionKeyAlg, error) {
	ev := ResourceServerTokenEncryptionEncryptionKeyAlg(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceServerTokenEncryptionEncryptionKeyAlg: valid values are %v", v, AllowedResourceServerTokenEncryptionEncryptionKeyAlgEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceServerTokenEncryptionEncryptionKeyAlg) IsValid() bool {
	for _, existing := range AllowedResourceServerTokenEncryptionEncryptionKeyAlgEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to resourceServer_token_encryption_encryption_key_alg value
func (v ResourceServerTokenEncryptionEncryptionKeyAlg) Ptr() *ResourceServerTokenEncryptionEncryptionKeyAlg {
	return &v
}

type NullableResourceServerTokenEncryptionEncryptionKeyAlg struct {
	value *ResourceServerTokenEncryptionEncryptionKeyAlg
	isSet bool
}

func (v NullableResourceServerTokenEncryptionEncryptionKeyAlg) Get() *ResourceServerTokenEncryptionEncryptionKeyAlg {
	return v.value
}

func (v *NullableResourceServerTokenEncryptionEncryptionKeyAlg) Set(val *ResourceServerTokenEncryptionEncryptionKeyAlg) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceServerTokenEncryptionEncryptionKeyAlg) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceServerTokenEncryptionEncryptionKeyAlg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceServerTokenEncryptionEncryptionKeyAlg(val *ResourceServerTokenEncryptionEncryptionKeyAlg) *NullableResourceServerTokenEncryptionEncryptionKeyAlg {
	return &NullableResourceServerTokenEncryptionEncryptionKeyAlg{value: val, isSet: true}
}

func (v NullableResourceServerTokenEncryptionEncryptionKeyAlg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceServerTokenEncryptionEncryptionKeyAlg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
