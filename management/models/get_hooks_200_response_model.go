/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetHooks200Response - struct for GetHooks200Response
type GetHooks200Response struct {
	GetHooks200ResponseOneOf *GetHooks200ResponseOneOf
	ArrayOfHook              *[]Hook
}

// GetHooks200ResponseOneOfAsGetHooks200Response is a convenience function that returns GetHooks200ResponseOneOf wrapped in GetHooks200Response
func GetHooks200ResponseOneOfAsGetHooks200Response(v *GetHooks200ResponseOneOf) GetHooks200Response {
	return GetHooks200Response{
		GetHooks200ResponseOneOf: v,
	}
}

// []HookAsGetHooks200Response is a convenience function that returns []Hook wrapped in GetHooks200Response
func ArrayOfHookAsGetHooks200Response(v *[]Hook) GetHooks200Response {
	return GetHooks200Response{
		ArrayOfHook: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetHooks200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetHooks200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetHooks200ResponseOneOf)
	if err == nil {
		jsonGetHooks200ResponseOneOf, _ := json.Marshal(dst.GetHooks200ResponseOneOf)
		if string(jsonGetHooks200ResponseOneOf) == "{}" { // empty struct
			dst.GetHooks200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetHooks200ResponseOneOf); err != nil {
				dst.GetHooks200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetHooks200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfHook
	err = newStrictDecoder(data).Decode(&dst.ArrayOfHook)
	if err == nil {
		jsonArrayOfHook, _ := json.Marshal(dst.ArrayOfHook)
		if string(jsonArrayOfHook) == "{}" { // empty struct
			dst.ArrayOfHook = nil
		} else {
			if err = validator.Validate(dst.ArrayOfHook); err != nil {
				dst.ArrayOfHook = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfHook = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetHooks200ResponseOneOf = nil
		dst.ArrayOfHook = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetHooks200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetHooks200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetHooks200Response) MarshalJSON() ([]byte, error) {
	if src.GetHooks200ResponseOneOf != nil {
		return json.Marshal(&src.GetHooks200ResponseOneOf)
	}

	if src.ArrayOfHook != nil {
		return json.Marshal(&src.ArrayOfHook)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetHooks200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetHooks200ResponseOneOf != nil {
		return obj.GetHooks200ResponseOneOf
	}

	if obj.ArrayOfHook != nil {
		return obj.ArrayOfHook
	}

	// all schemas are nil
	return nil
}

type NullableGetHooks200Response struct {
	value *GetHooks200Response
	isSet bool
}

func (v NullableGetHooks200Response) Get() *GetHooks200Response {
	return v.value
}

func (v *NullableGetHooks200Response) Set(val *GetHooks200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetHooks200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetHooks200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetHooks200Response(val *GetHooks200Response) *NullableGetHooks200Response {
	return &NullableGetHooks200Response{value: val, isSet: true}
}

func (v NullableGetHooks200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetHooks200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
