/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ConnectionCreateOptionsPasskeyOptionsChallengeUi Controls the UI used to challenge the user for their passkey.
type ConnectionCreateOptionsPasskeyOptionsChallengeUi string

// List of connectionCreate_options_passkey_options_challenge_ui
const (
	CONNECTIONCREATEOPTIONSPASSKEYOPTIONSCHALLENGEUI_BOTH     ConnectionCreateOptionsPasskeyOptionsChallengeUi = "both"
	CONNECTIONCREATEOPTIONSPASSKEYOPTIONSCHALLENGEUI_AUTOFILL ConnectionCreateOptionsPasskeyOptionsChallengeUi = "autofill"
	CONNECTIONCREATEOPTIONSPASSKEYOPTIONSCHALLENGEUI_BUTTON   ConnectionCreateOptionsPasskeyOptionsChallengeUi = "button"
)

// All allowed values of ConnectionCreateOptionsPasskeyOptionsChallengeUi enum
var AllowedConnectionCreateOptionsPasskeyOptionsChallengeUiEnumValues = []ConnectionCreateOptionsPasskeyOptionsChallengeUi{
	"both",
	"autofill",
	"button",
}

func (v *ConnectionCreateOptionsPasskeyOptionsChallengeUi) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionCreateOptionsPasskeyOptionsChallengeUi(value)
	for _, existing := range AllowedConnectionCreateOptionsPasskeyOptionsChallengeUiEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionCreateOptionsPasskeyOptionsChallengeUi", value)
}

// NewConnectionCreateOptionsPasskeyOptionsChallengeUiFromValue returns a pointer to a valid ConnectionCreateOptionsPasskeyOptionsChallengeUi
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionCreateOptionsPasskeyOptionsChallengeUiFromValue(v string) (*ConnectionCreateOptionsPasskeyOptionsChallengeUi, error) {
	ev := ConnectionCreateOptionsPasskeyOptionsChallengeUi(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionCreateOptionsPasskeyOptionsChallengeUi: valid values are %v", v, AllowedConnectionCreateOptionsPasskeyOptionsChallengeUiEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionCreateOptionsPasskeyOptionsChallengeUi) IsValid() bool {
	for _, existing := range AllowedConnectionCreateOptionsPasskeyOptionsChallengeUiEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to connectionCreate_options_passkey_options_challenge_ui value
func (v ConnectionCreateOptionsPasskeyOptionsChallengeUi) Ptr() *ConnectionCreateOptionsPasskeyOptionsChallengeUi {
	return &v
}

type NullableConnectionCreateOptionsPasskeyOptionsChallengeUi struct {
	value *ConnectionCreateOptionsPasskeyOptionsChallengeUi
	isSet bool
}

func (v NullableConnectionCreateOptionsPasskeyOptionsChallengeUi) Get() *ConnectionCreateOptionsPasskeyOptionsChallengeUi {
	return v.value
}

func (v *NullableConnectionCreateOptionsPasskeyOptionsChallengeUi) Set(val *ConnectionCreateOptionsPasskeyOptionsChallengeUi) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionCreateOptionsPasskeyOptionsChallengeUi) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionCreateOptionsPasskeyOptionsChallengeUi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionCreateOptionsPasskeyOptionsChallengeUi(val *ConnectionCreateOptionsPasskeyOptionsChallengeUi) *NullableConnectionCreateOptionsPasskeyOptionsChallengeUi {
	return &NullableConnectionCreateOptionsPasskeyOptionsChallengeUi{value: val, isSet: true}
}

func (v NullableConnectionCreateOptionsPasskeyOptionsChallengeUi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionCreateOptionsPasskeyOptionsChallengeUi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
