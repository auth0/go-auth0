/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetPermissions200Response - struct for GetPermissions200Response
type GetPermissions200Response struct {
	GetPermissions200ResponseOneOf             *GetPermissions200ResponseOneOf
	ArrayOfGetPermissions200ResponseOneOfInner *[]GetPermissions200ResponseOneOfInner
}

// GetPermissions200ResponseOneOfAsGetPermissions200Response is a convenience function that returns GetPermissions200ResponseOneOf wrapped in GetPermissions200Response
func GetPermissions200ResponseOneOfAsGetPermissions200Response(v *GetPermissions200ResponseOneOf) GetPermissions200Response {
	return GetPermissions200Response{
		GetPermissions200ResponseOneOf: v,
	}
}

// []GetPermissions200ResponseOneOfInnerAsGetPermissions200Response is a convenience function that returns []GetPermissions200ResponseOneOfInner wrapped in GetPermissions200Response
func ArrayOfGetPermissions200ResponseOneOfInnerAsGetPermissions200Response(v *[]GetPermissions200ResponseOneOfInner) GetPermissions200Response {
	return GetPermissions200Response{
		ArrayOfGetPermissions200ResponseOneOfInner: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetPermissions200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetPermissions200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetPermissions200ResponseOneOf)
	if err == nil {
		jsonGetPermissions200ResponseOneOf, _ := json.Marshal(dst.GetPermissions200ResponseOneOf)
		if string(jsonGetPermissions200ResponseOneOf) == "{}" { // empty struct
			dst.GetPermissions200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetPermissions200ResponseOneOf); err != nil {
				dst.GetPermissions200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetPermissions200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfGetPermissions200ResponseOneOfInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGetPermissions200ResponseOneOfInner)
	if err == nil {
		jsonArrayOfGetPermissions200ResponseOneOfInner, _ := json.Marshal(dst.ArrayOfGetPermissions200ResponseOneOfInner)
		if string(jsonArrayOfGetPermissions200ResponseOneOfInner) == "{}" { // empty struct
			dst.ArrayOfGetPermissions200ResponseOneOfInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfGetPermissions200ResponseOneOfInner); err != nil {
				dst.ArrayOfGetPermissions200ResponseOneOfInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfGetPermissions200ResponseOneOfInner = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetPermissions200ResponseOneOf = nil
		dst.ArrayOfGetPermissions200ResponseOneOfInner = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetPermissions200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetPermissions200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetPermissions200Response) MarshalJSON() ([]byte, error) {
	if src.GetPermissions200ResponseOneOf != nil {
		return json.Marshal(&src.GetPermissions200ResponseOneOf)
	}

	if src.ArrayOfGetPermissions200ResponseOneOfInner != nil {
		return json.Marshal(&src.ArrayOfGetPermissions200ResponseOneOfInner)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetPermissions200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetPermissions200ResponseOneOf != nil {
		return obj.GetPermissions200ResponseOneOf
	}

	if obj.ArrayOfGetPermissions200ResponseOneOfInner != nil {
		return obj.ArrayOfGetPermissions200ResponseOneOfInner
	}

	// all schemas are nil
	return nil
}

type NullableGetPermissions200Response struct {
	value *GetPermissions200Response
	isSet bool
}

func (v NullableGetPermissions200Response) Get() *GetPermissions200Response {
	return v.value
}

func (v *NullableGetPermissions200Response) Set(val *GetPermissions200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPermissions200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPermissions200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPermissions200Response(val *GetPermissions200Response) *NullableGetPermissions200Response {
	return &NullableGetPermissions200Response{value: val, isSet: true}
}

func (v NullableGetPermissions200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPermissions200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
