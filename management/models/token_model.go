/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
)

// Token struct for Token
type Token struct {
	// JWT's aud claim (the client_id to which the JWT was issued).
	Aud *string `json:"aud,omitempty"`
	// jti (unique ID within aud) of the blacklisted JWT.
	Jti string `json:"jti"`
}

type _Token Token

// GetAud returns the Aud field value if set, zero value otherwise.
func (o *Token) GetAud() string {
	if o == nil || IsNil(o.Aud) {
		var ret string
		return ret
	}
	return *o.Aud
}

// GetAudOk returns a tuple with the Aud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetAudOk() (*string, bool) {
	if o == nil || IsNil(o.Aud) {
		return nil, false
	}
	return o.Aud, true
}

// HasAud returns a boolean if a field has been set.
func (o *Token) HasAud() bool {
	if o != nil && !IsNil(o.Aud) {
		return true
	}

	return false
}

// SetAud gets a reference to the given string and assigns it to the Aud field.
func (o *Token) SetAud(v string) {
	o.Aud = &v
}

// GetJti returns the Jti field value
func (o *Token) GetJti() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Jti
}

// GetJtiOk returns a tuple with the Jti field value
// and a boolean to check if the value has been set.
func (o *Token) GetJtiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jti, true
}

// SetJti sets field value
func (o *Token) SetJti(v string) {
	o.Jti = v
}

func (o Token) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Token) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aud) {
		toSerialize["aud"] = o.Aud
	}
	toSerialize["jti"] = o.Jti
	return toSerialize, nil
}

func (o *Token) UnmarshalJSON(data []byte) (err error) {
	varToken := _Token{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToken)

	if err != nil {
		return err
	}

	*o = Token(varToken)

	return err
}

type NullableToken struct {
	value *Token
	isSet bool
}

func (v NullableToken) Get() *Token {
	return v.value
}

func (v *NullableToken) Set(val *Token) {
	v.value = val
	v.isSet = true
}

func (v NullableToken) IsSet() bool {
	return v.isSet
}

func (v *NullableToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToken(val *Token) *NullableToken {
	return &NullableToken{value: val, isSet: true}
}

func (v NullableToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
