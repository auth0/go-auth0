/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// ResourceServer struct for ResourceServer
type ResourceServer struct {
	// ID of the API (resource server).
	Id string `json:"id"`
	// Friendly name for this resource server. Can not contain `<` or `>` characters.
	Name string `json:"name"`
	// Whether this is an Auth0 system API (true) or a custom API (false).
	IsSystem bool `json:"is_system"`
	// Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set.
	Identifier string `json:"identifier"`
	// List of permissions (scopes) that this API uses.
	Scopes     []Scope                   `json:"scopes"`
	SigningAlg ClientJwtConfigurationAlg `json:"signing_alg"`
	// Secret used to sign tokens when using symmetric algorithms (HS256).
	SigningSecret string `json:"signing_secret"`
	// Whether refresh tokens can be issued for this API (true) or not (false).
	AllowOfflineAccess bool `json:"allow_offline_access"`
	// Whether to skip user consent for applications flagged as first party (true) or not (false).
	SkipConsentForVerifiableFirstPartyClients bool `json:"skip_consent_for_verifiable_first_party_clients"`
	// Expiration value (in seconds) for access tokens issued for this API from the token endpoint.
	TokenLifetime int32 `json:"token_lifetime"`
	// Expiration value (in seconds) for access tokens issued for this API via Implicit or Hybrid Flows. Cannot be greater than the `token_lifetime` value.
	TokenLifetimeForWeb int32 `json:"token_lifetime_for_web"`
	// Whether authorization polices are enforced (true) or unenforced (false).
	EnforcePolicies      bool                                    `json:"enforce_policies"`
	TokenDialect         ResourceServerTokenDialect              `json:"token_dialect"`
	Client               map[string]interface{}                  `json:"client"`
	TokenEncryption      NullableResourceServerTokenEncryption   `json:"token_encryption"`
	ConsentPolicy        NullableResourceServerConsentPolicy     `json:"consent_policy"`
	AuthorizationDetails []interface{}                           `json:"authorization_details"`
	ProofOfPossession    NullableResourceServerProofOfPossession `json:"proof_of_possession"`
}

type _ResourceServer ResourceServer

// GetId returns the Id field value
func (o *ResourceServer) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResourceServer) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ResourceServer) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ResourceServer) SetName(v string) {
	o.Name = v
}

// GetIsSystem returns the IsSystem field value
func (o *ResourceServer) GetIsSystem() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSystem
}

// GetIsSystemOk returns a tuple with the IsSystem field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetIsSystemOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSystem, true
}

// SetIsSystem sets field value
func (o *ResourceServer) SetIsSystem(v bool) {
	o.IsSystem = v
}

// GetIdentifier returns the Identifier field value
func (o *ResourceServer) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *ResourceServer) SetIdentifier(v string) {
	o.Identifier = v
}

// GetScopes returns the Scopes field value
func (o *ResourceServer) GetScopes() []Scope {
	if o == nil {
		var ret []Scope
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetScopesOk() ([]Scope, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *ResourceServer) SetScopes(v []Scope) {
	o.Scopes = v
}

// GetSigningAlg returns the SigningAlg field value
func (o *ResourceServer) GetSigningAlg() ClientJwtConfigurationAlg {
	if o == nil {
		var ret ClientJwtConfigurationAlg
		return ret
	}

	return o.SigningAlg
}

// GetSigningAlgOk returns a tuple with the SigningAlg field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetSigningAlgOk() (*ClientJwtConfigurationAlg, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SigningAlg, true
}

// SetSigningAlg sets field value
func (o *ResourceServer) SetSigningAlg(v ClientJwtConfigurationAlg) {
	o.SigningAlg = v
}

// GetSigningSecret returns the SigningSecret field value
func (o *ResourceServer) GetSigningSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SigningSecret
}

// GetSigningSecretOk returns a tuple with the SigningSecret field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetSigningSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SigningSecret, true
}

// SetSigningSecret sets field value
func (o *ResourceServer) SetSigningSecret(v string) {
	o.SigningSecret = v
}

// GetAllowOfflineAccess returns the AllowOfflineAccess field value
func (o *ResourceServer) GetAllowOfflineAccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowOfflineAccess
}

// GetAllowOfflineAccessOk returns a tuple with the AllowOfflineAccess field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetAllowOfflineAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowOfflineAccess, true
}

// SetAllowOfflineAccess sets field value
func (o *ResourceServer) SetAllowOfflineAccess(v bool) {
	o.AllowOfflineAccess = v
}

// GetSkipConsentForVerifiableFirstPartyClients returns the SkipConsentForVerifiableFirstPartyClients field value
func (o *ResourceServer) GetSkipConsentForVerifiableFirstPartyClients() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SkipConsentForVerifiableFirstPartyClients
}

// GetSkipConsentForVerifiableFirstPartyClientsOk returns a tuple with the SkipConsentForVerifiableFirstPartyClients field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetSkipConsentForVerifiableFirstPartyClientsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SkipConsentForVerifiableFirstPartyClients, true
}

// SetSkipConsentForVerifiableFirstPartyClients sets field value
func (o *ResourceServer) SetSkipConsentForVerifiableFirstPartyClients(v bool) {
	o.SkipConsentForVerifiableFirstPartyClients = v
}

// GetTokenLifetime returns the TokenLifetime field value
func (o *ResourceServer) GetTokenLifetime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokenLifetime
}

// GetTokenLifetimeOk returns a tuple with the TokenLifetime field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetTokenLifetimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenLifetime, true
}

// SetTokenLifetime sets field value
func (o *ResourceServer) SetTokenLifetime(v int32) {
	o.TokenLifetime = v
}

// GetTokenLifetimeForWeb returns the TokenLifetimeForWeb field value
func (o *ResourceServer) GetTokenLifetimeForWeb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokenLifetimeForWeb
}

// GetTokenLifetimeForWebOk returns a tuple with the TokenLifetimeForWeb field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetTokenLifetimeForWebOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenLifetimeForWeb, true
}

// SetTokenLifetimeForWeb sets field value
func (o *ResourceServer) SetTokenLifetimeForWeb(v int32) {
	o.TokenLifetimeForWeb = v
}

// GetEnforcePolicies returns the EnforcePolicies field value
func (o *ResourceServer) GetEnforcePolicies() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnforcePolicies
}

// GetEnforcePoliciesOk returns a tuple with the EnforcePolicies field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetEnforcePoliciesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnforcePolicies, true
}

// SetEnforcePolicies sets field value
func (o *ResourceServer) SetEnforcePolicies(v bool) {
	o.EnforcePolicies = v
}

// GetTokenDialect returns the TokenDialect field value
func (o *ResourceServer) GetTokenDialect() ResourceServerTokenDialect {
	if o == nil {
		var ret ResourceServerTokenDialect
		return ret
	}

	return o.TokenDialect
}

// GetTokenDialectOk returns a tuple with the TokenDialect field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetTokenDialectOk() (*ResourceServerTokenDialect, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenDialect, true
}

// SetTokenDialect sets field value
func (o *ResourceServer) SetTokenDialect(v ResourceServerTokenDialect) {
	o.TokenDialect = v
}

// GetClient returns the Client field value
func (o *ResourceServer) GetClient() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Client
}

// GetClientOk returns a tuple with the Client field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetClientOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Client, true
}

// SetClient sets field value
func (o *ResourceServer) SetClient(v map[string]interface{}) {
	o.Client = v
}

// GetTokenEncryption returns the TokenEncryption field value
// If the value is explicit nil, the zero value for ResourceServerTokenEncryption will be returned
func (o *ResourceServer) GetTokenEncryption() ResourceServerTokenEncryption {
	if o == nil || o.TokenEncryption.Get() == nil {
		var ret ResourceServerTokenEncryption
		return ret
	}

	return *o.TokenEncryption.Get()
}

// GetTokenEncryptionOk returns a tuple with the TokenEncryption field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceServer) GetTokenEncryptionOk() (*ResourceServerTokenEncryption, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenEncryption.Get(), o.TokenEncryption.IsSet()
}

// SetTokenEncryption sets field value
func (o *ResourceServer) SetTokenEncryption(v ResourceServerTokenEncryption) {
	o.TokenEncryption.Set(&v)
}

// GetConsentPolicy returns the ConsentPolicy field value
// If the value is explicit nil, the zero value for ResourceServerConsentPolicy will be returned
func (o *ResourceServer) GetConsentPolicy() ResourceServerConsentPolicy {
	if o == nil || o.ConsentPolicy.Get() == nil {
		var ret ResourceServerConsentPolicy
		return ret
	}

	return *o.ConsentPolicy.Get()
}

// GetConsentPolicyOk returns a tuple with the ConsentPolicy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceServer) GetConsentPolicyOk() (*ResourceServerConsentPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConsentPolicy.Get(), o.ConsentPolicy.IsSet()
}

// SetConsentPolicy sets field value
func (o *ResourceServer) SetConsentPolicy(v ResourceServerConsentPolicy) {
	o.ConsentPolicy.Set(&v)
}

// GetAuthorizationDetails returns the AuthorizationDetails field value
func (o *ResourceServer) GetAuthorizationDetails() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.AuthorizationDetails
}

// GetAuthorizationDetailsOk returns a tuple with the AuthorizationDetails field value
// and a boolean to check if the value has been set.
func (o *ResourceServer) GetAuthorizationDetailsOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthorizationDetails, true
}

// SetAuthorizationDetails sets field value
func (o *ResourceServer) SetAuthorizationDetails(v []interface{}) {
	o.AuthorizationDetails = v
}

// GetProofOfPossession returns the ProofOfPossession field value
// If the value is explicit nil, the zero value for ResourceServerProofOfPossession will be returned
func (o *ResourceServer) GetProofOfPossession() ResourceServerProofOfPossession {
	if o == nil || o.ProofOfPossession.Get() == nil {
		var ret ResourceServerProofOfPossession
		return ret
	}

	return *o.ProofOfPossession.Get()
}

// GetProofOfPossessionOk returns a tuple with the ProofOfPossession field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceServer) GetProofOfPossessionOk() (*ResourceServerProofOfPossession, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProofOfPossession.Get(), o.ProofOfPossession.IsSet()
}

// SetProofOfPossession sets field value
func (o *ResourceServer) SetProofOfPossession(v ResourceServerProofOfPossession) {
	o.ProofOfPossession.Set(&v)
}

func (o ResourceServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["is_system"] = o.IsSystem
	toSerialize["identifier"] = o.Identifier
	toSerialize["scopes"] = o.Scopes
	toSerialize["signing_alg"] = o.SigningAlg
	toSerialize["signing_secret"] = o.SigningSecret
	toSerialize["allow_offline_access"] = o.AllowOfflineAccess
	toSerialize["skip_consent_for_verifiable_first_party_clients"] = o.SkipConsentForVerifiableFirstPartyClients
	toSerialize["token_lifetime"] = o.TokenLifetime
	toSerialize["token_lifetime_for_web"] = o.TokenLifetimeForWeb
	toSerialize["enforce_policies"] = o.EnforcePolicies
	toSerialize["token_dialect"] = o.TokenDialect
	toSerialize["client"] = o.Client
	toSerialize["token_encryption"] = o.TokenEncryption.Get()
	toSerialize["consent_policy"] = o.ConsentPolicy.Get()
	toSerialize["authorization_details"] = o.AuthorizationDetails
	toSerialize["proof_of_possession"] = o.ProofOfPossession.Get()
	return toSerialize, nil
}

func (o *ResourceServer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"is_system",
		"identifier",
		"scopes",
		"signing_alg",
		"signing_secret",
		"allow_offline_access",
		"skip_consent_for_verifiable_first_party_clients",
		"token_lifetime",
		"token_lifetime_for_web",
		"enforce_policies",
		"token_dialect",
		"client",
		"token_encryption",
		"consent_policy",
		"authorization_details",
		"proof_of_possession",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceServer := _ResourceServer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceServer)

	if err != nil {
		return err
	}

	*o = ResourceServer(varResourceServer)

	return err
}

type NullableResourceServer struct {
	value *ResourceServer
	isSet bool
}

func (v NullableResourceServer) Get() *ResourceServer {
	return v.value
}

func (v *NullableResourceServer) Set(val *ResourceServer) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceServer) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceServer(val *ResourceServer) *NullableResourceServer {
	return &NullableResourceServer{value: val, isSet: true}
}

func (v NullableResourceServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
