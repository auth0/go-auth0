/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// EmailProviderUpdate struct for EmailProviderUpdate
type EmailProviderUpdate struct {
	Name *EmailProviderUpdateName `json:"name,omitempty"`
	// Whether the provider is enabled (true) or disabled (false).
	Enabled *bool `json:"enabled,omitempty"`
	// Email address to use as \"from\" when no other address specified.
	DefaultFromAddress *string                         `json:"default_from_address,omitempty"`
	Credentials        *EmailProviderUpdateCredentials `json:"credentials,omitempty"`
	// Specific provider setting
	Settings map[string]interface{} `json:"settings,omitempty"`
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EmailProviderUpdate) GetName() EmailProviderUpdateName {
	if o == nil || IsNil(o.Name) {
		var ret EmailProviderUpdateName
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailProviderUpdate) GetNameOk() (*EmailProviderUpdateName, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EmailProviderUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given EmailProviderUpdateName and assigns it to the Name field.
func (o *EmailProviderUpdate) SetName(v EmailProviderUpdateName) {
	o.Name = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *EmailProviderUpdate) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailProviderUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *EmailProviderUpdate) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *EmailProviderUpdate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDefaultFromAddress returns the DefaultFromAddress field value if set, zero value otherwise.
func (o *EmailProviderUpdate) GetDefaultFromAddress() string {
	if o == nil || IsNil(o.DefaultFromAddress) {
		var ret string
		return ret
	}
	return *o.DefaultFromAddress
}

// GetDefaultFromAddressOk returns a tuple with the DefaultFromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailProviderUpdate) GetDefaultFromAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultFromAddress) {
		return nil, false
	}
	return o.DefaultFromAddress, true
}

// HasDefaultFromAddress returns a boolean if a field has been set.
func (o *EmailProviderUpdate) HasDefaultFromAddress() bool {
	if o != nil && !IsNil(o.DefaultFromAddress) {
		return true
	}

	return false
}

// SetDefaultFromAddress gets a reference to the given string and assigns it to the DefaultFromAddress field.
func (o *EmailProviderUpdate) SetDefaultFromAddress(v string) {
	o.DefaultFromAddress = &v
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *EmailProviderUpdate) GetCredentials() EmailProviderUpdateCredentials {
	if o == nil || IsNil(o.Credentials) {
		var ret EmailProviderUpdateCredentials
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailProviderUpdate) GetCredentialsOk() (*EmailProviderUpdateCredentials, bool) {
	if o == nil || IsNil(o.Credentials) {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *EmailProviderUpdate) HasCredentials() bool {
	if o != nil && !IsNil(o.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given EmailProviderUpdateCredentials and assigns it to the Credentials field.
func (o *EmailProviderUpdate) SetCredentials(v EmailProviderUpdateCredentials) {
	o.Credentials = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailProviderUpdate) GetSettings() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailProviderUpdate) GetSettingsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Settings) {
		return map[string]interface{}{}, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *EmailProviderUpdate) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]interface{} and assigns it to the Settings field.
func (o *EmailProviderUpdate) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

func (o EmailProviderUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailProviderUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.DefaultFromAddress) {
		toSerialize["default_from_address"] = o.DefaultFromAddress
	}
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	return toSerialize, nil
}

type NullableEmailProviderUpdate struct {
	value *EmailProviderUpdate
	isSet bool
}

func (v NullableEmailProviderUpdate) Get() *EmailProviderUpdate {
	return v.value
}

func (v *NullableEmailProviderUpdate) Set(val *EmailProviderUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProviderUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProviderUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProviderUpdate(val *EmailProviderUpdate) *NullableEmailProviderUpdate {
	return &NullableEmailProviderUpdate{value: val, isSet: true}
}

func (v NullableEmailProviderUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProviderUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
