/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// GetSuspiciousIpThrottling200Response struct for GetSuspiciousIpThrottling200Response
type GetSuspiciousIpThrottling200Response struct {
	// Whether or not suspicious IP throttling attack protections are active.
	Enabled bool `json:"enabled"`
	// Action to take when a suspicious IP throttling threshold is violated.           Possible values: <code>block</code>, <code>admin_notification</code>.
	Shields []GetBreachedPasswordDetection200ResponseStagePreUserRegistrationShieldsInner `json:"shields"`
	// List of trusted IP addresses that will not have attack protection enforced against them.
	Allowlist            []GetBruteForceProtection200ResponseAllowlistInner `json:"allowlist"`
	Stage                GetSuspiciousIpThrottling200ResponseStage          `json:"stage"`
	AdditionalProperties map[string]interface{}
}

type _GetSuspiciousIpThrottling200Response GetSuspiciousIpThrottling200Response

// GetEnabled returns the Enabled field value
func (o *GetSuspiciousIpThrottling200Response) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *GetSuspiciousIpThrottling200Response) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *GetSuspiciousIpThrottling200Response) SetEnabled(v bool) {
	o.Enabled = v
}

// GetShields returns the Shields field value
func (o *GetSuspiciousIpThrottling200Response) GetShields() []GetBreachedPasswordDetection200ResponseStagePreUserRegistrationShieldsInner {
	if o == nil {
		var ret []GetBreachedPasswordDetection200ResponseStagePreUserRegistrationShieldsInner
		return ret
	}

	return o.Shields
}

// GetShieldsOk returns a tuple with the Shields field value
// and a boolean to check if the value has been set.
func (o *GetSuspiciousIpThrottling200Response) GetShieldsOk() ([]GetBreachedPasswordDetection200ResponseStagePreUserRegistrationShieldsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Shields, true
}

// SetShields sets field value
func (o *GetSuspiciousIpThrottling200Response) SetShields(v []GetBreachedPasswordDetection200ResponseStagePreUserRegistrationShieldsInner) {
	o.Shields = v
}

// GetAllowlist returns the Allowlist field value
func (o *GetSuspiciousIpThrottling200Response) GetAllowlist() []GetBruteForceProtection200ResponseAllowlistInner {
	if o == nil {
		var ret []GetBruteForceProtection200ResponseAllowlistInner
		return ret
	}

	return o.Allowlist
}

// GetAllowlistOk returns a tuple with the Allowlist field value
// and a boolean to check if the value has been set.
func (o *GetSuspiciousIpThrottling200Response) GetAllowlistOk() ([]GetBruteForceProtection200ResponseAllowlistInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Allowlist, true
}

// SetAllowlist sets field value
func (o *GetSuspiciousIpThrottling200Response) SetAllowlist(v []GetBruteForceProtection200ResponseAllowlistInner) {
	o.Allowlist = v
}

// GetStage returns the Stage field value
func (o *GetSuspiciousIpThrottling200Response) GetStage() GetSuspiciousIpThrottling200ResponseStage {
	if o == nil {
		var ret GetSuspiciousIpThrottling200ResponseStage
		return ret
	}

	return o.Stage
}

// GetStageOk returns a tuple with the Stage field value
// and a boolean to check if the value has been set.
func (o *GetSuspiciousIpThrottling200Response) GetStageOk() (*GetSuspiciousIpThrottling200ResponseStage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stage, true
}

// SetStage sets field value
func (o *GetSuspiciousIpThrottling200Response) SetStage(v GetSuspiciousIpThrottling200ResponseStage) {
	o.Stage = v
}

func (o GetSuspiciousIpThrottling200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSuspiciousIpThrottling200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["shields"] = o.Shields
	toSerialize["allowlist"] = o.Allowlist
	toSerialize["stage"] = o.Stage

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetSuspiciousIpThrottling200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"shields",
		"allowlist",
		"stage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetSuspiciousIpThrottling200Response := _GetSuspiciousIpThrottling200Response{}

	err = json.Unmarshal(data, &varGetSuspiciousIpThrottling200Response)

	if err != nil {
		return err
	}

	*o = GetSuspiciousIpThrottling200Response(varGetSuspiciousIpThrottling200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "shields")
		delete(additionalProperties, "allowlist")
		delete(additionalProperties, "stage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetSuspiciousIpThrottling200Response struct {
	value *GetSuspiciousIpThrottling200Response
	isSet bool
}

func (v NullableGetSuspiciousIpThrottling200Response) Get() *GetSuspiciousIpThrottling200Response {
	return v.value
}

func (v *NullableGetSuspiciousIpThrottling200Response) Set(val *GetSuspiciousIpThrottling200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSuspiciousIpThrottling200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSuspiciousIpThrottling200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSuspiciousIpThrottling200Response(val *GetSuspiciousIpThrottling200Response) *NullableGetSuspiciousIpThrottling200Response {
	return &NullableGetSuspiciousIpThrottling200Response{value: val, isSet: true}
}

func (v NullableGetSuspiciousIpThrottling200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSuspiciousIpThrottling200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
