/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetConnections200Response - struct for GetConnections200Response
type GetConnections200Response struct {
	GetConnections200ResponseOneOf *GetConnections200ResponseOneOf
	ArrayOfConnection              *[]Connection
}

// GetConnections200ResponseOneOfAsGetConnections200Response is a convenience function that returns GetConnections200ResponseOneOf wrapped in GetConnections200Response
func GetConnections200ResponseOneOfAsGetConnections200Response(v *GetConnections200ResponseOneOf) GetConnections200Response {
	return GetConnections200Response{
		GetConnections200ResponseOneOf: v,
	}
}

// []ConnectionAsGetConnections200Response is a convenience function that returns []Connection wrapped in GetConnections200Response
func ArrayOfConnectionAsGetConnections200Response(v *[]Connection) GetConnections200Response {
	return GetConnections200Response{
		ArrayOfConnection: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetConnections200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetConnections200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetConnections200ResponseOneOf)
	if err == nil {
		jsonGetConnections200ResponseOneOf, _ := json.Marshal(dst.GetConnections200ResponseOneOf)
		if string(jsonGetConnections200ResponseOneOf) == "{}" { // empty struct
			dst.GetConnections200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetConnections200ResponseOneOf); err != nil {
				dst.GetConnections200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetConnections200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfConnection
	err = newStrictDecoder(data).Decode(&dst.ArrayOfConnection)
	fmt.Printf("err: %v\n", err)
	if err == nil {
		jsonArrayOfConnection, _ := json.Marshal(dst.ArrayOfConnection)
		if string(jsonArrayOfConnection) == "{}" { // empty struct
			dst.ArrayOfConnection = nil
		} else {
			if err = validator.Validate(dst.ArrayOfConnection); err != nil {
				dst.ArrayOfConnection = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfConnection = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetConnections200ResponseOneOf = nil
		dst.ArrayOfConnection = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetConnections200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetConnections200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetConnections200Response) MarshalJSON() ([]byte, error) {
	if src.GetConnections200ResponseOneOf != nil {
		return json.Marshal(&src.GetConnections200ResponseOneOf)
	}

	if src.ArrayOfConnection != nil {
		return json.Marshal(&src.ArrayOfConnection)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetConnections200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetConnections200ResponseOneOf != nil {
		return obj.GetConnections200ResponseOneOf
	}

	if obj.ArrayOfConnection != nil {
		return obj.ArrayOfConnection
	}

	// all schemas are nil
	return nil
}

type NullableGetConnections200Response struct {
	value *GetConnections200Response
	isSet bool
}

func (v NullableGetConnections200Response) Get() *GetConnections200Response {
	return v.value
}

func (v *NullableGetConnections200Response) Set(val *GetConnections200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetConnections200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetConnections200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetConnections200Response(val *GetConnections200Response) *NullableGetConnections200Response {
	return &NullableGetConnections200Response{value: val, isSet: true}
}

func (v NullableGetConnections200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetConnections200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
