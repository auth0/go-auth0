/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// HookCreateTriggerId Execution stage of this rule. Can be `credentials-exchange`, `pre-user-registration`, `post-user-registration`, `post-change-password`, or `send-phone-message`.
type HookCreateTriggerId string

// List of hookCreate_triggerId
const (
	HOOKCREATETRIGGERID_CREDENTIALS_EXCHANGE   HookCreateTriggerId = "credentials-exchange"
	HOOKCREATETRIGGERID_PRE_USER_REGISTRATION  HookCreateTriggerId = "pre-user-registration"
	HOOKCREATETRIGGERID_POST_USER_REGISTRATION HookCreateTriggerId = "post-user-registration"
	HOOKCREATETRIGGERID_POST_CHANGE_PASSWORD   HookCreateTriggerId = "post-change-password"
	HOOKCREATETRIGGERID_SEND_PHONE_MESSAGE     HookCreateTriggerId = "send-phone-message"
)

// All allowed values of HookCreateTriggerId enum
var AllowedHookCreateTriggerIdEnumValues = []HookCreateTriggerId{
	"credentials-exchange",
	"pre-user-registration",
	"post-user-registration",
	"post-change-password",
	"send-phone-message",
}

func (v *HookCreateTriggerId) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HookCreateTriggerId(value)
	for _, existing := range AllowedHookCreateTriggerIdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HookCreateTriggerId", value)
}

// NewHookCreateTriggerIdFromValue returns a pointer to a valid HookCreateTriggerId
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHookCreateTriggerIdFromValue(v string) (*HookCreateTriggerId, error) {
	ev := HookCreateTriggerId(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HookCreateTriggerId: valid values are %v", v, AllowedHookCreateTriggerIdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HookCreateTriggerId) IsValid() bool {
	for _, existing := range AllowedHookCreateTriggerIdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to hookCreate_triggerId value
func (v HookCreateTriggerId) Ptr() *HookCreateTriggerId {
	return &v
}

type NullableHookCreateTriggerId struct {
	value *HookCreateTriggerId
	isSet bool
}

func (v NullableHookCreateTriggerId) Get() *HookCreateTriggerId {
	return v.value
}

func (v *NullableHookCreateTriggerId) Set(val *HookCreateTriggerId) {
	v.value = val
	v.isSet = true
}

func (v NullableHookCreateTriggerId) IsSet() bool {
	return v.isSet
}

func (v *NullableHookCreateTriggerId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHookCreateTriggerId(val *HookCreateTriggerId) *NullableHookCreateTriggerId {
	return &NullableHookCreateTriggerId{value: val, isSet: true}
}

func (v NullableHookCreateTriggerId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHookCreateTriggerId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
