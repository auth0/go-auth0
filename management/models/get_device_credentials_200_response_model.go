/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetDeviceCredentials200Response - struct for GetDeviceCredentials200Response
type GetDeviceCredentials200Response struct {
	GetDeviceCredentials200ResponseOneOf *GetDeviceCredentials200ResponseOneOf
	ArrayOfDeviceCredential              *[]DeviceCredential
}

// GetDeviceCredentials200ResponseOneOfAsGetDeviceCredentials200Response is a convenience function that returns GetDeviceCredentials200ResponseOneOf wrapped in GetDeviceCredentials200Response
func GetDeviceCredentials200ResponseOneOfAsGetDeviceCredentials200Response(v *GetDeviceCredentials200ResponseOneOf) GetDeviceCredentials200Response {
	return GetDeviceCredentials200Response{
		GetDeviceCredentials200ResponseOneOf: v,
	}
}

// []DeviceCredentialAsGetDeviceCredentials200Response is a convenience function that returns []DeviceCredential wrapped in GetDeviceCredentials200Response
func ArrayOfDeviceCredentialAsGetDeviceCredentials200Response(v *[]DeviceCredential) GetDeviceCredentials200Response {
	return GetDeviceCredentials200Response{
		ArrayOfDeviceCredential: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDeviceCredentials200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetDeviceCredentials200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetDeviceCredentials200ResponseOneOf)
	if err == nil {
		jsonGetDeviceCredentials200ResponseOneOf, _ := json.Marshal(dst.GetDeviceCredentials200ResponseOneOf)
		if string(jsonGetDeviceCredentials200ResponseOneOf) == "{}" { // empty struct
			dst.GetDeviceCredentials200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetDeviceCredentials200ResponseOneOf); err != nil {
				dst.GetDeviceCredentials200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetDeviceCredentials200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfDeviceCredential
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDeviceCredential)
	if err == nil {
		jsonArrayOfDeviceCredential, _ := json.Marshal(dst.ArrayOfDeviceCredential)
		if string(jsonArrayOfDeviceCredential) == "{}" { // empty struct
			dst.ArrayOfDeviceCredential = nil
		} else {
			if err = validator.Validate(dst.ArrayOfDeviceCredential); err != nil {
				dst.ArrayOfDeviceCredential = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfDeviceCredential = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetDeviceCredentials200ResponseOneOf = nil
		dst.ArrayOfDeviceCredential = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDeviceCredentials200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDeviceCredentials200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDeviceCredentials200Response) MarshalJSON() ([]byte, error) {
	if src.GetDeviceCredentials200ResponseOneOf != nil {
		return json.Marshal(&src.GetDeviceCredentials200ResponseOneOf)
	}

	if src.ArrayOfDeviceCredential != nil {
		return json.Marshal(&src.ArrayOfDeviceCredential)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDeviceCredentials200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetDeviceCredentials200ResponseOneOf != nil {
		return obj.GetDeviceCredentials200ResponseOneOf
	}

	if obj.ArrayOfDeviceCredential != nil {
		return obj.ArrayOfDeviceCredential
	}

	// all schemas are nil
	return nil
}

type NullableGetDeviceCredentials200Response struct {
	value *GetDeviceCredentials200Response
	isSet bool
}

func (v NullableGetDeviceCredentials200Response) Get() *GetDeviceCredentials200Response {
	return v.value
}

func (v *NullableGetDeviceCredentials200Response) Set(val *GetDeviceCredentials200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDeviceCredentials200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDeviceCredentials200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDeviceCredentials200Response(val *GetDeviceCredentials200Response) *NullableGetDeviceCredentials200Response {
	return &NullableGetDeviceCredentials200Response{value: val, isSet: true}
}

func (v NullableGetDeviceCredentials200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDeviceCredentials200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
