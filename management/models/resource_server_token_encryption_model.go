/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// ResourceServerTokenEncryption struct for ResourceServerTokenEncryption
type ResourceServerTokenEncryption struct {
	Format        ResourceServerTokenEncryptionFormat        `json:"format"`
	EncryptionKey ResourceServerTokenEncryptionEncryptionKey `json:"encryption_key"`
}

type _ResourceServerTokenEncryption ResourceServerTokenEncryption

// GetFormat returns the Format field value
func (o *ResourceServerTokenEncryption) GetFormat() ResourceServerTokenEncryptionFormat {
	if o == nil {
		var ret ResourceServerTokenEncryptionFormat
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *ResourceServerTokenEncryption) GetFormatOk() (*ResourceServerTokenEncryptionFormat, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *ResourceServerTokenEncryption) SetFormat(v ResourceServerTokenEncryptionFormat) {
	o.Format = v
}

// GetEncryptionKey returns the EncryptionKey field value
func (o *ResourceServerTokenEncryption) GetEncryptionKey() ResourceServerTokenEncryptionEncryptionKey {
	if o == nil {
		var ret ResourceServerTokenEncryptionEncryptionKey
		return ret
	}

	return o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value
// and a boolean to check if the value has been set.
func (o *ResourceServerTokenEncryption) GetEncryptionKeyOk() (*ResourceServerTokenEncryptionEncryptionKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptionKey, true
}

// SetEncryptionKey sets field value
func (o *ResourceServerTokenEncryption) SetEncryptionKey(v ResourceServerTokenEncryptionEncryptionKey) {
	o.EncryptionKey = v
}

func (o ResourceServerTokenEncryption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceServerTokenEncryption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["format"] = o.Format
	toSerialize["encryption_key"] = o.EncryptionKey
	return toSerialize, nil
}

func (o *ResourceServerTokenEncryption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"format",
		"encryption_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceServerTokenEncryption := _ResourceServerTokenEncryption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varResourceServerTokenEncryption)

	if err != nil {
		return err
	}

	*o = ResourceServerTokenEncryption(varResourceServerTokenEncryption)

	return err
}

type NullableResourceServerTokenEncryption struct {
	value *ResourceServerTokenEncryption
	isSet bool
}

func (v NullableResourceServerTokenEncryption) Get() *ResourceServerTokenEncryption {
	return v.value
}

func (v *NullableResourceServerTokenEncryption) Set(val *ResourceServerTokenEncryption) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceServerTokenEncryption) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceServerTokenEncryption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceServerTokenEncryption(val *ResourceServerTokenEncryption) *NullableResourceServerTokenEncryption {
	return &NullableResourceServerTokenEncryption{value: val, isSet: true}
}

func (v NullableResourceServerTokenEncryption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceServerTokenEncryption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
