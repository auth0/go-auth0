/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// EmailProviderUpdateCredentials Credentials required to use the provider.
type EmailProviderUpdateCredentials struct {
	EmailProviderUpdateCredentialsAnyOf  *EmailProviderUpdateCredentialsAnyOf
	EmailProviderUpdateCredentialsAnyOf1 *EmailProviderUpdateCredentialsAnyOf1
	EmailProviderUpdateCredentialsAnyOf2 *EmailProviderUpdateCredentialsAnyOf2
	EmailProviderUpdateCredentialsAnyOf3 *EmailProviderUpdateCredentialsAnyOf3
	EmailProviderUpdateCredentialsAnyOf4 *EmailProviderUpdateCredentialsAnyOf4
	EmailProviderUpdateCredentialsAnyOf5 *EmailProviderUpdateCredentialsAnyOf5
	EmailProviderUpdateCredentialsAnyOf6 *EmailProviderUpdateCredentialsAnyOf6
	MapmapOfStringAny                    *map[string]interface{}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *EmailProviderUpdateCredentials) UnmarshalJSON(data []byte) error {
	var err error

	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderUpdateCredentialsAnyOf)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderUpdateCredentialsAnyOf, _ := json.Marshal(dst.EmailProviderUpdateCredentialsAnyOf)
		if string(jsonEmailProviderUpdateCredentialsAnyOf) == "{}" {
			dst.EmailProviderUpdateCredentialsAnyOf = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderUpdateCredentialsAnyOf, return on the first match
		}
	} else {
		dst.EmailProviderUpdateCredentialsAnyOf = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderUpdateCredentialsAnyOf1)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderUpdateCredentialsAnyOf1, _ := json.Marshal(dst.EmailProviderUpdateCredentialsAnyOf1)
		if string(jsonEmailProviderUpdateCredentialsAnyOf1) == "{}" {
			dst.EmailProviderUpdateCredentialsAnyOf1 = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderUpdateCredentialsAnyOf1, return on the first match
		}
	} else {
		dst.EmailProviderUpdateCredentialsAnyOf1 = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderUpdateCredentialsAnyOf2)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderUpdateCredentialsAnyOf2, _ := json.Marshal(dst.EmailProviderUpdateCredentialsAnyOf2)
		if string(jsonEmailProviderUpdateCredentialsAnyOf2) == "{}" {
			dst.EmailProviderUpdateCredentialsAnyOf2 = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderUpdateCredentialsAnyOf2, return on the first match
		}
	} else {
		dst.EmailProviderUpdateCredentialsAnyOf2 = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderUpdateCredentialsAnyOf3)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderUpdateCredentialsAnyOf3, _ := json.Marshal(dst.EmailProviderUpdateCredentialsAnyOf3)
		if string(jsonEmailProviderUpdateCredentialsAnyOf3) == "{}" {
			dst.EmailProviderUpdateCredentialsAnyOf3 = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderUpdateCredentialsAnyOf3, return on the first match
		}
	} else {
		dst.EmailProviderUpdateCredentialsAnyOf3 = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderUpdateCredentialsAnyOf4)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderUpdateCredentialsAnyOf4, _ := json.Marshal(dst.EmailProviderUpdateCredentialsAnyOf4)
		if string(jsonEmailProviderUpdateCredentialsAnyOf4) == "{}" {
			dst.EmailProviderUpdateCredentialsAnyOf4 = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderUpdateCredentialsAnyOf4, return on the first match
		}
	} else {
		dst.EmailProviderUpdateCredentialsAnyOf4 = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderUpdateCredentialsAnyOf5)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderUpdateCredentialsAnyOf5, _ := json.Marshal(dst.EmailProviderUpdateCredentialsAnyOf5)
		if string(jsonEmailProviderUpdateCredentialsAnyOf5) == "{}" {
			dst.EmailProviderUpdateCredentialsAnyOf5 = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderUpdateCredentialsAnyOf5, return on the first match
		}
	} else {
		dst.EmailProviderUpdateCredentialsAnyOf5 = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderUpdateCredentialsAnyOf6)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderUpdateCredentialsAnyOf6, _ := json.Marshal(dst.EmailProviderUpdateCredentialsAnyOf6)
		if string(jsonEmailProviderUpdateCredentialsAnyOf6) == "{}" {
			dst.EmailProviderUpdateCredentialsAnyOf6 = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderUpdateCredentialsAnyOf6, return on the first match
		}
	} else {
		dst.EmailProviderUpdateCredentialsAnyOf6 = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.MapmapOfStringAny)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" {
			dst.MapmapOfStringAny = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.MapmapOfStringAny, return on the first match
		}
	} else {
		dst.MapmapOfStringAny = nil // Unmarshal failed, set to nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(EmailProviderUpdateCredentials)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *EmailProviderUpdateCredentials) MarshalJSON() ([]byte, error) {
	// Check if the field is not nil before marshaling
	if src.EmailProviderUpdateCredentialsAnyOf != nil {
		return json.Marshal(&src.EmailProviderUpdateCredentialsAnyOf)
	}
	// Check if the field is not nil before marshaling
	if src.EmailProviderUpdateCredentialsAnyOf1 != nil {
		return json.Marshal(&src.EmailProviderUpdateCredentialsAnyOf1)
	}
	// Check if the field is not nil before marshaling
	if src.EmailProviderUpdateCredentialsAnyOf2 != nil {
		return json.Marshal(&src.EmailProviderUpdateCredentialsAnyOf2)
	}
	// Check if the field is not nil before marshaling
	if src.EmailProviderUpdateCredentialsAnyOf3 != nil {
		return json.Marshal(&src.EmailProviderUpdateCredentialsAnyOf3)
	}
	// Check if the field is not nil before marshaling
	if src.EmailProviderUpdateCredentialsAnyOf4 != nil {
		return json.Marshal(&src.EmailProviderUpdateCredentialsAnyOf4)
	}
	// Check if the field is not nil before marshaling
	if src.EmailProviderUpdateCredentialsAnyOf5 != nil {
		return json.Marshal(&src.EmailProviderUpdateCredentialsAnyOf5)
	}
	// Check if the field is not nil before marshaling
	if src.EmailProviderUpdateCredentialsAnyOf6 != nil {
		return json.Marshal(&src.EmailProviderUpdateCredentialsAnyOf6)
	}
	// Check if the field is not nil before marshaling
	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}
	return nil, nil // no data in anyOf schemas, return null
}

type NullableEmailProviderUpdateCredentials struct {
	value *EmailProviderUpdateCredentials
	isSet bool
}

func (v NullableEmailProviderUpdateCredentials) Get() *EmailProviderUpdateCredentials {
	return v.value
}

func (v *NullableEmailProviderUpdateCredentials) Set(val *EmailProviderUpdateCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProviderUpdateCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProviderUpdateCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProviderUpdateCredentials(val *EmailProviderUpdateCredentials) *NullableEmailProviderUpdateCredentials {
	return &NullableEmailProviderUpdateCredentials{value: val, isSet: true}
}

func (v NullableEmailProviderUpdateCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProviderUpdateCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
