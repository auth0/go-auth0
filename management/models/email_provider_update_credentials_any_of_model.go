/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// EmailProviderUpdateCredentialsAnyOf struct for EmailProviderUpdateCredentialsAnyOf
type EmailProviderUpdateCredentialsAnyOf struct {
	// API Key
	ApiKey string `json:"api_key"`
}

type _EmailProviderUpdateCredentialsAnyOf EmailProviderUpdateCredentialsAnyOf

// GetApiKey returns the ApiKey field value
func (o *EmailProviderUpdateCredentialsAnyOf) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *EmailProviderUpdateCredentialsAnyOf) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *EmailProviderUpdateCredentialsAnyOf) SetApiKey(v string) {
	o.ApiKey = v
}

func (o EmailProviderUpdateCredentialsAnyOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailProviderUpdateCredentialsAnyOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["api_key"] = o.ApiKey
	return toSerialize, nil
}

func (o *EmailProviderUpdateCredentialsAnyOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"api_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailProviderUpdateCredentialsAnyOf := _EmailProviderUpdateCredentialsAnyOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailProviderUpdateCredentialsAnyOf)

	if err != nil {
		return err
	}

	*o = EmailProviderUpdateCredentialsAnyOf(varEmailProviderUpdateCredentialsAnyOf)

	return err
}

type NullableEmailProviderUpdateCredentialsAnyOf struct {
	value *EmailProviderUpdateCredentialsAnyOf
	isSet bool
}

func (v NullableEmailProviderUpdateCredentialsAnyOf) Get() *EmailProviderUpdateCredentialsAnyOf {
	return v.value
}

func (v *NullableEmailProviderUpdateCredentialsAnyOf) Set(val *EmailProviderUpdateCredentialsAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProviderUpdateCredentialsAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProviderUpdateCredentialsAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProviderUpdateCredentialsAnyOf(val *EmailProviderUpdateCredentialsAnyOf) *NullableEmailProviderUpdateCredentialsAnyOf {
	return &NullableEmailProviderUpdateCredentialsAnyOf{value: val, isSet: true}
}

func (v NullableEmailProviderUpdateCredentialsAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProviderUpdateCredentialsAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
