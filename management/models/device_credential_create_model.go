/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DeviceCredentialCreate struct for DeviceCredentialCreate
type DeviceCredentialCreate struct {
	// Name for this device easily recognized by owner.
	DeviceName string                     `json:"device_name"`
	Type       DeviceCredentialCreateType `json:"type"`
	// Base64 encoded string containing the credential.
	Value string `json:"value"`
	// Unique identifier for the device. Recommend using <a href=\"http://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID\">Android_ID</a> on Android and <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDevice_Class/index.html#//apple_ref/occ/instp/UIDevice/identifierForVendor\">identifierForVendor</a>.
	DeviceId string `json:"device_id"`
	// client_id of the client (application) this credential is for.
	ClientId             *string `json:"client_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceCredentialCreate DeviceCredentialCreate

// GetDeviceName returns the DeviceName field value
func (o *DeviceCredentialCreate) GetDeviceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value
// and a boolean to check if the value has been set.
func (o *DeviceCredentialCreate) GetDeviceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceName, true
}

// SetDeviceName sets field value
func (o *DeviceCredentialCreate) SetDeviceName(v string) {
	o.DeviceName = v
}

// GetType returns the Type field value
func (o *DeviceCredentialCreate) GetType() DeviceCredentialCreateType {
	if o == nil {
		var ret DeviceCredentialCreateType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DeviceCredentialCreate) GetTypeOk() (*DeviceCredentialCreateType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DeviceCredentialCreate) SetType(v DeviceCredentialCreateType) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *DeviceCredentialCreate) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DeviceCredentialCreate) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DeviceCredentialCreate) SetValue(v string) {
	o.Value = v
}

// GetDeviceId returns the DeviceId field value
func (o *DeviceCredentialCreate) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *DeviceCredentialCreate) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *DeviceCredentialCreate) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *DeviceCredentialCreate) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCredentialCreate) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *DeviceCredentialCreate) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *DeviceCredentialCreate) SetClientId(v string) {
	o.ClientId = &v
}

func (o DeviceCredentialCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceCredentialCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["device_name"] = o.DeviceName
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	toSerialize["device_id"] = o.DeviceId
	if !IsNil(o.ClientId) {
		toSerialize["client_id"] = o.ClientId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceCredentialCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device_name",
		"type",
		"value",
		"device_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceCredentialCreate := _DeviceCredentialCreate{}

	err = json.Unmarshal(data, &varDeviceCredentialCreate)

	if err != nil {
		return err
	}

	*o = DeviceCredentialCreate(varDeviceCredentialCreate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device_name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "value")
		delete(additionalProperties, "device_id")
		delete(additionalProperties, "client_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceCredentialCreate struct {
	value *DeviceCredentialCreate
	isSet bool
}

func (v NullableDeviceCredentialCreate) Get() *DeviceCredentialCreate {
	return v.value
}

func (v *NullableDeviceCredentialCreate) Set(val *DeviceCredentialCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceCredentialCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceCredentialCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceCredentialCreate(val *DeviceCredentialCreate) *NullableDeviceCredentialCreate {
	return &NullableDeviceCredentialCreate{value: val, isSet: true}
}

func (v NullableDeviceCredentialCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceCredentialCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
