/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// PatchLogStreamsByIdRequestSink - struct for PatchLogStreamsByIdRequestSink
type PatchLogStreamsByIdRequestSink struct {
	GetLogStreams200ResponseInnerOneOf5Sink *GetLogStreams200ResponseInnerOneOf5Sink
	GetLogStreams200ResponseInnerOneOfSink  *GetLogStreams200ResponseInnerOneOfSink
	PatchLogStreamsByIdRequestSinkOneOf     *PatchLogStreamsByIdRequestSinkOneOf
	PatchLogStreamsByIdRequestSinkOneOf1    *PatchLogStreamsByIdRequestSinkOneOf1
	PatchLogStreamsByIdRequestSinkOneOf2    *PatchLogStreamsByIdRequestSinkOneOf2
	PatchLogStreamsByIdRequestSinkOneOf3    *PatchLogStreamsByIdRequestSinkOneOf3
}

// GetLogStreams200ResponseInnerOneOf5SinkAsPatchLogStreamsByIdRequestSink is a convenience function that returns GetLogStreams200ResponseInnerOneOf5Sink wrapped in PatchLogStreamsByIdRequestSink
func GetLogStreams200ResponseInnerOneOf5SinkAsPatchLogStreamsByIdRequestSink(v *GetLogStreams200ResponseInnerOneOf5Sink) PatchLogStreamsByIdRequestSink {
	return PatchLogStreamsByIdRequestSink{
		GetLogStreams200ResponseInnerOneOf5Sink: v,
	}
}

// GetLogStreams200ResponseInnerOneOfSinkAsPatchLogStreamsByIdRequestSink is a convenience function that returns GetLogStreams200ResponseInnerOneOfSink wrapped in PatchLogStreamsByIdRequestSink
func GetLogStreams200ResponseInnerOneOfSinkAsPatchLogStreamsByIdRequestSink(v *GetLogStreams200ResponseInnerOneOfSink) PatchLogStreamsByIdRequestSink {
	return PatchLogStreamsByIdRequestSink{
		GetLogStreams200ResponseInnerOneOfSink: v,
	}
}

// PatchLogStreamsByIdRequestSinkOneOfAsPatchLogStreamsByIdRequestSink is a convenience function that returns PatchLogStreamsByIdRequestSinkOneOf wrapped in PatchLogStreamsByIdRequestSink
func PatchLogStreamsByIdRequestSinkOneOfAsPatchLogStreamsByIdRequestSink(v *PatchLogStreamsByIdRequestSinkOneOf) PatchLogStreamsByIdRequestSink {
	return PatchLogStreamsByIdRequestSink{
		PatchLogStreamsByIdRequestSinkOneOf: v,
	}
}

// PatchLogStreamsByIdRequestSinkOneOf1AsPatchLogStreamsByIdRequestSink is a convenience function that returns PatchLogStreamsByIdRequestSinkOneOf1 wrapped in PatchLogStreamsByIdRequestSink
func PatchLogStreamsByIdRequestSinkOneOf1AsPatchLogStreamsByIdRequestSink(v *PatchLogStreamsByIdRequestSinkOneOf1) PatchLogStreamsByIdRequestSink {
	return PatchLogStreamsByIdRequestSink{
		PatchLogStreamsByIdRequestSinkOneOf1: v,
	}
}

// PatchLogStreamsByIdRequestSinkOneOf2AsPatchLogStreamsByIdRequestSink is a convenience function that returns PatchLogStreamsByIdRequestSinkOneOf2 wrapped in PatchLogStreamsByIdRequestSink
func PatchLogStreamsByIdRequestSinkOneOf2AsPatchLogStreamsByIdRequestSink(v *PatchLogStreamsByIdRequestSinkOneOf2) PatchLogStreamsByIdRequestSink {
	return PatchLogStreamsByIdRequestSink{
		PatchLogStreamsByIdRequestSinkOneOf2: v,
	}
}

// PatchLogStreamsByIdRequestSinkOneOf3AsPatchLogStreamsByIdRequestSink is a convenience function that returns PatchLogStreamsByIdRequestSinkOneOf3 wrapped in PatchLogStreamsByIdRequestSink
func PatchLogStreamsByIdRequestSinkOneOf3AsPatchLogStreamsByIdRequestSink(v *PatchLogStreamsByIdRequestSinkOneOf3) PatchLogStreamsByIdRequestSink {
	return PatchLogStreamsByIdRequestSink{
		PatchLogStreamsByIdRequestSinkOneOf3: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PatchLogStreamsByIdRequestSink) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetLogStreams200ResponseInnerOneOf5Sink
	err = newStrictDecoder(data).Decode(&dst.GetLogStreams200ResponseInnerOneOf5Sink)
	if err == nil {
		jsonGetLogStreams200ResponseInnerOneOf5Sink, _ := json.Marshal(dst.GetLogStreams200ResponseInnerOneOf5Sink)
		if string(jsonGetLogStreams200ResponseInnerOneOf5Sink) == "{}" { // empty struct
			dst.GetLogStreams200ResponseInnerOneOf5Sink = nil
		} else {
			if err = validator.Validate(dst.GetLogStreams200ResponseInnerOneOf5Sink); err != nil {
				dst.GetLogStreams200ResponseInnerOneOf5Sink = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetLogStreams200ResponseInnerOneOf5Sink = nil
	}

	// try to unmarshal data into GetLogStreams200ResponseInnerOneOfSink
	err = newStrictDecoder(data).Decode(&dst.GetLogStreams200ResponseInnerOneOfSink)
	if err == nil {
		jsonGetLogStreams200ResponseInnerOneOfSink, _ := json.Marshal(dst.GetLogStreams200ResponseInnerOneOfSink)
		if string(jsonGetLogStreams200ResponseInnerOneOfSink) == "{}" { // empty struct
			dst.GetLogStreams200ResponseInnerOneOfSink = nil
		} else {
			if err = validator.Validate(dst.GetLogStreams200ResponseInnerOneOfSink); err != nil {
				dst.GetLogStreams200ResponseInnerOneOfSink = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetLogStreams200ResponseInnerOneOfSink = nil
	}

	// try to unmarshal data into PatchLogStreamsByIdRequestSinkOneOf
	err = newStrictDecoder(data).Decode(&dst.PatchLogStreamsByIdRequestSinkOneOf)
	if err == nil {
		jsonPatchLogStreamsByIdRequestSinkOneOf, _ := json.Marshal(dst.PatchLogStreamsByIdRequestSinkOneOf)
		if string(jsonPatchLogStreamsByIdRequestSinkOneOf) == "{}" { // empty struct
			dst.PatchLogStreamsByIdRequestSinkOneOf = nil
		} else {
			if err = validator.Validate(dst.PatchLogStreamsByIdRequestSinkOneOf); err != nil {
				dst.PatchLogStreamsByIdRequestSinkOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.PatchLogStreamsByIdRequestSinkOneOf = nil
	}

	// try to unmarshal data into PatchLogStreamsByIdRequestSinkOneOf1
	err = newStrictDecoder(data).Decode(&dst.PatchLogStreamsByIdRequestSinkOneOf1)
	if err == nil {
		jsonPatchLogStreamsByIdRequestSinkOneOf1, _ := json.Marshal(dst.PatchLogStreamsByIdRequestSinkOneOf1)
		if string(jsonPatchLogStreamsByIdRequestSinkOneOf1) == "{}" { // empty struct
			dst.PatchLogStreamsByIdRequestSinkOneOf1 = nil
		} else {
			if err = validator.Validate(dst.PatchLogStreamsByIdRequestSinkOneOf1); err != nil {
				dst.PatchLogStreamsByIdRequestSinkOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PatchLogStreamsByIdRequestSinkOneOf1 = nil
	}

	// try to unmarshal data into PatchLogStreamsByIdRequestSinkOneOf2
	err = newStrictDecoder(data).Decode(&dst.PatchLogStreamsByIdRequestSinkOneOf2)
	if err == nil {
		jsonPatchLogStreamsByIdRequestSinkOneOf2, _ := json.Marshal(dst.PatchLogStreamsByIdRequestSinkOneOf2)
		if string(jsonPatchLogStreamsByIdRequestSinkOneOf2) == "{}" { // empty struct
			dst.PatchLogStreamsByIdRequestSinkOneOf2 = nil
		} else {
			if err = validator.Validate(dst.PatchLogStreamsByIdRequestSinkOneOf2); err != nil {
				dst.PatchLogStreamsByIdRequestSinkOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PatchLogStreamsByIdRequestSinkOneOf2 = nil
	}

	// try to unmarshal data into PatchLogStreamsByIdRequestSinkOneOf3
	err = newStrictDecoder(data).Decode(&dst.PatchLogStreamsByIdRequestSinkOneOf3)
	if err == nil {
		jsonPatchLogStreamsByIdRequestSinkOneOf3, _ := json.Marshal(dst.PatchLogStreamsByIdRequestSinkOneOf3)
		if string(jsonPatchLogStreamsByIdRequestSinkOneOf3) == "{}" { // empty struct
			dst.PatchLogStreamsByIdRequestSinkOneOf3 = nil
		} else {
			if err = validator.Validate(dst.PatchLogStreamsByIdRequestSinkOneOf3); err != nil {
				dst.PatchLogStreamsByIdRequestSinkOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PatchLogStreamsByIdRequestSinkOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetLogStreams200ResponseInnerOneOf5Sink = nil
		dst.GetLogStreams200ResponseInnerOneOfSink = nil
		dst.PatchLogStreamsByIdRequestSinkOneOf = nil
		dst.PatchLogStreamsByIdRequestSinkOneOf1 = nil
		dst.PatchLogStreamsByIdRequestSinkOneOf2 = nil
		dst.PatchLogStreamsByIdRequestSinkOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PatchLogStreamsByIdRequestSink)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PatchLogStreamsByIdRequestSink)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PatchLogStreamsByIdRequestSink) MarshalJSON() ([]byte, error) {
	if src.GetLogStreams200ResponseInnerOneOf5Sink != nil {
		return json.Marshal(&src.GetLogStreams200ResponseInnerOneOf5Sink)
	}

	if src.GetLogStreams200ResponseInnerOneOfSink != nil {
		return json.Marshal(&src.GetLogStreams200ResponseInnerOneOfSink)
	}

	if src.PatchLogStreamsByIdRequestSinkOneOf != nil {
		return json.Marshal(&src.PatchLogStreamsByIdRequestSinkOneOf)
	}

	if src.PatchLogStreamsByIdRequestSinkOneOf1 != nil {
		return json.Marshal(&src.PatchLogStreamsByIdRequestSinkOneOf1)
	}

	if src.PatchLogStreamsByIdRequestSinkOneOf2 != nil {
		return json.Marshal(&src.PatchLogStreamsByIdRequestSinkOneOf2)
	}

	if src.PatchLogStreamsByIdRequestSinkOneOf3 != nil {
		return json.Marshal(&src.PatchLogStreamsByIdRequestSinkOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PatchLogStreamsByIdRequestSink) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetLogStreams200ResponseInnerOneOf5Sink != nil {
		return obj.GetLogStreams200ResponseInnerOneOf5Sink
	}

	if obj.GetLogStreams200ResponseInnerOneOfSink != nil {
		return obj.GetLogStreams200ResponseInnerOneOfSink
	}

	if obj.PatchLogStreamsByIdRequestSinkOneOf != nil {
		return obj.PatchLogStreamsByIdRequestSinkOneOf
	}

	if obj.PatchLogStreamsByIdRequestSinkOneOf1 != nil {
		return obj.PatchLogStreamsByIdRequestSinkOneOf1
	}

	if obj.PatchLogStreamsByIdRequestSinkOneOf2 != nil {
		return obj.PatchLogStreamsByIdRequestSinkOneOf2
	}

	if obj.PatchLogStreamsByIdRequestSinkOneOf3 != nil {
		return obj.PatchLogStreamsByIdRequestSinkOneOf3
	}

	// all schemas are nil
	return nil
}

type NullablePatchLogStreamsByIdRequestSink struct {
	value *PatchLogStreamsByIdRequestSink
	isSet bool
}

func (v NullablePatchLogStreamsByIdRequestSink) Get() *PatchLogStreamsByIdRequestSink {
	return v.value
}

func (v *NullablePatchLogStreamsByIdRequestSink) Set(val *PatchLogStreamsByIdRequestSink) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchLogStreamsByIdRequestSink) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchLogStreamsByIdRequestSink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchLogStreamsByIdRequestSink(val *PatchLogStreamsByIdRequestSink) *NullablePatchLogStreamsByIdRequestSink {
	return &NullablePatchLogStreamsByIdRequestSink{value: val, isSet: true}
}

func (v NullablePatchLogStreamsByIdRequestSink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchLogStreamsByIdRequestSink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
