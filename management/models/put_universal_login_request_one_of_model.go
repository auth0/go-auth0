/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PutUniversalLoginRequestOneOf struct for PutUniversalLoginRequestOneOf
type PutUniversalLoginRequestOneOf struct {
	Template string `json:"template"`
}

type _PutUniversalLoginRequestOneOf PutUniversalLoginRequestOneOf

// GetTemplate returns the Template field value
func (o *PutUniversalLoginRequestOneOf) GetTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Template
}

// GetTemplateOk returns a tuple with the Template field value
// and a boolean to check if the value has been set.
func (o *PutUniversalLoginRequestOneOf) GetTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Template, true
}

// SetTemplate sets field value
func (o *PutUniversalLoginRequestOneOf) SetTemplate(v string) {
	o.Template = v
}

func (o PutUniversalLoginRequestOneOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutUniversalLoginRequestOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["template"] = o.Template
	return toSerialize, nil
}

func (o *PutUniversalLoginRequestOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"template",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPutUniversalLoginRequestOneOf := _PutUniversalLoginRequestOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPutUniversalLoginRequestOneOf)

	if err != nil {
		return err
	}

	*o = PutUniversalLoginRequestOneOf(varPutUniversalLoginRequestOneOf)

	return err
}

type NullablePutUniversalLoginRequestOneOf struct {
	value *PutUniversalLoginRequestOneOf
	isSet bool
}

func (v NullablePutUniversalLoginRequestOneOf) Get() *PutUniversalLoginRequestOneOf {
	return v.value
}

func (v *NullablePutUniversalLoginRequestOneOf) Set(val *PutUniversalLoginRequestOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePutUniversalLoginRequestOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePutUniversalLoginRequestOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutUniversalLoginRequestOneOf(val *PutUniversalLoginRequestOneOf) *NullablePutUniversalLoginRequestOneOf {
	return &NullablePutUniversalLoginRequestOneOf{value: val, isSet: true}
}

func (v NullablePutUniversalLoginRequestOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutUniversalLoginRequestOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
