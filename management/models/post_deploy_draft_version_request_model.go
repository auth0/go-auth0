/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// PostDeployDraftVersionRequest - struct for PostDeployDraftVersionRequest
type PostDeployDraftVersionRequest struct {
	ActionsDraftUpdate *ActionsDraftUpdate
}

// ActionsDraftUpdateAsPostDeployDraftVersionRequest is a convenience function that returns ActionsDraftUpdate wrapped in PostDeployDraftVersionRequest
func ActionsDraftUpdateAsPostDeployDraftVersionRequest(v *ActionsDraftUpdate) PostDeployDraftVersionRequest {
	return PostDeployDraftVersionRequest{
		ActionsDraftUpdate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PostDeployDraftVersionRequest) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into ActionsDraftUpdate
	err = newStrictDecoder(data).Decode(&dst.ActionsDraftUpdate)
	if err == nil {
		jsonActionsDraftUpdate, _ := json.Marshal(dst.ActionsDraftUpdate)
		if string(jsonActionsDraftUpdate) == "{}" { // empty struct
			dst.ActionsDraftUpdate = nil
		} else {
			if err = validator.Validate(dst.ActionsDraftUpdate); err != nil {
				dst.ActionsDraftUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionsDraftUpdate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActionsDraftUpdate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PostDeployDraftVersionRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PostDeployDraftVersionRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PostDeployDraftVersionRequest) MarshalJSON() ([]byte, error) {
	if src.ActionsDraftUpdate != nil {
		return json.Marshal(&src.ActionsDraftUpdate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PostDeployDraftVersionRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ActionsDraftUpdate != nil {
		return obj.ActionsDraftUpdate
	}

	// all schemas are nil
	return nil
}

type NullablePostDeployDraftVersionRequest struct {
	value *PostDeployDraftVersionRequest
	isSet bool
}

func (v NullablePostDeployDraftVersionRequest) Get() *PostDeployDraftVersionRequest {
	return v.value
}

func (v *NullablePostDeployDraftVersionRequest) Set(val *PostDeployDraftVersionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostDeployDraftVersionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostDeployDraftVersionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostDeployDraftVersionRequest(val *PostDeployDraftVersionRequest) *NullablePostDeployDraftVersionRequest {
	return &NullablePostDeployDraftVersionRequest{value: val, isSet: true}
}

func (v NullablePostDeployDraftVersionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostDeployDraftVersionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
