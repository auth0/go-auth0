/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
)

// ConnectionCreate struct for ConnectionCreate
type ConnectionCreate struct {
	// The name of the connection. Must start and end with an alphanumeric character and can only contain alphanumeric characters and '-'. Max length 128
	Name string `json:"name"`
	// Connection name used in the new universal login experience
	DisplayName *string                  `json:"display_name,omitempty"`
	Strategy    ConnectionCreateStrategy `json:"strategy"`
	Options     *ConnectionCreateOptions `json:"options,omitempty"`
	// The identifiers of the clients for which the connection is to be enabled. If the array is empty or the property is not specified, no clients are enabled
	EnabledClients     []string `json:"enabled_clients,omitempty"`
	IsDomainConnection *bool    `json:"is_domain_connection,omitempty"`
	// Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm.
	Realms []string `json:"realms,omitempty"`
	// Metadata associated with the connection in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type _ConnectionCreate ConnectionCreate

// GetName returns the Name field value
func (o *ConnectionCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectionCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectionCreate) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ConnectionCreate) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionCreate) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ConnectionCreate) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ConnectionCreate) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetStrategy returns the Strategy field value
func (o *ConnectionCreate) GetStrategy() ConnectionCreateStrategy {
	if o == nil {
		var ret ConnectionCreateStrategy
		return ret
	}

	return o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value
// and a boolean to check if the value has been set.
func (o *ConnectionCreate) GetStrategyOk() (*ConnectionCreateStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Strategy, true
}

// SetStrategy sets field value
func (o *ConnectionCreate) SetStrategy(v ConnectionCreateStrategy) {
	o.Strategy = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ConnectionCreate) GetOptions() ConnectionCreateOptions {
	if o == nil || IsNil(o.Options) {
		var ret ConnectionCreateOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionCreate) GetOptionsOk() (*ConnectionCreateOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ConnectionCreate) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given ConnectionCreateOptions and assigns it to the Options field.
func (o *ConnectionCreate) SetOptions(v ConnectionCreateOptions) {
	o.Options = &v
}

// GetEnabledClients returns the EnabledClients field value if set, zero value otherwise.
func (o *ConnectionCreate) GetEnabledClients() []string {
	if o == nil || IsNil(o.EnabledClients) {
		var ret []string
		return ret
	}
	return o.EnabledClients
}

// GetEnabledClientsOk returns a tuple with the EnabledClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionCreate) GetEnabledClientsOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledClients) {
		return nil, false
	}
	return o.EnabledClients, true
}

// HasEnabledClients returns a boolean if a field has been set.
func (o *ConnectionCreate) HasEnabledClients() bool {
	if o != nil && !IsNil(o.EnabledClients) {
		return true
	}

	return false
}

// SetEnabledClients gets a reference to the given []string and assigns it to the EnabledClients field.
func (o *ConnectionCreate) SetEnabledClients(v []string) {
	o.EnabledClients = v
}

// GetIsDomainConnection returns the IsDomainConnection field value if set, zero value otherwise.
func (o *ConnectionCreate) GetIsDomainConnection() bool {
	if o == nil || IsNil(o.IsDomainConnection) {
		var ret bool
		return ret
	}
	return *o.IsDomainConnection
}

// GetIsDomainConnectionOk returns a tuple with the IsDomainConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionCreate) GetIsDomainConnectionOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDomainConnection) {
		return nil, false
	}
	return o.IsDomainConnection, true
}

// HasIsDomainConnection returns a boolean if a field has been set.
func (o *ConnectionCreate) HasIsDomainConnection() bool {
	if o != nil && !IsNil(o.IsDomainConnection) {
		return true
	}

	return false
}

// SetIsDomainConnection gets a reference to the given bool and assigns it to the IsDomainConnection field.
func (o *ConnectionCreate) SetIsDomainConnection(v bool) {
	o.IsDomainConnection = &v
}

// GetRealms returns the Realms field value if set, zero value otherwise.
func (o *ConnectionCreate) GetRealms() []string {
	if o == nil || IsNil(o.Realms) {
		var ret []string
		return ret
	}
	return o.Realms
}

// GetRealmsOk returns a tuple with the Realms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionCreate) GetRealmsOk() ([]string, bool) {
	if o == nil || IsNil(o.Realms) {
		return nil, false
	}
	return o.Realms, true
}

// HasRealms returns a boolean if a field has been set.
func (o *ConnectionCreate) HasRealms() bool {
	if o != nil && !IsNil(o.Realms) {
		return true
	}

	return false
}

// SetRealms gets a reference to the given []string and assigns it to the Realms field.
func (o *ConnectionCreate) SetRealms(v []string) {
	o.Realms = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ConnectionCreate) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionCreate) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ConnectionCreate) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *ConnectionCreate) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o ConnectionCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	toSerialize["strategy"] = o.Strategy
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.EnabledClients) {
		toSerialize["enabled_clients"] = o.EnabledClients
	}
	if !IsNil(o.IsDomainConnection) {
		toSerialize["is_domain_connection"] = o.IsDomainConnection
	}
	if !IsNil(o.Realms) {
		toSerialize["realms"] = o.Realms
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *ConnectionCreate) UnmarshalJSON(data []byte) (err error) {
	varConnectionCreate := _ConnectionCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectionCreate)

	if err != nil {
		return err
	}

	*o = ConnectionCreate(varConnectionCreate)

	return err
}

type NullableConnectionCreate struct {
	value *ConnectionCreate
	isSet bool
}

func (v NullableConnectionCreate) Get() *ConnectionCreate {
	return v.value
}

func (v *NullableConnectionCreate) Set(val *ConnectionCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionCreate(val *ConnectionCreate) *NullableConnectionCreate {
	return &NullableConnectionCreate{value: val, isSet: true}
}

func (v NullableConnectionCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
