/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// PatchBreachedPasswordDetectionRequest struct for PatchBreachedPasswordDetectionRequest
type PatchBreachedPasswordDetectionRequest struct {
	// Whether or not breached password detection is active.
	Enabled *bool `json:"enabled,omitempty"`
	// Action to take when a breached password is detected during a login.       Possible values: <code>block</code>, <code>user_notification</code>, <code>admin_notification</code>.
	Shields []GetBreachedPasswordDetection200ResponseShieldsInner `json:"shields,omitempty"`
	// When \"admin_notification\" is enabled, determines how often email notifications are sent.         Possible values: <code>immediately</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>.
	AdminNotificationFrequency []GetBreachedPasswordDetection200ResponseAdminNotificationFrequencyInner `json:"admin_notification_frequency,omitempty"`
	Method                     *GetBreachedPasswordDetection200ResponseMethod                           `json:"method,omitempty"`
	Stage                      *PatchBreachedPasswordDetectionRequestStage                              `json:"stage,omitempty"`
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PatchBreachedPasswordDetectionRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchBreachedPasswordDetectionRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PatchBreachedPasswordDetectionRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PatchBreachedPasswordDetectionRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetShields returns the Shields field value if set, zero value otherwise.
func (o *PatchBreachedPasswordDetectionRequest) GetShields() []GetBreachedPasswordDetection200ResponseShieldsInner {
	if o == nil || IsNil(o.Shields) {
		var ret []GetBreachedPasswordDetection200ResponseShieldsInner
		return ret
	}
	return o.Shields
}

// GetShieldsOk returns a tuple with the Shields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchBreachedPasswordDetectionRequest) GetShieldsOk() ([]GetBreachedPasswordDetection200ResponseShieldsInner, bool) {
	if o == nil || IsNil(o.Shields) {
		return nil, false
	}
	return o.Shields, true
}

// HasShields returns a boolean if a field has been set.
func (o *PatchBreachedPasswordDetectionRequest) HasShields() bool {
	if o != nil && !IsNil(o.Shields) {
		return true
	}

	return false
}

// SetShields gets a reference to the given []GetBreachedPasswordDetection200ResponseShieldsInner and assigns it to the Shields field.
func (o *PatchBreachedPasswordDetectionRequest) SetShields(v []GetBreachedPasswordDetection200ResponseShieldsInner) {
	o.Shields = v
}

// GetAdminNotificationFrequency returns the AdminNotificationFrequency field value if set, zero value otherwise.
func (o *PatchBreachedPasswordDetectionRequest) GetAdminNotificationFrequency() []GetBreachedPasswordDetection200ResponseAdminNotificationFrequencyInner {
	if o == nil || IsNil(o.AdminNotificationFrequency) {
		var ret []GetBreachedPasswordDetection200ResponseAdminNotificationFrequencyInner
		return ret
	}
	return o.AdminNotificationFrequency
}

// GetAdminNotificationFrequencyOk returns a tuple with the AdminNotificationFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchBreachedPasswordDetectionRequest) GetAdminNotificationFrequencyOk() ([]GetBreachedPasswordDetection200ResponseAdminNotificationFrequencyInner, bool) {
	if o == nil || IsNil(o.AdminNotificationFrequency) {
		return nil, false
	}
	return o.AdminNotificationFrequency, true
}

// HasAdminNotificationFrequency returns a boolean if a field has been set.
func (o *PatchBreachedPasswordDetectionRequest) HasAdminNotificationFrequency() bool {
	if o != nil && !IsNil(o.AdminNotificationFrequency) {
		return true
	}

	return false
}

// SetAdminNotificationFrequency gets a reference to the given []GetBreachedPasswordDetection200ResponseAdminNotificationFrequencyInner and assigns it to the AdminNotificationFrequency field.
func (o *PatchBreachedPasswordDetectionRequest) SetAdminNotificationFrequency(v []GetBreachedPasswordDetection200ResponseAdminNotificationFrequencyInner) {
	o.AdminNotificationFrequency = v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *PatchBreachedPasswordDetectionRequest) GetMethod() GetBreachedPasswordDetection200ResponseMethod {
	if o == nil || IsNil(o.Method) {
		var ret GetBreachedPasswordDetection200ResponseMethod
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchBreachedPasswordDetectionRequest) GetMethodOk() (*GetBreachedPasswordDetection200ResponseMethod, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *PatchBreachedPasswordDetectionRequest) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given GetBreachedPasswordDetection200ResponseMethod and assigns it to the Method field.
func (o *PatchBreachedPasswordDetectionRequest) SetMethod(v GetBreachedPasswordDetection200ResponseMethod) {
	o.Method = &v
}

// GetStage returns the Stage field value if set, zero value otherwise.
func (o *PatchBreachedPasswordDetectionRequest) GetStage() PatchBreachedPasswordDetectionRequestStage {
	if o == nil || IsNil(o.Stage) {
		var ret PatchBreachedPasswordDetectionRequestStage
		return ret
	}
	return *o.Stage
}

// GetStageOk returns a tuple with the Stage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchBreachedPasswordDetectionRequest) GetStageOk() (*PatchBreachedPasswordDetectionRequestStage, bool) {
	if o == nil || IsNil(o.Stage) {
		return nil, false
	}
	return o.Stage, true
}

// HasStage returns a boolean if a field has been set.
func (o *PatchBreachedPasswordDetectionRequest) HasStage() bool {
	if o != nil && !IsNil(o.Stage) {
		return true
	}

	return false
}

// SetStage gets a reference to the given PatchBreachedPasswordDetectionRequestStage and assigns it to the Stage field.
func (o *PatchBreachedPasswordDetectionRequest) SetStage(v PatchBreachedPasswordDetectionRequestStage) {
	o.Stage = &v
}

func (o PatchBreachedPasswordDetectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchBreachedPasswordDetectionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Shields) {
		toSerialize["shields"] = o.Shields
	}
	if !IsNil(o.AdminNotificationFrequency) {
		toSerialize["admin_notification_frequency"] = o.AdminNotificationFrequency
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Stage) {
		toSerialize["stage"] = o.Stage
	}
	return toSerialize, nil
}

type NullablePatchBreachedPasswordDetectionRequest struct {
	value *PatchBreachedPasswordDetectionRequest
	isSet bool
}

func (v NullablePatchBreachedPasswordDetectionRequest) Get() *PatchBreachedPasswordDetectionRequest {
	return v.value
}

func (v *NullablePatchBreachedPasswordDetectionRequest) Set(val *PatchBreachedPasswordDetectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchBreachedPasswordDetectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchBreachedPasswordDetectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchBreachedPasswordDetectionRequest(val *PatchBreachedPasswordDetectionRequest) *NullablePatchBreachedPasswordDetectionRequest {
	return &NullablePatchBreachedPasswordDetectionRequest{value: val, isSet: true}
}

func (v NullablePatchBreachedPasswordDetectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchBreachedPasswordDetectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
