/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// UserUpdate struct for UserUpdate
type UserUpdate struct {
	// Whether this user was blocked by an administrator (true) or not (false).
	Blocked *bool `json:"blocked,omitempty"`
	// Whether this email address is verified (true) or unverified (false). If set to false the user will not receive a verification email unless `verify_email` is set to true.
	EmailVerified *bool `json:"email_verified,omitempty"`
	// Email address of this user.
	Email NullableString `json:"email,omitempty"`
	// The user's phone number (following the E.164 recommendation).
	PhoneNumber NullableString `json:"phone_number,omitempty"`
	// Whether this phone number has been verified (true) or not (false).
	PhoneVerified *bool `json:"phone_verified,omitempty"`
	// User metadata to which this user has read/write access.
	UserMetadata map[string]interface{}        `json:"user_metadata,omitempty"`
	AppMetadata  NullableUserUpdateAppMetadata `json:"app_metadata,omitempty"`
	// Given name/first name/forename of this user.
	GivenName NullableString `json:"given_name,omitempty"`
	// Family name/last name/surname of this user.
	FamilyName NullableString `json:"family_name,omitempty"`
	// Name of this user.
	Name NullableString `json:"name,omitempty"`
	// Preferred nickname or alias of this user.
	Nickname NullableString `json:"nickname,omitempty"`
	// URL to picture, photo, or avatar of this user.
	Picture NullableString `json:"picture,omitempty"`
	// Whether this user will receive a verification email after creation (true) or no email (false). Overrides behavior of `email_verified` parameter.
	VerifyEmail *bool `json:"verify_email,omitempty"`
	// Whether this user will receive a text after changing the phone number (true) or no text (false). Only valid when changing phone number for SMS connections.
	VerifyPhoneNumber *bool `json:"verify_phone_number,omitempty"`
	// New password for this user. Only valid for database connections.
	Password *string `json:"password,omitempty"`
	// Name of the connection to target for this user update.
	Connection *string `json:"connection,omitempty"`
	// Auth0 client ID. Only valid when updating email address.
	ClientId *string `json:"client_id,omitempty"`
	// The user's username. Only valid if the connection requires a username.
	Username             NullableString `json:"username,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserUpdate UserUpdate

// GetBlocked returns the Blocked field value if set, zero value otherwise.
func (o *UserUpdate) GetBlocked() bool {
	if o == nil || IsNil(o.Blocked) {
		var ret bool
		return ret
	}
	return *o.Blocked
}

// GetBlockedOk returns a tuple with the Blocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetBlockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Blocked) {
		return nil, false
	}
	return o.Blocked, true
}

// HasBlocked returns a boolean if a field has been set.
func (o *UserUpdate) HasBlocked() bool {
	if o != nil && !IsNil(o.Blocked) {
		return true
	}

	return false
}

// SetBlocked gets a reference to the given bool and assigns it to the Blocked field.
func (o *UserUpdate) SetBlocked(v bool) {
	o.Blocked = &v
}

// GetEmailVerified returns the EmailVerified field value if set, zero value otherwise.
func (o *UserUpdate) GetEmailVerified() bool {
	if o == nil || IsNil(o.EmailVerified) {
		var ret bool
		return ret
	}
	return *o.EmailVerified
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetEmailVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailVerified) {
		return nil, false
	}
	return o.EmailVerified, true
}

// HasEmailVerified returns a boolean if a field has been set.
func (o *UserUpdate) HasEmailVerified() bool {
	if o != nil && !IsNil(o.EmailVerified) {
		return true
	}

	return false
}

// SetEmailVerified gets a reference to the given bool and assigns it to the EmailVerified field.
func (o *UserUpdate) SetEmailVerified(v bool) {
	o.EmailVerified = &v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserUpdate) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUpdate) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *UserUpdate) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *UserUpdate) SetEmail(v string) {
	o.Email.Set(&v)
}

// SetEmailNil sets the value for Email to be an explicit nil
func (o *UserUpdate) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *UserUpdate) UnsetEmail() {
	o.Email.Unset()
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserUpdate) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber.Get()) {
		var ret string
		return ret
	}
	return *o.PhoneNumber.Get()
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUpdate) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneNumber.Get(), o.PhoneNumber.IsSet()
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *UserUpdate) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber.IsSet() {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given NullableString and assigns it to the PhoneNumber field.
func (o *UserUpdate) SetPhoneNumber(v string) {
	o.PhoneNumber.Set(&v)
}

// SetPhoneNumberNil sets the value for PhoneNumber to be an explicit nil
func (o *UserUpdate) SetPhoneNumberNil() {
	o.PhoneNumber.Set(nil)
}

// UnsetPhoneNumber ensures that no value is present for PhoneNumber, not even an explicit nil
func (o *UserUpdate) UnsetPhoneNumber() {
	o.PhoneNumber.Unset()
}

// GetPhoneVerified returns the PhoneVerified field value if set, zero value otherwise.
func (o *UserUpdate) GetPhoneVerified() bool {
	if o == nil || IsNil(o.PhoneVerified) {
		var ret bool
		return ret
	}
	return *o.PhoneVerified
}

// GetPhoneVerifiedOk returns a tuple with the PhoneVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetPhoneVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.PhoneVerified) {
		return nil, false
	}
	return o.PhoneVerified, true
}

// HasPhoneVerified returns a boolean if a field has been set.
func (o *UserUpdate) HasPhoneVerified() bool {
	if o != nil && !IsNil(o.PhoneVerified) {
		return true
	}

	return false
}

// SetPhoneVerified gets a reference to the given bool and assigns it to the PhoneVerified field.
func (o *UserUpdate) SetPhoneVerified(v bool) {
	o.PhoneVerified = &v
}

// GetUserMetadata returns the UserMetadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserUpdate) GetUserMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.UserMetadata
}

// GetUserMetadataOk returns a tuple with the UserMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUpdate) GetUserMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UserMetadata) {
		return map[string]interface{}{}, false
	}
	return o.UserMetadata, true
}

// HasUserMetadata returns a boolean if a field has been set.
func (o *UserUpdate) HasUserMetadata() bool {
	if o != nil && !IsNil(o.UserMetadata) {
		return true
	}

	return false
}

// SetUserMetadata gets a reference to the given map[string]interface{} and assigns it to the UserMetadata field.
func (o *UserUpdate) SetUserMetadata(v map[string]interface{}) {
	o.UserMetadata = v
}

// GetAppMetadata returns the AppMetadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserUpdate) GetAppMetadata() UserUpdateAppMetadata {
	if o == nil || IsNil(o.AppMetadata.Get()) {
		var ret UserUpdateAppMetadata
		return ret
	}
	return *o.AppMetadata.Get()
}

// GetAppMetadataOk returns a tuple with the AppMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUpdate) GetAppMetadataOk() (*UserUpdateAppMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppMetadata.Get(), o.AppMetadata.IsSet()
}

// HasAppMetadata returns a boolean if a field has been set.
func (o *UserUpdate) HasAppMetadata() bool {
	if o != nil && o.AppMetadata.IsSet() {
		return true
	}

	return false
}

// SetAppMetadata gets a reference to the given NullableUserUpdateAppMetadata and assigns it to the AppMetadata field.
func (o *UserUpdate) SetAppMetadata(v UserUpdateAppMetadata) {
	o.AppMetadata.Set(&v)
}

// SetAppMetadataNil sets the value for AppMetadata to be an explicit nil
func (o *UserUpdate) SetAppMetadataNil() {
	o.AppMetadata.Set(nil)
}

// UnsetAppMetadata ensures that no value is present for AppMetadata, not even an explicit nil
func (o *UserUpdate) UnsetAppMetadata() {
	o.AppMetadata.Unset()
}

// GetGivenName returns the GivenName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserUpdate) GetGivenName() string {
	if o == nil || IsNil(o.GivenName.Get()) {
		var ret string
		return ret
	}
	return *o.GivenName.Get()
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUpdate) GetGivenNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GivenName.Get(), o.GivenName.IsSet()
}

// HasGivenName returns a boolean if a field has been set.
func (o *UserUpdate) HasGivenName() bool {
	if o != nil && o.GivenName.IsSet() {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given NullableString and assigns it to the GivenName field.
func (o *UserUpdate) SetGivenName(v string) {
	o.GivenName.Set(&v)
}

// SetGivenNameNil sets the value for GivenName to be an explicit nil
func (o *UserUpdate) SetGivenNameNil() {
	o.GivenName.Set(nil)
}

// UnsetGivenName ensures that no value is present for GivenName, not even an explicit nil
func (o *UserUpdate) UnsetGivenName() {
	o.GivenName.Unset()
}

// GetFamilyName returns the FamilyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserUpdate) GetFamilyName() string {
	if o == nil || IsNil(o.FamilyName.Get()) {
		var ret string
		return ret
	}
	return *o.FamilyName.Get()
}

// GetFamilyNameOk returns a tuple with the FamilyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUpdate) GetFamilyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FamilyName.Get(), o.FamilyName.IsSet()
}

// HasFamilyName returns a boolean if a field has been set.
func (o *UserUpdate) HasFamilyName() bool {
	if o != nil && o.FamilyName.IsSet() {
		return true
	}

	return false
}

// SetFamilyName gets a reference to the given NullableString and assigns it to the FamilyName field.
func (o *UserUpdate) SetFamilyName(v string) {
	o.FamilyName.Set(&v)
}

// SetFamilyNameNil sets the value for FamilyName to be an explicit nil
func (o *UserUpdate) SetFamilyNameNil() {
	o.FamilyName.Set(nil)
}

// UnsetFamilyName ensures that no value is present for FamilyName, not even an explicit nil
func (o *UserUpdate) UnsetFamilyName() {
	o.FamilyName.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserUpdate) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUpdate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UserUpdate) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UserUpdate) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *UserUpdate) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UserUpdate) UnsetName() {
	o.Name.Unset()
}

// GetNickname returns the Nickname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserUpdate) GetNickname() string {
	if o == nil || IsNil(o.Nickname.Get()) {
		var ret string
		return ret
	}
	return *o.Nickname.Get()
}

// GetNicknameOk returns a tuple with the Nickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUpdate) GetNicknameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nickname.Get(), o.Nickname.IsSet()
}

// HasNickname returns a boolean if a field has been set.
func (o *UserUpdate) HasNickname() bool {
	if o != nil && o.Nickname.IsSet() {
		return true
	}

	return false
}

// SetNickname gets a reference to the given NullableString and assigns it to the Nickname field.
func (o *UserUpdate) SetNickname(v string) {
	o.Nickname.Set(&v)
}

// SetNicknameNil sets the value for Nickname to be an explicit nil
func (o *UserUpdate) SetNicknameNil() {
	o.Nickname.Set(nil)
}

// UnsetNickname ensures that no value is present for Nickname, not even an explicit nil
func (o *UserUpdate) UnsetNickname() {
	o.Nickname.Unset()
}

// GetPicture returns the Picture field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserUpdate) GetPicture() string {
	if o == nil || IsNil(o.Picture.Get()) {
		var ret string
		return ret
	}
	return *o.Picture.Get()
}

// GetPictureOk returns a tuple with the Picture field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUpdate) GetPictureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Picture.Get(), o.Picture.IsSet()
}

// HasPicture returns a boolean if a field has been set.
func (o *UserUpdate) HasPicture() bool {
	if o != nil && o.Picture.IsSet() {
		return true
	}

	return false
}

// SetPicture gets a reference to the given NullableString and assigns it to the Picture field.
func (o *UserUpdate) SetPicture(v string) {
	o.Picture.Set(&v)
}

// SetPictureNil sets the value for Picture to be an explicit nil
func (o *UserUpdate) SetPictureNil() {
	o.Picture.Set(nil)
}

// UnsetPicture ensures that no value is present for Picture, not even an explicit nil
func (o *UserUpdate) UnsetPicture() {
	o.Picture.Unset()
}

// GetVerifyEmail returns the VerifyEmail field value if set, zero value otherwise.
func (o *UserUpdate) GetVerifyEmail() bool {
	if o == nil || IsNil(o.VerifyEmail) {
		var ret bool
		return ret
	}
	return *o.VerifyEmail
}

// GetVerifyEmailOk returns a tuple with the VerifyEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetVerifyEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.VerifyEmail) {
		return nil, false
	}
	return o.VerifyEmail, true
}

// HasVerifyEmail returns a boolean if a field has been set.
func (o *UserUpdate) HasVerifyEmail() bool {
	if o != nil && !IsNil(o.VerifyEmail) {
		return true
	}

	return false
}

// SetVerifyEmail gets a reference to the given bool and assigns it to the VerifyEmail field.
func (o *UserUpdate) SetVerifyEmail(v bool) {
	o.VerifyEmail = &v
}

// GetVerifyPhoneNumber returns the VerifyPhoneNumber field value if set, zero value otherwise.
func (o *UserUpdate) GetVerifyPhoneNumber() bool {
	if o == nil || IsNil(o.VerifyPhoneNumber) {
		var ret bool
		return ret
	}
	return *o.VerifyPhoneNumber
}

// GetVerifyPhoneNumberOk returns a tuple with the VerifyPhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetVerifyPhoneNumberOk() (*bool, bool) {
	if o == nil || IsNil(o.VerifyPhoneNumber) {
		return nil, false
	}
	return o.VerifyPhoneNumber, true
}

// HasVerifyPhoneNumber returns a boolean if a field has been set.
func (o *UserUpdate) HasVerifyPhoneNumber() bool {
	if o != nil && !IsNil(o.VerifyPhoneNumber) {
		return true
	}

	return false
}

// SetVerifyPhoneNumber gets a reference to the given bool and assigns it to the VerifyPhoneNumber field.
func (o *UserUpdate) SetVerifyPhoneNumber(v bool) {
	o.VerifyPhoneNumber = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserUpdate) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserUpdate) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserUpdate) SetPassword(v string) {
	o.Password = &v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *UserUpdate) GetConnection() string {
	if o == nil || IsNil(o.Connection) {
		var ret string
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetConnectionOk() (*string, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *UserUpdate) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given string and assigns it to the Connection field.
func (o *UserUpdate) SetConnection(v string) {
	o.Connection = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *UserUpdate) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *UserUpdate) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *UserUpdate) SetClientId(v string) {
	o.ClientId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserUpdate) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUpdate) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *UserUpdate) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *UserUpdate) SetUsername(v string) {
	o.Username.Set(&v)
}

// SetUsernameNil sets the value for Username to be an explicit nil
func (o *UserUpdate) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *UserUpdate) UnsetUsername() {
	o.Username.Unset()
}

func (o UserUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Blocked) {
		toSerialize["blocked"] = o.Blocked
	}
	if !IsNil(o.EmailVerified) {
		toSerialize["email_verified"] = o.EmailVerified
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.PhoneNumber.IsSet() {
		toSerialize["phone_number"] = o.PhoneNumber.Get()
	}
	if !IsNil(o.PhoneVerified) {
		toSerialize["phone_verified"] = o.PhoneVerified
	}
	if o.UserMetadata != nil {
		toSerialize["user_metadata"] = o.UserMetadata
	}
	if o.AppMetadata.IsSet() {
		toSerialize["app_metadata"] = o.AppMetadata.Get()
	}
	if o.GivenName.IsSet() {
		toSerialize["given_name"] = o.GivenName.Get()
	}
	if o.FamilyName.IsSet() {
		toSerialize["family_name"] = o.FamilyName.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Nickname.IsSet() {
		toSerialize["nickname"] = o.Nickname.Get()
	}
	if o.Picture.IsSet() {
		toSerialize["picture"] = o.Picture.Get()
	}
	if !IsNil(o.VerifyEmail) {
		toSerialize["verify_email"] = o.VerifyEmail
	}
	if !IsNil(o.VerifyPhoneNumber) {
		toSerialize["verify_phone_number"] = o.VerifyPhoneNumber
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	if !IsNil(o.ClientId) {
		toSerialize["client_id"] = o.ClientId
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserUpdate) UnmarshalJSON(data []byte) (err error) {
	varUserUpdate := _UserUpdate{}

	err = json.Unmarshal(data, &varUserUpdate)

	if err != nil {
		return err
	}

	*o = UserUpdate(varUserUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "blocked")
		delete(additionalProperties, "email_verified")
		delete(additionalProperties, "email")
		delete(additionalProperties, "phone_number")
		delete(additionalProperties, "phone_verified")
		delete(additionalProperties, "user_metadata")
		delete(additionalProperties, "app_metadata")
		delete(additionalProperties, "given_name")
		delete(additionalProperties, "family_name")
		delete(additionalProperties, "name")
		delete(additionalProperties, "nickname")
		delete(additionalProperties, "picture")
		delete(additionalProperties, "verify_email")
		delete(additionalProperties, "verify_phone_number")
		delete(additionalProperties, "password")
		delete(additionalProperties, "connection")
		delete(additionalProperties, "client_id")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserUpdate struct {
	value *UserUpdate
	isSet bool
}

func (v NullableUserUpdate) Get() *UserUpdate {
	return v.value
}

func (v *NullableUserUpdate) Set(val *UserUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUpdate(val *UserUpdate) *NullableUserUpdate {
	return &NullableUserUpdate{value: val, isSet: true}
}

func (v NullableUserUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
