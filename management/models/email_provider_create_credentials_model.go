/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// EmailProviderCreateCredentials Credentials required to use the provider.
type EmailProviderCreateCredentials struct {
	EmailProviderCreateCredentialsAnyOf  *EmailProviderCreateCredentialsAnyOf
	EmailProviderCreateCredentialsAnyOf1 *EmailProviderCreateCredentialsAnyOf1
	EmailProviderCreateCredentialsAnyOf2 *EmailProviderCreateCredentialsAnyOf2
	EmailProviderCreateCredentialsAnyOf3 *EmailProviderCreateCredentialsAnyOf3
	EmailProviderCreateCredentialsAnyOf4 *EmailProviderCreateCredentialsAnyOf4
	EmailProviderCreateCredentialsAnyOf5 *EmailProviderCreateCredentialsAnyOf5
	EmailProviderUpdateCredentialsAnyOf  *EmailProviderUpdateCredentialsAnyOf
	MapmapOfStringAny                    *map[string]interface{}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *EmailProviderCreateCredentials) UnmarshalJSON(data []byte) error {
	var err error

	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderCreateCredentialsAnyOf)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderCreateCredentialsAnyOf, _ := json.Marshal(dst.EmailProviderCreateCredentialsAnyOf)
		if string(jsonEmailProviderCreateCredentialsAnyOf) == "{}" {
			dst.EmailProviderCreateCredentialsAnyOf = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderCreateCredentialsAnyOf, return on the first match
		}
	} else {
		dst.EmailProviderCreateCredentialsAnyOf = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderCreateCredentialsAnyOf1)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderCreateCredentialsAnyOf1, _ := json.Marshal(dst.EmailProviderCreateCredentialsAnyOf1)
		if string(jsonEmailProviderCreateCredentialsAnyOf1) == "{}" {
			dst.EmailProviderCreateCredentialsAnyOf1 = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderCreateCredentialsAnyOf1, return on the first match
		}
	} else {
		dst.EmailProviderCreateCredentialsAnyOf1 = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderCreateCredentialsAnyOf2)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderCreateCredentialsAnyOf2, _ := json.Marshal(dst.EmailProviderCreateCredentialsAnyOf2)
		if string(jsonEmailProviderCreateCredentialsAnyOf2) == "{}" {
			dst.EmailProviderCreateCredentialsAnyOf2 = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderCreateCredentialsAnyOf2, return on the first match
		}
	} else {
		dst.EmailProviderCreateCredentialsAnyOf2 = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderCreateCredentialsAnyOf3)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderCreateCredentialsAnyOf3, _ := json.Marshal(dst.EmailProviderCreateCredentialsAnyOf3)
		if string(jsonEmailProviderCreateCredentialsAnyOf3) == "{}" {
			dst.EmailProviderCreateCredentialsAnyOf3 = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderCreateCredentialsAnyOf3, return on the first match
		}
	} else {
		dst.EmailProviderCreateCredentialsAnyOf3 = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderCreateCredentialsAnyOf4)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderCreateCredentialsAnyOf4, _ := json.Marshal(dst.EmailProviderCreateCredentialsAnyOf4)
		if string(jsonEmailProviderCreateCredentialsAnyOf4) == "{}" {
			dst.EmailProviderCreateCredentialsAnyOf4 = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderCreateCredentialsAnyOf4, return on the first match
		}
	} else {
		dst.EmailProviderCreateCredentialsAnyOf4 = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderCreateCredentialsAnyOf5)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderCreateCredentialsAnyOf5, _ := json.Marshal(dst.EmailProviderCreateCredentialsAnyOf5)
		if string(jsonEmailProviderCreateCredentialsAnyOf5) == "{}" {
			dst.EmailProviderCreateCredentialsAnyOf5 = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderCreateCredentialsAnyOf5, return on the first match
		}
	} else {
		dst.EmailProviderCreateCredentialsAnyOf5 = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.EmailProviderUpdateCredentialsAnyOf)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonEmailProviderUpdateCredentialsAnyOf, _ := json.Marshal(dst.EmailProviderUpdateCredentialsAnyOf)
		if string(jsonEmailProviderUpdateCredentialsAnyOf) == "{}" {
			dst.EmailProviderUpdateCredentialsAnyOf = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.EmailProviderUpdateCredentialsAnyOf, return on the first match
		}
	} else {
		dst.EmailProviderUpdateCredentialsAnyOf = nil // Unmarshal failed, set to nil
	}
	// Try to unmarshal into each of the possible types (supporting nulls)
	err = json.Unmarshal(data, &dst.MapmapOfStringAny)
	if err == nil {
		// Check if the unmarshalled value is an empty struct
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" {
			dst.MapmapOfStringAny = nil // empty struct, set to nil
		} else {
			return nil // data stored in dst.MapmapOfStringAny, return on the first match
		}
	} else {
		dst.MapmapOfStringAny = nil // Unmarshal failed, set to nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(EmailProviderCreateCredentials)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *EmailProviderCreateCredentials) MarshalJSON() ([]byte, error) {
	// Check if the field is not nil before marshaling
	if src.EmailProviderCreateCredentialsAnyOf != nil {
		return json.Marshal(&src.EmailProviderCreateCredentialsAnyOf)
	}
	// Check if the field is not nil before marshaling
	if src.EmailProviderCreateCredentialsAnyOf1 != nil {
		return json.Marshal(&src.EmailProviderCreateCredentialsAnyOf1)
	}
	// Check if the field is not nil before marshaling
	if src.EmailProviderCreateCredentialsAnyOf2 != nil {
		return json.Marshal(&src.EmailProviderCreateCredentialsAnyOf2)
	}
	// Check if the field is not nil before marshaling
	if src.EmailProviderCreateCredentialsAnyOf3 != nil {
		return json.Marshal(&src.EmailProviderCreateCredentialsAnyOf3)
	}
	// Check if the field is not nil before marshaling
	if src.EmailProviderCreateCredentialsAnyOf4 != nil {
		return json.Marshal(&src.EmailProviderCreateCredentialsAnyOf4)
	}
	// Check if the field is not nil before marshaling
	if src.EmailProviderCreateCredentialsAnyOf5 != nil {
		return json.Marshal(&src.EmailProviderCreateCredentialsAnyOf5)
	}
	// Check if the field is not nil before marshaling
	if src.EmailProviderUpdateCredentialsAnyOf != nil {
		return json.Marshal(&src.EmailProviderUpdateCredentialsAnyOf)
	}
	// Check if the field is not nil before marshaling
	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}
	return nil, nil // no data in anyOf schemas, return null
}

type NullableEmailProviderCreateCredentials struct {
	value *EmailProviderCreateCredentials
	isSet bool
}

func (v NullableEmailProviderCreateCredentials) Get() *EmailProviderCreateCredentials {
	return v.value
}

func (v *NullableEmailProviderCreateCredentials) Set(val *EmailProviderCreateCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProviderCreateCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProviderCreateCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProviderCreateCredentials(val *EmailProviderCreateCredentials) *NullableEmailProviderCreateCredentials {
	return &NullableEmailProviderCreateCredentials{value: val, isSet: true}
}

func (v NullableEmailProviderCreateCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProviderCreateCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
