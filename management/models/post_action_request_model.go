/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PostActionRequest struct for PostActionRequest
type PostActionRequest struct {
	// The name of an action.
	Name string `json:"name"`
	// The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.
	SupportedTriggers []GetActions200ResponseActionsInnerSupportedTriggersInner `json:"supported_triggers"`
	// The source code of the action.
	Code *string `json:"code,omitempty"`
	// The list of third party npm modules, and their versions, that this action depends on.
	Dependencies []GetActions200ResponseActionsInnerDependenciesInner `json:"dependencies,omitempty"`
	// The Node runtime. For example: `node12`, defaults to `node12`
	Runtime *string `json:"runtime,omitempty"`
	// The list of secrets that are included in an action or a version of an action.
	Secrets []PostActionRequestSecretsInner `json:"secrets,omitempty"`
}

type _PostActionRequest PostActionRequest

// GetName returns the Name field value
func (o *PostActionRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PostActionRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PostActionRequest) SetName(v string) {
	o.Name = v
}

// GetSupportedTriggers returns the SupportedTriggers field value
func (o *PostActionRequest) GetSupportedTriggers() []GetActions200ResponseActionsInnerSupportedTriggersInner {
	if o == nil {
		var ret []GetActions200ResponseActionsInnerSupportedTriggersInner
		return ret
	}

	return o.SupportedTriggers
}

// GetSupportedTriggersOk returns a tuple with the SupportedTriggers field value
// and a boolean to check if the value has been set.
func (o *PostActionRequest) GetSupportedTriggersOk() ([]GetActions200ResponseActionsInnerSupportedTriggersInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportedTriggers, true
}

// SetSupportedTriggers sets field value
func (o *PostActionRequest) SetSupportedTriggers(v []GetActions200ResponseActionsInnerSupportedTriggersInner) {
	o.SupportedTriggers = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PostActionRequest) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostActionRequest) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PostActionRequest) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PostActionRequest) SetCode(v string) {
	o.Code = &v
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *PostActionRequest) GetDependencies() []GetActions200ResponseActionsInnerDependenciesInner {
	if o == nil || IsNil(o.Dependencies) {
		var ret []GetActions200ResponseActionsInnerDependenciesInner
		return ret
	}
	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostActionRequest) GetDependenciesOk() ([]GetActions200ResponseActionsInnerDependenciesInner, bool) {
	if o == nil || IsNil(o.Dependencies) {
		return nil, false
	}
	return o.Dependencies, true
}

// HasDependencies returns a boolean if a field has been set.
func (o *PostActionRequest) HasDependencies() bool {
	if o != nil && !IsNil(o.Dependencies) {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given []GetActions200ResponseActionsInnerDependenciesInner and assigns it to the Dependencies field.
func (o *PostActionRequest) SetDependencies(v []GetActions200ResponseActionsInnerDependenciesInner) {
	o.Dependencies = v
}

// GetRuntime returns the Runtime field value if set, zero value otherwise.
func (o *PostActionRequest) GetRuntime() string {
	if o == nil || IsNil(o.Runtime) {
		var ret string
		return ret
	}
	return *o.Runtime
}

// GetRuntimeOk returns a tuple with the Runtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostActionRequest) GetRuntimeOk() (*string, bool) {
	if o == nil || IsNil(o.Runtime) {
		return nil, false
	}
	return o.Runtime, true
}

// HasRuntime returns a boolean if a field has been set.
func (o *PostActionRequest) HasRuntime() bool {
	if o != nil && !IsNil(o.Runtime) {
		return true
	}

	return false
}

// SetRuntime gets a reference to the given string and assigns it to the Runtime field.
func (o *PostActionRequest) SetRuntime(v string) {
	o.Runtime = &v
}

// GetSecrets returns the Secrets field value if set, zero value otherwise.
func (o *PostActionRequest) GetSecrets() []PostActionRequestSecretsInner {
	if o == nil || IsNil(o.Secrets) {
		var ret []PostActionRequestSecretsInner
		return ret
	}
	return o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostActionRequest) GetSecretsOk() ([]PostActionRequestSecretsInner, bool) {
	if o == nil || IsNil(o.Secrets) {
		return nil, false
	}
	return o.Secrets, true
}

// HasSecrets returns a boolean if a field has been set.
func (o *PostActionRequest) HasSecrets() bool {
	if o != nil && !IsNil(o.Secrets) {
		return true
	}

	return false
}

// SetSecrets gets a reference to the given []PostActionRequestSecretsInner and assigns it to the Secrets field.
func (o *PostActionRequest) SetSecrets(v []PostActionRequestSecretsInner) {
	o.Secrets = v
}

func (o PostActionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostActionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["supported_triggers"] = o.SupportedTriggers
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Dependencies) {
		toSerialize["dependencies"] = o.Dependencies
	}
	if !IsNil(o.Runtime) {
		toSerialize["runtime"] = o.Runtime
	}
	if !IsNil(o.Secrets) {
		toSerialize["secrets"] = o.Secrets
	}
	return toSerialize, nil
}

func (o *PostActionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"supported_triggers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostActionRequest := _PostActionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varPostActionRequest)

	if err != nil {
		return err
	}

	*o = PostActionRequest(varPostActionRequest)

	return err
}

type NullablePostActionRequest struct {
	value *PostActionRequest
	isSet bool
}

func (v NullablePostActionRequest) Get() *PostActionRequest {
	return v.value
}

func (v *NullablePostActionRequest) Set(val *PostActionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostActionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostActionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostActionRequest(val *PostActionRequest) *NullablePostActionRequest {
	return &NullablePostActionRequest{value: val, isSet: true}
}

func (v NullablePostActionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostActionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
