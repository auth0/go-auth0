/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PostTestActionRequest struct for PostTestActionRequest
type PostTestActionRequest struct {
	// The payload for the action.
	Payload map[string]interface{} `json:"payload"`
}

type _PostTestActionRequest PostTestActionRequest

// GetPayload returns the Payload field value
func (o *PostTestActionRequest) GetPayload() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *PostTestActionRequest) GetPayloadOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Payload, true
}

// SetPayload sets field value
func (o *PostTestActionRequest) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

func (o PostTestActionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostTestActionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["payload"] = o.Payload
	return toSerialize, nil
}

func (o *PostTestActionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payload",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostTestActionRequest := _PostTestActionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostTestActionRequest)

	if err != nil {
		return err
	}

	*o = PostTestActionRequest(varPostTestActionRequest)

	return err
}

type NullablePostTestActionRequest struct {
	value *PostTestActionRequest
	isSet bool
}

func (v NullablePostTestActionRequest) Get() *PostTestActionRequest {
	return v.value
}

func (v *NullablePostTestActionRequest) Set(val *PostTestActionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostTestActionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostTestActionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostTestActionRequest(val *PostTestActionRequest) *NullablePostTestActionRequest {
	return &NullablePostTestActionRequest{value: val, isSet: true}
}

func (v NullablePostTestActionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostTestActionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
