/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetRules200Response - struct for GetRules200Response
type GetRules200Response struct {
	GetRules200ResponseOneOf *GetRules200ResponseOneOf
	ArrayOfRule              *[]Rule
}

// GetRules200ResponseOneOfAsGetRules200Response is a convenience function that returns GetRules200ResponseOneOf wrapped in GetRules200Response
func GetRules200ResponseOneOfAsGetRules200Response(v *GetRules200ResponseOneOf) GetRules200Response {
	return GetRules200Response{
		GetRules200ResponseOneOf: v,
	}
}

// []RuleAsGetRules200Response is a convenience function that returns []Rule wrapped in GetRules200Response
func ArrayOfRuleAsGetRules200Response(v *[]Rule) GetRules200Response {
	return GetRules200Response{
		ArrayOfRule: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRules200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRules200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetRules200ResponseOneOf)
	if err == nil {
		jsonGetRules200ResponseOneOf, _ := json.Marshal(dst.GetRules200ResponseOneOf)
		if string(jsonGetRules200ResponseOneOf) == "{}" { // empty struct
			dst.GetRules200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetRules200ResponseOneOf); err != nil {
				dst.GetRules200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetRules200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfRule
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRule)
	if err == nil {
		jsonArrayOfRule, _ := json.Marshal(dst.ArrayOfRule)
		if string(jsonArrayOfRule) == "{}" { // empty struct
			dst.ArrayOfRule = nil
		} else {
			if err = validator.Validate(dst.ArrayOfRule); err != nil {
				dst.ArrayOfRule = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfRule = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRules200ResponseOneOf = nil
		dst.ArrayOfRule = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRules200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRules200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRules200Response) MarshalJSON() ([]byte, error) {
	if src.GetRules200ResponseOneOf != nil {
		return json.Marshal(&src.GetRules200ResponseOneOf)
	}

	if src.ArrayOfRule != nil {
		return json.Marshal(&src.ArrayOfRule)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRules200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRules200ResponseOneOf != nil {
		return obj.GetRules200ResponseOneOf
	}

	if obj.ArrayOfRule != nil {
		return obj.ArrayOfRule
	}

	// all schemas are nil
	return nil
}

type NullableGetRules200Response struct {
	value *GetRules200Response
	isSet bool
}

func (v NullableGetRules200Response) Get() *GetRules200Response {
	return v.value
}

func (v *NullableGetRules200Response) Set(val *GetRules200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRules200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRules200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRules200Response(val *GetRules200Response) *NullableGetRules200Response {
	return &NullableGetRules200Response{value: val, isSet: true}
}

func (v NullableGetRules200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRules200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
