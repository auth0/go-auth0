/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"time"

	"gopkg.in/validator.v2"
)

// GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp - struct for GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp
type GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp struct {
	MapmapOfStringAny *map[string]interface{}
	TimeTime          *time.Time
}

// map[string]interface{}AsGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp is a convenience function that returns map[string]interface{} wrapped in GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp
func MapmapOfStringAnyAsGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp(v *map[string]interface{}) GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp {
	return GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp{
		MapmapOfStringAny: v,
	}
}

// time.TimeAsGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp is a convenience function that returns time.Time wrapped in GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp
func TimeTimeAsGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp(v *time.Time) GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp {
	return GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp{
		TimeTime: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapmapOfStringAny
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringAny); err != nil {
				dst.MapmapOfStringAny = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	// try to unmarshal data into TimeTime
	err = newStrictDecoder(data).Decode(&dst.TimeTime)
	if err == nil {
		jsonTimeTime, _ := json.Marshal(dst.TimeTime)
		if string(jsonTimeTime) == "{}" { // empty struct
			dst.TimeTime = nil
		} else {
			if err = validator.Validate(dst.TimeTime); err != nil {
				dst.TimeTime = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimeTime = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapmapOfStringAny = nil
		dst.TimeTime = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	if src.TimeTime != nil {
		return json.Marshal(&src.TimeTime)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	if obj.TimeTime != nil {
		return obj.TimeTime
	}

	// all schemas are nil
	return nil
}

type NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp struct {
	value *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp
	isSet bool
}

func (v NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp) Get() *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp {
	return v.value
}

func (v *NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp) Set(val *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp(val *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp) *NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp {
	return &NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp{value: val, isSet: true}
}

func (v NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
