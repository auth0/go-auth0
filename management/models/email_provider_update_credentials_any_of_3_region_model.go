/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// EmailProviderUpdateCredentialsAnyOf3Region Set to <code>eu</code> to use SparkPost service hosted in Western Europe. To use SparkPost hosted in North America, set it to <code>null</code>.
type EmailProviderUpdateCredentialsAnyOf3Region string

// List of emailProviderUpdate_credentials_anyOf_3_region
const (
	EMAILPROVIDERUPDATECREDENTIALSANYOF3REGION_EU EmailProviderUpdateCredentialsAnyOf3Region = "eu"
)

// All allowed values of EmailProviderUpdateCredentialsAnyOf3Region enum
var AllowedEmailProviderUpdateCredentialsAnyOf3RegionEnumValues = []EmailProviderUpdateCredentialsAnyOf3Region{
	"eu",
}

func (v *EmailProviderUpdateCredentialsAnyOf3Region) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmailProviderUpdateCredentialsAnyOf3Region(value)
	for _, existing := range AllowedEmailProviderUpdateCredentialsAnyOf3RegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmailProviderUpdateCredentialsAnyOf3Region", value)
}

// NewEmailProviderUpdateCredentialsAnyOf3RegionFromValue returns a pointer to a valid EmailProviderUpdateCredentialsAnyOf3Region
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmailProviderUpdateCredentialsAnyOf3RegionFromValue(v string) (*EmailProviderUpdateCredentialsAnyOf3Region, error) {
	ev := EmailProviderUpdateCredentialsAnyOf3Region(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmailProviderUpdateCredentialsAnyOf3Region: valid values are %v", v, AllowedEmailProviderUpdateCredentialsAnyOf3RegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmailProviderUpdateCredentialsAnyOf3Region) IsValid() bool {
	for _, existing := range AllowedEmailProviderUpdateCredentialsAnyOf3RegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to emailProviderUpdate_credentials_anyOf_3_region value
func (v EmailProviderUpdateCredentialsAnyOf3Region) Ptr() *EmailProviderUpdateCredentialsAnyOf3Region {
	return &v
}

type NullableEmailProviderUpdateCredentialsAnyOf3Region struct {
	value *EmailProviderUpdateCredentialsAnyOf3Region
	isSet bool
}

func (v NullableEmailProviderUpdateCredentialsAnyOf3Region) Get() *EmailProviderUpdateCredentialsAnyOf3Region {
	return v.value
}

func (v *NullableEmailProviderUpdateCredentialsAnyOf3Region) Set(val *EmailProviderUpdateCredentialsAnyOf3Region) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProviderUpdateCredentialsAnyOf3Region) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProviderUpdateCredentialsAnyOf3Region) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProviderUpdateCredentialsAnyOf3Region(val *EmailProviderUpdateCredentialsAnyOf3Region) *NullableEmailProviderUpdateCredentialsAnyOf3Region {
	return &NullableEmailProviderUpdateCredentialsAnyOf3Region{value: val, isSet: true}
}

func (v NullableEmailProviderUpdateCredentialsAnyOf3Region) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProviderUpdateCredentialsAnyOf3Region) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
