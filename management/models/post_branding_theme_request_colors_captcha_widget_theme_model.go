/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PostBrandingThemeRequestColorsCaptchaWidgetTheme Captcha Widget Theme
type PostBrandingThemeRequestColorsCaptchaWidgetTheme string

// List of post_branding_theme_request_colors_captcha_widget_theme
const (
	POSTBRANDINGTHEMEREQUESTCOLORSCAPTCHAWIDGETTHEME_AUTO  PostBrandingThemeRequestColorsCaptchaWidgetTheme = "auto"
	POSTBRANDINGTHEMEREQUESTCOLORSCAPTCHAWIDGETTHEME_DARK  PostBrandingThemeRequestColorsCaptchaWidgetTheme = "dark"
	POSTBRANDINGTHEMEREQUESTCOLORSCAPTCHAWIDGETTHEME_LIGHT PostBrandingThemeRequestColorsCaptchaWidgetTheme = "light"
)

// All allowed values of PostBrandingThemeRequestColorsCaptchaWidgetTheme enum
var AllowedPostBrandingThemeRequestColorsCaptchaWidgetThemeEnumValues = []PostBrandingThemeRequestColorsCaptchaWidgetTheme{
	"auto",
	"dark",
	"light",
}

func (v *PostBrandingThemeRequestColorsCaptchaWidgetTheme) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PostBrandingThemeRequestColorsCaptchaWidgetTheme(value)
	for _, existing := range AllowedPostBrandingThemeRequestColorsCaptchaWidgetThemeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PostBrandingThemeRequestColorsCaptchaWidgetTheme", value)
}

// NewPostBrandingThemeRequestColorsCaptchaWidgetThemeFromValue returns a pointer to a valid PostBrandingThemeRequestColorsCaptchaWidgetTheme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPostBrandingThemeRequestColorsCaptchaWidgetThemeFromValue(v string) (*PostBrandingThemeRequestColorsCaptchaWidgetTheme, error) {
	ev := PostBrandingThemeRequestColorsCaptchaWidgetTheme(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PostBrandingThemeRequestColorsCaptchaWidgetTheme: valid values are %v", v, AllowedPostBrandingThemeRequestColorsCaptchaWidgetThemeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PostBrandingThemeRequestColorsCaptchaWidgetTheme) IsValid() bool {
	for _, existing := range AllowedPostBrandingThemeRequestColorsCaptchaWidgetThemeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to post_branding_theme_request_colors_captcha_widget_theme value
func (v PostBrandingThemeRequestColorsCaptchaWidgetTheme) Ptr() *PostBrandingThemeRequestColorsCaptchaWidgetTheme {
	return &v
}

type NullablePostBrandingThemeRequestColorsCaptchaWidgetTheme struct {
	value *PostBrandingThemeRequestColorsCaptchaWidgetTheme
	isSet bool
}

func (v NullablePostBrandingThemeRequestColorsCaptchaWidgetTheme) Get() *PostBrandingThemeRequestColorsCaptchaWidgetTheme {
	return v.value
}

func (v *NullablePostBrandingThemeRequestColorsCaptchaWidgetTheme) Set(val *PostBrandingThemeRequestColorsCaptchaWidgetTheme) {
	v.value = val
	v.isSet = true
}

func (v NullablePostBrandingThemeRequestColorsCaptchaWidgetTheme) IsSet() bool {
	return v.isSet
}

func (v *NullablePostBrandingThemeRequestColorsCaptchaWidgetTheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostBrandingThemeRequestColorsCaptchaWidgetTheme(val *PostBrandingThemeRequestColorsCaptchaWidgetTheme) *NullablePostBrandingThemeRequestColorsCaptchaWidgetTheme {
	return &NullablePostBrandingThemeRequestColorsCaptchaWidgetTheme{value: val, isSet: true}
}

func (v NullablePostBrandingThemeRequestColorsCaptchaWidgetTheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostBrandingThemeRequestColorsCaptchaWidgetTheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
