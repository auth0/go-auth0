/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetClients200Response - struct for GetClients200Response
type GetClients200Response struct {
	GetClients200ResponseOneOf *GetClients200ResponseOneOf
	ArrayOfClient              *[]Client
}

// GetClients200ResponseOneOfAsGetClients200Response is a convenience function that returns GetClients200ResponseOneOf wrapped in GetClients200Response
func GetClients200ResponseOneOfAsGetClients200Response(v *GetClients200ResponseOneOf) GetClients200Response {
	return GetClients200Response{
		GetClients200ResponseOneOf: v,
	}
}

// []ClientAsGetClients200Response is a convenience function that returns []Client wrapped in GetClients200Response
func ArrayOfClientAsGetClients200Response(v *[]Client) GetClients200Response {
	return GetClients200Response{
		ArrayOfClient: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetClients200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetClients200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetClients200ResponseOneOf)
	if err == nil {
		jsonGetClients200ResponseOneOf, _ := json.Marshal(dst.GetClients200ResponseOneOf)
		if string(jsonGetClients200ResponseOneOf) == "{}" { // empty struct
			dst.GetClients200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetClients200ResponseOneOf); err != nil {
				dst.GetClients200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetClients200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfClient
	err = newStrictDecoder(data).Decode(&dst.ArrayOfClient)
	if err == nil {
		jsonArrayOfClient, _ := json.Marshal(dst.ArrayOfClient)
		if string(jsonArrayOfClient) == "{}" { // empty struct
			dst.ArrayOfClient = nil
		} else {
			if err = validator.Validate(dst.ArrayOfClient); err != nil {
				dst.ArrayOfClient = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfClient = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetClients200ResponseOneOf = nil
		dst.ArrayOfClient = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetClients200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetClients200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetClients200Response) MarshalJSON() ([]byte, error) {
	if src.GetClients200ResponseOneOf != nil {
		return json.Marshal(&src.GetClients200ResponseOneOf)
	}

	if src.ArrayOfClient != nil {
		return json.Marshal(&src.ArrayOfClient)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetClients200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetClients200ResponseOneOf != nil {
		return obj.GetClients200ResponseOneOf
	}

	if obj.ArrayOfClient != nil {
		return obj.ArrayOfClient
	}

	// all schemas are nil
	return nil
}

type NullableGetClients200Response struct {
	value *GetClients200Response
	isSet bool
}

func (v NullableGetClients200Response) Get() *GetClients200Response {
	return v.value
}

func (v *NullableGetClients200Response) Set(val *GetClients200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetClients200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetClients200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetClients200Response(val *GetClients200Response) *NullableGetClients200Response {
	return &NullableGetClients200Response{value: val, isSet: true}
}

func (v NullableGetClients200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetClients200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
