/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetLogs200Response - struct for GetLogs200Response
type GetLogs200Response struct {
	GetLogs200ResponseOneOf *GetLogs200ResponseOneOf
	ArrayOfLog              *[]Log
}

// GetLogs200ResponseOneOfAsGetLogs200Response is a convenience function that returns GetLogs200ResponseOneOf wrapped in GetLogs200Response
func GetLogs200ResponseOneOfAsGetLogs200Response(v *GetLogs200ResponseOneOf) GetLogs200Response {
	return GetLogs200Response{
		GetLogs200ResponseOneOf: v,
	}
}

// []LogAsGetLogs200Response is a convenience function that returns []Log wrapped in GetLogs200Response
func ArrayOfLogAsGetLogs200Response(v *[]Log) GetLogs200Response {
	return GetLogs200Response{
		ArrayOfLog: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetLogs200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetLogs200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetLogs200ResponseOneOf)
	if err == nil {
		jsonGetLogs200ResponseOneOf, _ := json.Marshal(dst.GetLogs200ResponseOneOf)
		if string(jsonGetLogs200ResponseOneOf) == "{}" { // empty struct
			dst.GetLogs200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetLogs200ResponseOneOf); err != nil {
				dst.GetLogs200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetLogs200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfLog
	err = newStrictDecoder(data).Decode(&dst.ArrayOfLog)
	if err == nil {
		jsonArrayOfLog, _ := json.Marshal(dst.ArrayOfLog)
		if string(jsonArrayOfLog) == "{}" { // empty struct
			dst.ArrayOfLog = nil
		} else {
			if err = validator.Validate(dst.ArrayOfLog); err != nil {
				dst.ArrayOfLog = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfLog = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetLogs200ResponseOneOf = nil
		dst.ArrayOfLog = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetLogs200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetLogs200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetLogs200Response) MarshalJSON() ([]byte, error) {
	if src.GetLogs200ResponseOneOf != nil {
		return json.Marshal(&src.GetLogs200ResponseOneOf)
	}

	if src.ArrayOfLog != nil {
		return json.Marshal(&src.ArrayOfLog)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetLogs200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetLogs200ResponseOneOf != nil {
		return obj.GetLogs200ResponseOneOf
	}

	if obj.ArrayOfLog != nil {
		return obj.ArrayOfLog
	}

	// all schemas are nil
	return nil
}

type NullableGetLogs200Response struct {
	value *GetLogs200Response
	isSet bool
}

func (v NullableGetLogs200Response) Get() *GetLogs200Response {
	return v.value
}

func (v *NullableGetLogs200Response) Set(val *GetLogs200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLogs200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLogs200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLogs200Response(val *GetLogs200Response) *NullableGetLogs200Response {
	return &NullableGetLogs200Response{value: val, isSet: true}
}

func (v NullableGetLogs200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLogs200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
