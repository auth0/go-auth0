/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PromptsSettingsUniversalLoginExperience Which login experience to use. Can be `new` or `classic`.
type PromptsSettingsUniversalLoginExperience string

// List of promptsSettings_universal_login_experience
const (
	PROMPTSSETTINGSUNIVERSALLOGINEXPERIENCE_NEW     PromptsSettingsUniversalLoginExperience = "new"
	PROMPTSSETTINGSUNIVERSALLOGINEXPERIENCE_CLASSIC PromptsSettingsUniversalLoginExperience = "classic"
)

// All allowed values of PromptsSettingsUniversalLoginExperience enum
var AllowedPromptsSettingsUniversalLoginExperienceEnumValues = []PromptsSettingsUniversalLoginExperience{
	"new",
	"classic",
}

func (v *PromptsSettingsUniversalLoginExperience) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PromptsSettingsUniversalLoginExperience(value)
	for _, existing := range AllowedPromptsSettingsUniversalLoginExperienceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PromptsSettingsUniversalLoginExperience", value)
}

// NewPromptsSettingsUniversalLoginExperienceFromValue returns a pointer to a valid PromptsSettingsUniversalLoginExperience
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPromptsSettingsUniversalLoginExperienceFromValue(v string) (*PromptsSettingsUniversalLoginExperience, error) {
	ev := PromptsSettingsUniversalLoginExperience(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PromptsSettingsUniversalLoginExperience: valid values are %v", v, AllowedPromptsSettingsUniversalLoginExperienceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PromptsSettingsUniversalLoginExperience) IsValid() bool {
	for _, existing := range AllowedPromptsSettingsUniversalLoginExperienceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to promptsSettings_universal_login_experience value
func (v PromptsSettingsUniversalLoginExperience) Ptr() *PromptsSettingsUniversalLoginExperience {
	return &v
}

type NullablePromptsSettingsUniversalLoginExperience struct {
	value *PromptsSettingsUniversalLoginExperience
	isSet bool
}

func (v NullablePromptsSettingsUniversalLoginExperience) Get() *PromptsSettingsUniversalLoginExperience {
	return v.value
}

func (v *NullablePromptsSettingsUniversalLoginExperience) Set(val *PromptsSettingsUniversalLoginExperience) {
	v.value = val
	v.isSet = true
}

func (v NullablePromptsSettingsUniversalLoginExperience) IsSet() bool {
	return v.isSet
}

func (v *NullablePromptsSettingsUniversalLoginExperience) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromptsSettingsUniversalLoginExperience(val *PromptsSettingsUniversalLoginExperience) *NullablePromptsSettingsUniversalLoginExperience {
	return &NullablePromptsSettingsUniversalLoginExperience{value: val, isSet: true}
}

func (v NullablePromptsSettingsUniversalLoginExperience) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromptsSettingsUniversalLoginExperience) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
