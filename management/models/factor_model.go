/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
)

// Factor struct for Factor
type Factor struct {
	// Whether this factor is enabled (true) or disabled (false).
	Enabled bool `json:"enabled"`
	// Whether trial limits have been exceeded.
	TrialExpired *bool       `json:"trial_expired,omitempty"`
	Name         *FactorName `json:"name,omitempty"`
}

type _Factor Factor

// GetEnabled returns the Enabled field value
func (o *Factor) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Factor) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *Factor) SetEnabled(v bool) {
	o.Enabled = v
}

// GetTrialExpired returns the TrialExpired field value if set, zero value otherwise.
func (o *Factor) GetTrialExpired() bool {
	if o == nil || IsNil(o.TrialExpired) {
		var ret bool
		return ret
	}
	return *o.TrialExpired
}

// GetTrialExpiredOk returns a tuple with the TrialExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Factor) GetTrialExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.TrialExpired) {
		return nil, false
	}
	return o.TrialExpired, true
}

// HasTrialExpired returns a boolean if a field has been set.
func (o *Factor) HasTrialExpired() bool {
	if o != nil && !IsNil(o.TrialExpired) {
		return true
	}

	return false
}

// SetTrialExpired gets a reference to the given bool and assigns it to the TrialExpired field.
func (o *Factor) SetTrialExpired(v bool) {
	o.TrialExpired = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Factor) GetName() FactorName {
	if o == nil || IsNil(o.Name) {
		var ret FactorName
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Factor) GetNameOk() (*FactorName, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Factor) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given FactorName and assigns it to the Name field.
func (o *Factor) SetName(v FactorName) {
	o.Name = &v
}

func (o Factor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Factor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.TrialExpired) {
		toSerialize["trial_expired"] = o.TrialExpired
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

func (o *Factor) UnmarshalJSON(data []byte) (err error) {
	varFactor := _Factor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFactor)

	if err != nil {
		return err
	}

	*o = Factor(varFactor)

	return err
}

type NullableFactor struct {
	value *Factor
	isSet bool
}

func (v NullableFactor) Get() *Factor {
	return v.value
}

func (v *NullableFactor) Set(val *Factor) {
	v.value = val
	v.isSet = true
}

func (v NullableFactor) IsSet() bool {
	return v.isSet
}

func (v *NullableFactor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFactor(val *Factor) *NullableFactor {
	return &NullableFactor{value: val, isSet: true}
}

func (v NullableFactor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFactor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
