/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ClientUpdateTokenEndpointAuthMethod Defines the requested authentication method for the token endpoint. Possible values are 'none' (public client without a client secret), 'client_secret_post' (client uses HTTP POST parameters) or 'client_secret_basic' (client uses HTTP Basic)
type ClientUpdateTokenEndpointAuthMethod string

// List of clientUpdate_token_endpoint_auth_method
const (
	CLIENTUPDATETOKENENDPOINTAUTHMETHOD_NONE                ClientUpdateTokenEndpointAuthMethod = "none"
	CLIENTUPDATETOKENENDPOINTAUTHMETHOD_CLIENT_SECRET_POST  ClientUpdateTokenEndpointAuthMethod = "client_secret_post"
	CLIENTUPDATETOKENENDPOINTAUTHMETHOD_CLIENT_SECRET_BASIC ClientUpdateTokenEndpointAuthMethod = "client_secret_basic"
)

// All allowed values of ClientUpdateTokenEndpointAuthMethod enum
var AllowedClientUpdateTokenEndpointAuthMethodEnumValues = []ClientUpdateTokenEndpointAuthMethod{
	"none",
	"client_secret_post",
	"client_secret_basic",
}

func (v *ClientUpdateTokenEndpointAuthMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClientUpdateTokenEndpointAuthMethod(value)
	for _, existing := range AllowedClientUpdateTokenEndpointAuthMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClientUpdateTokenEndpointAuthMethod", value)
}

// NewClientUpdateTokenEndpointAuthMethodFromValue returns a pointer to a valid ClientUpdateTokenEndpointAuthMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClientUpdateTokenEndpointAuthMethodFromValue(v string) (*ClientUpdateTokenEndpointAuthMethod, error) {
	ev := ClientUpdateTokenEndpointAuthMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClientUpdateTokenEndpointAuthMethod: valid values are %v", v, AllowedClientUpdateTokenEndpointAuthMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClientUpdateTokenEndpointAuthMethod) IsValid() bool {
	for _, existing := range AllowedClientUpdateTokenEndpointAuthMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to clientUpdate_token_endpoint_auth_method value
func (v ClientUpdateTokenEndpointAuthMethod) Ptr() *ClientUpdateTokenEndpointAuthMethod {
	return &v
}

type NullableClientUpdateTokenEndpointAuthMethod struct {
	value *ClientUpdateTokenEndpointAuthMethod
	isSet bool
}

func (v NullableClientUpdateTokenEndpointAuthMethod) Get() *ClientUpdateTokenEndpointAuthMethod {
	return v.value
}

func (v *NullableClientUpdateTokenEndpointAuthMethod) Set(val *ClientUpdateTokenEndpointAuthMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableClientUpdateTokenEndpointAuthMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableClientUpdateTokenEndpointAuthMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientUpdateTokenEndpointAuthMethod(val *ClientUpdateTokenEndpointAuthMethod) *NullableClientUpdateTokenEndpointAuthMethod {
	return &NullableClientUpdateTokenEndpointAuthMethod{value: val, isSet: true}
}

func (v NullableClientUpdateTokenEndpointAuthMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientUpdateTokenEndpointAuthMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
