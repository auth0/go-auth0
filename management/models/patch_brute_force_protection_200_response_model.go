/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PatchBruteForceProtection200Response struct for PatchBruteForceProtection200Response
type PatchBruteForceProtection200Response struct {
	// Whether or not brute force attack protections are active.
	Enabled bool `json:"enabled"`
	// Action to take when a brute force protection threshold is violated.         Possible values: <code>block</code>, <code>user_notification</code>.
	Shields []GetBruteForceProtection200ResponseShieldsInner `json:"shields"`
	// List of trusted IP addresses that will not have attack protection enforced against them.
	Allowlist []PatchBruteForceProtection200ResponseAllowlistInner `json:"allowlist"`
	Mode      GetBruteForceProtection200ResponseMode               `json:"mode"`
	// Maximum number of unsuccessful attempts.
	MaxAttempts          int32 `json:"max_attempts"`
	AdditionalProperties map[string]interface{}
}

type _PatchBruteForceProtection200Response PatchBruteForceProtection200Response

// GetEnabled returns the Enabled field value
func (o *PatchBruteForceProtection200Response) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *PatchBruteForceProtection200Response) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *PatchBruteForceProtection200Response) SetEnabled(v bool) {
	o.Enabled = v
}

// GetShields returns the Shields field value
func (o *PatchBruteForceProtection200Response) GetShields() []GetBruteForceProtection200ResponseShieldsInner {
	if o == nil {
		var ret []GetBruteForceProtection200ResponseShieldsInner
		return ret
	}

	return o.Shields
}

// GetShieldsOk returns a tuple with the Shields field value
// and a boolean to check if the value has been set.
func (o *PatchBruteForceProtection200Response) GetShieldsOk() ([]GetBruteForceProtection200ResponseShieldsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Shields, true
}

// SetShields sets field value
func (o *PatchBruteForceProtection200Response) SetShields(v []GetBruteForceProtection200ResponseShieldsInner) {
	o.Shields = v
}

// GetAllowlist returns the Allowlist field value
func (o *PatchBruteForceProtection200Response) GetAllowlist() []PatchBruteForceProtection200ResponseAllowlistInner {
	if o == nil {
		var ret []PatchBruteForceProtection200ResponseAllowlistInner
		return ret
	}

	return o.Allowlist
}

// GetAllowlistOk returns a tuple with the Allowlist field value
// and a boolean to check if the value has been set.
func (o *PatchBruteForceProtection200Response) GetAllowlistOk() ([]PatchBruteForceProtection200ResponseAllowlistInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Allowlist, true
}

// SetAllowlist sets field value
func (o *PatchBruteForceProtection200Response) SetAllowlist(v []PatchBruteForceProtection200ResponseAllowlistInner) {
	o.Allowlist = v
}

// GetMode returns the Mode field value
func (o *PatchBruteForceProtection200Response) GetMode() GetBruteForceProtection200ResponseMode {
	if o == nil {
		var ret GetBruteForceProtection200ResponseMode
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *PatchBruteForceProtection200Response) GetModeOk() (*GetBruteForceProtection200ResponseMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *PatchBruteForceProtection200Response) SetMode(v GetBruteForceProtection200ResponseMode) {
	o.Mode = v
}

// GetMaxAttempts returns the MaxAttempts field value
func (o *PatchBruteForceProtection200Response) GetMaxAttempts() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxAttempts
}

// GetMaxAttemptsOk returns a tuple with the MaxAttempts field value
// and a boolean to check if the value has been set.
func (o *PatchBruteForceProtection200Response) GetMaxAttemptsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxAttempts, true
}

// SetMaxAttempts sets field value
func (o *PatchBruteForceProtection200Response) SetMaxAttempts(v int32) {
	o.MaxAttempts = v
}

func (o PatchBruteForceProtection200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchBruteForceProtection200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["shields"] = o.Shields
	toSerialize["allowlist"] = o.Allowlist
	toSerialize["mode"] = o.Mode
	toSerialize["max_attempts"] = o.MaxAttempts

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchBruteForceProtection200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"shields",
		"allowlist",
		"mode",
		"max_attempts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatchBruteForceProtection200Response := _PatchBruteForceProtection200Response{}

	err = json.Unmarshal(data, &varPatchBruteForceProtection200Response)

	if err != nil {
		return err
	}

	*o = PatchBruteForceProtection200Response(varPatchBruteForceProtection200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "shields")
		delete(additionalProperties, "allowlist")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "max_attempts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchBruteForceProtection200Response struct {
	value *PatchBruteForceProtection200Response
	isSet bool
}

func (v NullablePatchBruteForceProtection200Response) Get() *PatchBruteForceProtection200Response {
	return v.value
}

func (v *NullablePatchBruteForceProtection200Response) Set(val *PatchBruteForceProtection200Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchBruteForceProtection200Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchBruteForceProtection200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchBruteForceProtection200Response(val *PatchBruteForceProtection200Response) *NullablePatchBruteForceProtection200Response {
	return &NullablePatchBruteForceProtection200Response{value: val, isSet: true}
}

func (v NullablePatchBruteForceProtection200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchBruteForceProtection200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
