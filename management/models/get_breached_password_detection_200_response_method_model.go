/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// GetBreachedPasswordDetection200ResponseMethod The subscription level for breached password detection methods. Use \"enhanced\" to enable Credential Guard.         Possible values: <code>standard</code>, <code>enhanced</code>.
type GetBreachedPasswordDetection200ResponseMethod string

// List of get_breached_password_detection_200_response_method
const (
	GETBREACHEDPASSWORDDETECTION200RESPONSEMETHOD_STANDARD GetBreachedPasswordDetection200ResponseMethod = "standard"
	GETBREACHEDPASSWORDDETECTION200RESPONSEMETHOD_ENHANCED GetBreachedPasswordDetection200ResponseMethod = "enhanced"
)

// All allowed values of GetBreachedPasswordDetection200ResponseMethod enum
var AllowedGetBreachedPasswordDetection200ResponseMethodEnumValues = []GetBreachedPasswordDetection200ResponseMethod{
	"standard",
	"enhanced",
}

func (v *GetBreachedPasswordDetection200ResponseMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GetBreachedPasswordDetection200ResponseMethod(value)
	for _, existing := range AllowedGetBreachedPasswordDetection200ResponseMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GetBreachedPasswordDetection200ResponseMethod", value)
}

// NewGetBreachedPasswordDetection200ResponseMethodFromValue returns a pointer to a valid GetBreachedPasswordDetection200ResponseMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGetBreachedPasswordDetection200ResponseMethodFromValue(v string) (*GetBreachedPasswordDetection200ResponseMethod, error) {
	ev := GetBreachedPasswordDetection200ResponseMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GetBreachedPasswordDetection200ResponseMethod: valid values are %v", v, AllowedGetBreachedPasswordDetection200ResponseMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GetBreachedPasswordDetection200ResponseMethod) IsValid() bool {
	for _, existing := range AllowedGetBreachedPasswordDetection200ResponseMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to get_breached_password_detection_200_response_method value
func (v GetBreachedPasswordDetection200ResponseMethod) Ptr() *GetBreachedPasswordDetection200ResponseMethod {
	return &v
}

type NullableGetBreachedPasswordDetection200ResponseMethod struct {
	value *GetBreachedPasswordDetection200ResponseMethod
	isSet bool
}

func (v NullableGetBreachedPasswordDetection200ResponseMethod) Get() *GetBreachedPasswordDetection200ResponseMethod {
	return v.value
}

func (v *NullableGetBreachedPasswordDetection200ResponseMethod) Set(val *GetBreachedPasswordDetection200ResponseMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBreachedPasswordDetection200ResponseMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBreachedPasswordDetection200ResponseMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBreachedPasswordDetection200ResponseMethod(val *GetBreachedPasswordDetection200ResponseMethod) *NullableGetBreachedPasswordDetection200ResponseMethod {
	return &NullableGetBreachedPasswordDetection200ResponseMethod{value: val, isSet: true}
}

func (v NullableGetBreachedPasswordDetection200ResponseMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBreachedPasswordDetection200ResponseMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
