/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// EmailProviderCredentials Credentials required to use the provider.
type EmailProviderCredentials struct {
	// API User.
	ApiUser string `json:"api_user"`
	// AWS or SparkPost region.
	Region string `json:"region"`
	// SMTP host.
	SmtpHost string `json:"smtp_host"`
	// SMTP port.
	SmtpPort int32 `json:"smtp_port"`
	// SMTP username.
	SmtpUser string `json:"smtp_user"`
}

type _EmailProviderCredentials EmailProviderCredentials

// GetApiUser returns the ApiUser field value
func (o *EmailProviderCredentials) GetApiUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiUser
}

// GetApiUserOk returns a tuple with the ApiUser field value
// and a boolean to check if the value has been set.
func (o *EmailProviderCredentials) GetApiUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiUser, true
}

// SetApiUser sets field value
func (o *EmailProviderCredentials) SetApiUser(v string) {
	o.ApiUser = v
}

// GetRegion returns the Region field value
func (o *EmailProviderCredentials) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *EmailProviderCredentials) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *EmailProviderCredentials) SetRegion(v string) {
	o.Region = v
}

// GetSmtpHost returns the SmtpHost field value
func (o *EmailProviderCredentials) GetSmtpHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SmtpHost
}

// GetSmtpHostOk returns a tuple with the SmtpHost field value
// and a boolean to check if the value has been set.
func (o *EmailProviderCredentials) GetSmtpHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmtpHost, true
}

// SetSmtpHost sets field value
func (o *EmailProviderCredentials) SetSmtpHost(v string) {
	o.SmtpHost = v
}

// GetSmtpPort returns the SmtpPort field value
func (o *EmailProviderCredentials) GetSmtpPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SmtpPort
}

// GetSmtpPortOk returns a tuple with the SmtpPort field value
// and a boolean to check if the value has been set.
func (o *EmailProviderCredentials) GetSmtpPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmtpPort, true
}

// SetSmtpPort sets field value
func (o *EmailProviderCredentials) SetSmtpPort(v int32) {
	o.SmtpPort = v
}

// GetSmtpUser returns the SmtpUser field value
func (o *EmailProviderCredentials) GetSmtpUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SmtpUser
}

// GetSmtpUserOk returns a tuple with the SmtpUser field value
// and a boolean to check if the value has been set.
func (o *EmailProviderCredentials) GetSmtpUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmtpUser, true
}

// SetSmtpUser sets field value
func (o *EmailProviderCredentials) SetSmtpUser(v string) {
	o.SmtpUser = v
}

func (o EmailProviderCredentials) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailProviderCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["api_user"] = o.ApiUser
	toSerialize["region"] = o.Region
	toSerialize["smtp_host"] = o.SmtpHost
	toSerialize["smtp_port"] = o.SmtpPort
	toSerialize["smtp_user"] = o.SmtpUser
	return toSerialize, nil
}

func (o *EmailProviderCredentials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"api_user",
		"region",
		"smtp_host",
		"smtp_port",
		"smtp_user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailProviderCredentials := _EmailProviderCredentials{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailProviderCredentials)

	if err != nil {
		return err
	}

	*o = EmailProviderCredentials(varEmailProviderCredentials)

	return err
}

type NullableEmailProviderCredentials struct {
	value *EmailProviderCredentials
	isSet bool
}

func (v NullableEmailProviderCredentials) Get() *EmailProviderCredentials {
	return v.value
}

func (v *NullableEmailProviderCredentials) Set(val *EmailProviderCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProviderCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProviderCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProviderCredentials(val *EmailProviderCredentials) *NullableEmailProviderCredentials {
	return &NullableEmailProviderCredentials{value: val, isSet: true}
}

func (v NullableEmailProviderCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProviderCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
