/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// UserBlockBlockedForInner struct for UserBlockBlockedForInner
type UserBlockBlockedForInner struct {
	// Identifier (should be any of an `email`, `username`, or `phone_number`)
	Identifier string `json:"identifier"`
	// IP Address
	Ip string `json:"ip"`
	// Connection identifier
	Connection           string `json:"connection"`
	AdditionalProperties map[string]interface{}
}

type _UserBlockBlockedForInner UserBlockBlockedForInner

// GetIdentifier returns the Identifier field value
func (o *UserBlockBlockedForInner) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *UserBlockBlockedForInner) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *UserBlockBlockedForInner) SetIdentifier(v string) {
	o.Identifier = v
}

// GetIp returns the Ip field value
func (o *UserBlockBlockedForInner) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *UserBlockBlockedForInner) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *UserBlockBlockedForInner) SetIp(v string) {
	o.Ip = v
}

// GetConnection returns the Connection field value
func (o *UserBlockBlockedForInner) GetConnection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value
// and a boolean to check if the value has been set.
func (o *UserBlockBlockedForInner) GetConnectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connection, true
}

// SetConnection sets field value
func (o *UserBlockBlockedForInner) SetConnection(v string) {
	o.Connection = v
}

func (o UserBlockBlockedForInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserBlockBlockedForInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifier"] = o.Identifier
	toSerialize["ip"] = o.Ip
	toSerialize["connection"] = o.Connection

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserBlockBlockedForInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"ip",
		"connection",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserBlockBlockedForInner := _UserBlockBlockedForInner{}

	err = json.Unmarshal(data, &varUserBlockBlockedForInner)

	if err != nil {
		return err
	}

	*o = UserBlockBlockedForInner(varUserBlockBlockedForInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "identifier")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "connection")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserBlockBlockedForInner struct {
	value *UserBlockBlockedForInner
	isSet bool
}

func (v NullableUserBlockBlockedForInner) Get() *UserBlockBlockedForInner {
	return v.value
}

func (v *NullableUserBlockBlockedForInner) Set(val *UserBlockBlockedForInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUserBlockBlockedForInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUserBlockBlockedForInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserBlockBlockedForInner(val *UserBlockBlockedForInner) *NullableUserBlockBlockedForInner {
	return &NullableUserBlockBlockedForInner{value: val, isSet: true}
}

func (v NullableUserBlockBlockedForInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserBlockBlockedForInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
