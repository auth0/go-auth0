/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// UserBlockBlockedForInner struct for UserBlockBlockedForInner
type UserBlockBlockedForInner struct {
	// Identifier (should be any of an `email`, `username`, or `phone_number`)
	Identifier *string `json:"identifier,omitempty"`
	// IP Address
	Ip *string `json:"ip,omitempty"`
	// Connection identifier
	Connection           *string `json:"connection,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserBlockBlockedForInner UserBlockBlockedForInner

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *UserBlockBlockedForInner) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBlockBlockedForInner) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *UserBlockBlockedForInner) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *UserBlockBlockedForInner) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *UserBlockBlockedForInner) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBlockBlockedForInner) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *UserBlockBlockedForInner) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *UserBlockBlockedForInner) SetIp(v string) {
	o.Ip = &v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *UserBlockBlockedForInner) GetConnection() string {
	if o == nil || IsNil(o.Connection) {
		var ret string
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBlockBlockedForInner) GetConnectionOk() (*string, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *UserBlockBlockedForInner) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given string and assigns it to the Connection field.
func (o *UserBlockBlockedForInner) SetConnection(v string) {
	o.Connection = &v
}

func (o UserBlockBlockedForInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserBlockBlockedForInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserBlockBlockedForInner) UnmarshalJSON(data []byte) (err error) {
	varUserBlockBlockedForInner := _UserBlockBlockedForInner{}

	err = json.Unmarshal(data, &varUserBlockBlockedForInner)

	if err != nil {
		return err
	}

	*o = UserBlockBlockedForInner(varUserBlockBlockedForInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "identifier")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "connection")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserBlockBlockedForInner struct {
	value *UserBlockBlockedForInner
	isSet bool
}

func (v NullableUserBlockBlockedForInner) Get() *UserBlockBlockedForInner {
	return v.value
}

func (v *NullableUserBlockBlockedForInner) Set(val *UserBlockBlockedForInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUserBlockBlockedForInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUserBlockBlockedForInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserBlockBlockedForInner(val *UserBlockBlockedForInner) *NullableUserBlockBlockedForInner {
	return &NullableUserBlockBlockedForInner{value: val, isSet: true}
}

func (v NullableUserBlockBlockedForInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserBlockBlockedForInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
