/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// GetCredentials200ResponseInnerAlg Algorithm which will be used with the credential. Supported algorithms: RS256,RS384,PS256
type GetCredentials200ResponseInnerAlg string

// List of get_credentials_200_response_inner_alg
const (
	GETCREDENTIALS200RESPONSEINNERALG_RS256 GetCredentials200ResponseInnerAlg = "RS256"
	GETCREDENTIALS200RESPONSEINNERALG_RS384 GetCredentials200ResponseInnerAlg = "RS384"
	GETCREDENTIALS200RESPONSEINNERALG_PS256 GetCredentials200ResponseInnerAlg = "PS256"
)

// All allowed values of GetCredentials200ResponseInnerAlg enum
var AllowedGetCredentials200ResponseInnerAlgEnumValues = []GetCredentials200ResponseInnerAlg{
	"RS256",
	"RS384",
	"PS256",
}

func (v *GetCredentials200ResponseInnerAlg) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GetCredentials200ResponseInnerAlg(value)
	for _, existing := range AllowedGetCredentials200ResponseInnerAlgEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GetCredentials200ResponseInnerAlg", value)
}

// NewGetCredentials200ResponseInnerAlgFromValue returns a pointer to a valid GetCredentials200ResponseInnerAlg
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGetCredentials200ResponseInnerAlgFromValue(v string) (*GetCredentials200ResponseInnerAlg, error) {
	ev := GetCredentials200ResponseInnerAlg(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GetCredentials200ResponseInnerAlg: valid values are %v", v, AllowedGetCredentials200ResponseInnerAlgEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GetCredentials200ResponseInnerAlg) IsValid() bool {
	for _, existing := range AllowedGetCredentials200ResponseInnerAlgEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to get_credentials_200_response_inner_alg value
func (v GetCredentials200ResponseInnerAlg) Ptr() *GetCredentials200ResponseInnerAlg {
	return &v
}

type NullableGetCredentials200ResponseInnerAlg struct {
	value *GetCredentials200ResponseInnerAlg
	isSet bool
}

func (v NullableGetCredentials200ResponseInnerAlg) Get() *GetCredentials200ResponseInnerAlg {
	return v.value
}

func (v *NullableGetCredentials200ResponseInnerAlg) Set(val *GetCredentials200ResponseInnerAlg) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCredentials200ResponseInnerAlg) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCredentials200ResponseInnerAlg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCredentials200ResponseInnerAlg(val *GetCredentials200ResponseInnerAlg) *NullableGetCredentials200ResponseInnerAlg {
	return &NullableGetCredentials200ResponseInnerAlg{value: val, isSet: true}
}

func (v NullableGetCredentials200ResponseInnerAlg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCredentials200ResponseInnerAlg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
