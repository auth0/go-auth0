/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// GetDeviceCredentialsTypeParameter the model 'GetDeviceCredentialsTypeParameter'
type GetDeviceCredentialsTypeParameter string

// List of get_device_credentials_type_parameter
const (
	GETDEVICECREDENTIALSTYPEPARAMETER_PUBLIC_KEY             GetDeviceCredentialsTypeParameter = "public_key"
	GETDEVICECREDENTIALSTYPEPARAMETER_REFRESH_TOKEN          GetDeviceCredentialsTypeParameter = "refresh_token"
	GETDEVICECREDENTIALSTYPEPARAMETER_ROTATING_REFRESH_TOKEN GetDeviceCredentialsTypeParameter = "rotating_refresh_token"
)

// All allowed values of GetDeviceCredentialsTypeParameter enum
var AllowedGetDeviceCredentialsTypeParameterEnumValues = []GetDeviceCredentialsTypeParameter{
	"public_key",
	"refresh_token",
	"rotating_refresh_token",
}

func (v *GetDeviceCredentialsTypeParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GetDeviceCredentialsTypeParameter(value)
	for _, existing := range AllowedGetDeviceCredentialsTypeParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GetDeviceCredentialsTypeParameter", value)
}

// NewGetDeviceCredentialsTypeParameterFromValue returns a pointer to a valid GetDeviceCredentialsTypeParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGetDeviceCredentialsTypeParameterFromValue(v string) (*GetDeviceCredentialsTypeParameter, error) {
	ev := GetDeviceCredentialsTypeParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GetDeviceCredentialsTypeParameter: valid values are %v", v, AllowedGetDeviceCredentialsTypeParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GetDeviceCredentialsTypeParameter) IsValid() bool {
	for _, existing := range AllowedGetDeviceCredentialsTypeParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to get_device_credentials_type_parameter value
func (v GetDeviceCredentialsTypeParameter) Ptr() *GetDeviceCredentialsTypeParameter {
	return &v
}

type NullableGetDeviceCredentialsTypeParameter struct {
	value *GetDeviceCredentialsTypeParameter
	isSet bool
}

func (v NullableGetDeviceCredentialsTypeParameter) Get() *GetDeviceCredentialsTypeParameter {
	return v.value
}

func (v *NullableGetDeviceCredentialsTypeParameter) Set(val *GetDeviceCredentialsTypeParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDeviceCredentialsTypeParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDeviceCredentialsTypeParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDeviceCredentialsTypeParameter(val *GetDeviceCredentialsTypeParameter) *NullableGetDeviceCredentialsTypeParameter {
	return &NullableGetDeviceCredentialsTypeParameter{value: val, isSet: true}
}

func (v NullableGetDeviceCredentialsTypeParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDeviceCredentialsTypeParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
