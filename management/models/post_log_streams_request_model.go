/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// PostLogStreamsRequest - struct for PostLogStreamsRequest
type PostLogStreamsRequest struct {
	PostLogStreamsRequestOneOf  *PostLogStreamsRequestOneOf
	PostLogStreamsRequestOneOf1 *PostLogStreamsRequestOneOf1
	PostLogStreamsRequestOneOf2 *PostLogStreamsRequestOneOf2
	PostLogStreamsRequestOneOf3 *PostLogStreamsRequestOneOf3
	PostLogStreamsRequestOneOf4 *PostLogStreamsRequestOneOf4
	PostLogStreamsRequestOneOf5 *PostLogStreamsRequestOneOf5
	PostLogStreamsRequestOneOf6 *PostLogStreamsRequestOneOf6
	PostLogStreamsRequestOneOf7 *PostLogStreamsRequestOneOf7
}

// PostLogStreamsRequestOneOfAsPostLogStreamsRequest is a convenience function that returns PostLogStreamsRequestOneOf wrapped in PostLogStreamsRequest
func PostLogStreamsRequestOneOfAsPostLogStreamsRequest(v *PostLogStreamsRequestOneOf) PostLogStreamsRequest {
	return PostLogStreamsRequest{
		PostLogStreamsRequestOneOf: v,
	}
}

// PostLogStreamsRequestOneOf1AsPostLogStreamsRequest is a convenience function that returns PostLogStreamsRequestOneOf1 wrapped in PostLogStreamsRequest
func PostLogStreamsRequestOneOf1AsPostLogStreamsRequest(v *PostLogStreamsRequestOneOf1) PostLogStreamsRequest {
	return PostLogStreamsRequest{
		PostLogStreamsRequestOneOf1: v,
	}
}

// PostLogStreamsRequestOneOf2AsPostLogStreamsRequest is a convenience function that returns PostLogStreamsRequestOneOf2 wrapped in PostLogStreamsRequest
func PostLogStreamsRequestOneOf2AsPostLogStreamsRequest(v *PostLogStreamsRequestOneOf2) PostLogStreamsRequest {
	return PostLogStreamsRequest{
		PostLogStreamsRequestOneOf2: v,
	}
}

// PostLogStreamsRequestOneOf3AsPostLogStreamsRequest is a convenience function that returns PostLogStreamsRequestOneOf3 wrapped in PostLogStreamsRequest
func PostLogStreamsRequestOneOf3AsPostLogStreamsRequest(v *PostLogStreamsRequestOneOf3) PostLogStreamsRequest {
	return PostLogStreamsRequest{
		PostLogStreamsRequestOneOf3: v,
	}
}

// PostLogStreamsRequestOneOf4AsPostLogStreamsRequest is a convenience function that returns PostLogStreamsRequestOneOf4 wrapped in PostLogStreamsRequest
func PostLogStreamsRequestOneOf4AsPostLogStreamsRequest(v *PostLogStreamsRequestOneOf4) PostLogStreamsRequest {
	return PostLogStreamsRequest{
		PostLogStreamsRequestOneOf4: v,
	}
}

// PostLogStreamsRequestOneOf5AsPostLogStreamsRequest is a convenience function that returns PostLogStreamsRequestOneOf5 wrapped in PostLogStreamsRequest
func PostLogStreamsRequestOneOf5AsPostLogStreamsRequest(v *PostLogStreamsRequestOneOf5) PostLogStreamsRequest {
	return PostLogStreamsRequest{
		PostLogStreamsRequestOneOf5: v,
	}
}

// PostLogStreamsRequestOneOf6AsPostLogStreamsRequest is a convenience function that returns PostLogStreamsRequestOneOf6 wrapped in PostLogStreamsRequest
func PostLogStreamsRequestOneOf6AsPostLogStreamsRequest(v *PostLogStreamsRequestOneOf6) PostLogStreamsRequest {
	return PostLogStreamsRequest{
		PostLogStreamsRequestOneOf6: v,
	}
}

// PostLogStreamsRequestOneOf7AsPostLogStreamsRequest is a convenience function that returns PostLogStreamsRequestOneOf7 wrapped in PostLogStreamsRequest
func PostLogStreamsRequestOneOf7AsPostLogStreamsRequest(v *PostLogStreamsRequestOneOf7) PostLogStreamsRequest {
	return PostLogStreamsRequest{
		PostLogStreamsRequestOneOf7: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PostLogStreamsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PostLogStreamsRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.PostLogStreamsRequestOneOf)
	if err == nil {
		jsonPostLogStreamsRequestOneOf, _ := json.Marshal(dst.PostLogStreamsRequestOneOf)
		if string(jsonPostLogStreamsRequestOneOf) == "{}" { // empty struct
			dst.PostLogStreamsRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.PostLogStreamsRequestOneOf); err != nil {
				dst.PostLogStreamsRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.PostLogStreamsRequestOneOf = nil
	}

	// try to unmarshal data into PostLogStreamsRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.PostLogStreamsRequestOneOf1)
	if err == nil {
		jsonPostLogStreamsRequestOneOf1, _ := json.Marshal(dst.PostLogStreamsRequestOneOf1)
		if string(jsonPostLogStreamsRequestOneOf1) == "{}" { // empty struct
			dst.PostLogStreamsRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.PostLogStreamsRequestOneOf1); err != nil {
				dst.PostLogStreamsRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PostLogStreamsRequestOneOf1 = nil
	}

	// try to unmarshal data into PostLogStreamsRequestOneOf2
	err = newStrictDecoder(data).Decode(&dst.PostLogStreamsRequestOneOf2)
	if err == nil {
		jsonPostLogStreamsRequestOneOf2, _ := json.Marshal(dst.PostLogStreamsRequestOneOf2)
		if string(jsonPostLogStreamsRequestOneOf2) == "{}" { // empty struct
			dst.PostLogStreamsRequestOneOf2 = nil
		} else {
			if err = validator.Validate(dst.PostLogStreamsRequestOneOf2); err != nil {
				dst.PostLogStreamsRequestOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PostLogStreamsRequestOneOf2 = nil
	}

	// try to unmarshal data into PostLogStreamsRequestOneOf3
	err = newStrictDecoder(data).Decode(&dst.PostLogStreamsRequestOneOf3)
	if err == nil {
		jsonPostLogStreamsRequestOneOf3, _ := json.Marshal(dst.PostLogStreamsRequestOneOf3)
		if string(jsonPostLogStreamsRequestOneOf3) == "{}" { // empty struct
			dst.PostLogStreamsRequestOneOf3 = nil
		} else {
			if err = validator.Validate(dst.PostLogStreamsRequestOneOf3); err != nil {
				dst.PostLogStreamsRequestOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PostLogStreamsRequestOneOf3 = nil
	}

	// try to unmarshal data into PostLogStreamsRequestOneOf4
	err = newStrictDecoder(data).Decode(&dst.PostLogStreamsRequestOneOf4)
	if err == nil {
		jsonPostLogStreamsRequestOneOf4, _ := json.Marshal(dst.PostLogStreamsRequestOneOf4)
		if string(jsonPostLogStreamsRequestOneOf4) == "{}" { // empty struct
			dst.PostLogStreamsRequestOneOf4 = nil
		} else {
			if err = validator.Validate(dst.PostLogStreamsRequestOneOf4); err != nil {
				dst.PostLogStreamsRequestOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PostLogStreamsRequestOneOf4 = nil
	}

	// try to unmarshal data into PostLogStreamsRequestOneOf5
	err = newStrictDecoder(data).Decode(&dst.PostLogStreamsRequestOneOf5)
	if err == nil {
		jsonPostLogStreamsRequestOneOf5, _ := json.Marshal(dst.PostLogStreamsRequestOneOf5)
		if string(jsonPostLogStreamsRequestOneOf5) == "{}" { // empty struct
			dst.PostLogStreamsRequestOneOf5 = nil
		} else {
			if err = validator.Validate(dst.PostLogStreamsRequestOneOf5); err != nil {
				dst.PostLogStreamsRequestOneOf5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PostLogStreamsRequestOneOf5 = nil
	}

	// try to unmarshal data into PostLogStreamsRequestOneOf6
	err = newStrictDecoder(data).Decode(&dst.PostLogStreamsRequestOneOf6)
	if err == nil {
		jsonPostLogStreamsRequestOneOf6, _ := json.Marshal(dst.PostLogStreamsRequestOneOf6)
		if string(jsonPostLogStreamsRequestOneOf6) == "{}" { // empty struct
			dst.PostLogStreamsRequestOneOf6 = nil
		} else {
			if err = validator.Validate(dst.PostLogStreamsRequestOneOf6); err != nil {
				dst.PostLogStreamsRequestOneOf6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PostLogStreamsRequestOneOf6 = nil
	}

	// try to unmarshal data into PostLogStreamsRequestOneOf7
	err = newStrictDecoder(data).Decode(&dst.PostLogStreamsRequestOneOf7)
	if err == nil {
		jsonPostLogStreamsRequestOneOf7, _ := json.Marshal(dst.PostLogStreamsRequestOneOf7)
		if string(jsonPostLogStreamsRequestOneOf7) == "{}" { // empty struct
			dst.PostLogStreamsRequestOneOf7 = nil
		} else {
			if err = validator.Validate(dst.PostLogStreamsRequestOneOf7); err != nil {
				dst.PostLogStreamsRequestOneOf7 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PostLogStreamsRequestOneOf7 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PostLogStreamsRequestOneOf = nil
		dst.PostLogStreamsRequestOneOf1 = nil
		dst.PostLogStreamsRequestOneOf2 = nil
		dst.PostLogStreamsRequestOneOf3 = nil
		dst.PostLogStreamsRequestOneOf4 = nil
		dst.PostLogStreamsRequestOneOf5 = nil
		dst.PostLogStreamsRequestOneOf6 = nil
		dst.PostLogStreamsRequestOneOf7 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PostLogStreamsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PostLogStreamsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PostLogStreamsRequest) MarshalJSON() ([]byte, error) {
	if src.PostLogStreamsRequestOneOf != nil {
		return json.Marshal(&src.PostLogStreamsRequestOneOf)
	}

	if src.PostLogStreamsRequestOneOf1 != nil {
		return json.Marshal(&src.PostLogStreamsRequestOneOf1)
	}

	if src.PostLogStreamsRequestOneOf2 != nil {
		return json.Marshal(&src.PostLogStreamsRequestOneOf2)
	}

	if src.PostLogStreamsRequestOneOf3 != nil {
		return json.Marshal(&src.PostLogStreamsRequestOneOf3)
	}

	if src.PostLogStreamsRequestOneOf4 != nil {
		return json.Marshal(&src.PostLogStreamsRequestOneOf4)
	}

	if src.PostLogStreamsRequestOneOf5 != nil {
		return json.Marshal(&src.PostLogStreamsRequestOneOf5)
	}

	if src.PostLogStreamsRequestOneOf6 != nil {
		return json.Marshal(&src.PostLogStreamsRequestOneOf6)
	}

	if src.PostLogStreamsRequestOneOf7 != nil {
		return json.Marshal(&src.PostLogStreamsRequestOneOf7)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PostLogStreamsRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.PostLogStreamsRequestOneOf != nil {
		return obj.PostLogStreamsRequestOneOf
	}

	if obj.PostLogStreamsRequestOneOf1 != nil {
		return obj.PostLogStreamsRequestOneOf1
	}

	if obj.PostLogStreamsRequestOneOf2 != nil {
		return obj.PostLogStreamsRequestOneOf2
	}

	if obj.PostLogStreamsRequestOneOf3 != nil {
		return obj.PostLogStreamsRequestOneOf3
	}

	if obj.PostLogStreamsRequestOneOf4 != nil {
		return obj.PostLogStreamsRequestOneOf4
	}

	if obj.PostLogStreamsRequestOneOf5 != nil {
		return obj.PostLogStreamsRequestOneOf5
	}

	if obj.PostLogStreamsRequestOneOf6 != nil {
		return obj.PostLogStreamsRequestOneOf6
	}

	if obj.PostLogStreamsRequestOneOf7 != nil {
		return obj.PostLogStreamsRequestOneOf7
	}

	// all schemas are nil
	return nil
}

type NullablePostLogStreamsRequest struct {
	value *PostLogStreamsRequest
	isSet bool
}

func (v NullablePostLogStreamsRequest) Get() *PostLogStreamsRequest {
	return v.value
}

func (v *NullablePostLogStreamsRequest) Set(val *PostLogStreamsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostLogStreamsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostLogStreamsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostLogStreamsRequest(val *PostLogStreamsRequest) *NullablePostLogStreamsRequest {
	return &NullablePostLogStreamsRequest{value: val, isSet: true}
}

func (v NullablePostLogStreamsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostLogStreamsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
