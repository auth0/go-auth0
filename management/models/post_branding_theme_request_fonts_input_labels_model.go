/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PostBrandingThemeRequestFontsInputLabels Input Labels
type PostBrandingThemeRequestFontsInputLabels struct {
	// Input Labels bold
	Bold bool `json:"bold"`
	// Input Labels size
	Size float32 `json:"size"`
}

type _PostBrandingThemeRequestFontsInputLabels PostBrandingThemeRequestFontsInputLabels

// GetBold returns the Bold field value
func (o *PostBrandingThemeRequestFontsInputLabels) GetBold() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Bold
}

// GetBoldOk returns a tuple with the Bold field value
// and a boolean to check if the value has been set.
func (o *PostBrandingThemeRequestFontsInputLabels) GetBoldOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bold, true
}

// SetBold sets field value
func (o *PostBrandingThemeRequestFontsInputLabels) SetBold(v bool) {
	o.Bold = v
}

// GetSize returns the Size field value
func (o *PostBrandingThemeRequestFontsInputLabels) GetSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *PostBrandingThemeRequestFontsInputLabels) GetSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *PostBrandingThemeRequestFontsInputLabels) SetSize(v float32) {
	o.Size = v
}

func (o PostBrandingThemeRequestFontsInputLabels) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostBrandingThemeRequestFontsInputLabels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bold"] = o.Bold
	toSerialize["size"] = o.Size
	return toSerialize, nil
}

func (o *PostBrandingThemeRequestFontsInputLabels) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bold",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostBrandingThemeRequestFontsInputLabels := _PostBrandingThemeRequestFontsInputLabels{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varPostBrandingThemeRequestFontsInputLabels)

	if err != nil {
		return err
	}

	*o = PostBrandingThemeRequestFontsInputLabels(varPostBrandingThemeRequestFontsInputLabels)

	return err
}

type NullablePostBrandingThemeRequestFontsInputLabels struct {
	value *PostBrandingThemeRequestFontsInputLabels
	isSet bool
}

func (v NullablePostBrandingThemeRequestFontsInputLabels) Get() *PostBrandingThemeRequestFontsInputLabels {
	return v.value
}

func (v *NullablePostBrandingThemeRequestFontsInputLabels) Set(val *PostBrandingThemeRequestFontsInputLabels) {
	v.value = val
	v.isSet = true
}

func (v NullablePostBrandingThemeRequestFontsInputLabels) IsSet() bool {
	return v.isSet
}

func (v *NullablePostBrandingThemeRequestFontsInputLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostBrandingThemeRequestFontsInputLabels(val *PostBrandingThemeRequestFontsInputLabels) *NullablePostBrandingThemeRequestFontsInputLabels {
	return &NullablePostBrandingThemeRequestFontsInputLabels{value: val, isSet: true}
}

func (v NullablePostBrandingThemeRequestFontsInputLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostBrandingThemeRequestFontsInputLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
