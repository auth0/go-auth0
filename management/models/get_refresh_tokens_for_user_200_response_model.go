/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// GetRefreshTokensForUser200Response struct for GetRefreshTokensForUser200Response
type GetRefreshTokensForUser200Response struct {
	Tokens []GetRefreshTokensForUser200ResponseTokensInner `json:"tokens,omitempty"`
	// A cursor to be used as the \"from\" query parameter for the next page of results.
	Next                 *string `json:"next,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetRefreshTokensForUser200Response GetRefreshTokensForUser200Response

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *GetRefreshTokensForUser200Response) GetTokens() []GetRefreshTokensForUser200ResponseTokensInner {
	if o == nil || IsNil(o.Tokens) {
		var ret []GetRefreshTokensForUser200ResponseTokensInner
		return ret
	}
	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRefreshTokensForUser200Response) GetTokensOk() ([]GetRefreshTokensForUser200ResponseTokensInner, bool) {
	if o == nil || IsNil(o.Tokens) {
		return nil, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *GetRefreshTokensForUser200Response) HasTokens() bool {
	if o != nil && !IsNil(o.Tokens) {
		return true
	}

	return false
}

// SetTokens gets a reference to the given []GetRefreshTokensForUser200ResponseTokensInner and assigns it to the Tokens field.
func (o *GetRefreshTokensForUser200Response) SetTokens(v []GetRefreshTokensForUser200ResponseTokensInner) {
	o.Tokens = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *GetRefreshTokensForUser200Response) GetNext() string {
	if o == nil || IsNil(o.Next) {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRefreshTokensForUser200Response) GetNextOk() (*string, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *GetRefreshTokensForUser200Response) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *GetRefreshTokensForUser200Response) SetNext(v string) {
	o.Next = &v
}

func (o GetRefreshTokensForUser200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRefreshTokensForUser200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tokens) {
		toSerialize["tokens"] = o.Tokens
	}
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetRefreshTokensForUser200Response) UnmarshalJSON(data []byte) (err error) {
	varGetRefreshTokensForUser200Response := _GetRefreshTokensForUser200Response{}

	err = json.Unmarshal(data, &varGetRefreshTokensForUser200Response)

	if err != nil {
		return err
	}

	*o = GetRefreshTokensForUser200Response(varGetRefreshTokensForUser200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tokens")
		delete(additionalProperties, "next")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetRefreshTokensForUser200Response struct {
	value *GetRefreshTokensForUser200Response
	isSet bool
}

func (v NullableGetRefreshTokensForUser200Response) Get() *GetRefreshTokensForUser200Response {
	return v.value
}

func (v *NullableGetRefreshTokensForUser200Response) Set(val *GetRefreshTokensForUser200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRefreshTokensForUser200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRefreshTokensForUser200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRefreshTokensForUser200Response(val *GetRefreshTokensForUser200Response) *NullableGetRefreshTokensForUser200Response {
	return &NullableGetRefreshTokensForUser200Response{value: val, isSet: true}
}

func (v NullableGetRefreshTokensForUser200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRefreshTokensForUser200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
