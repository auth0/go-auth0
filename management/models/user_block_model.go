/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// UserBlock struct for UserBlock
type UserBlock struct {
	// Array of identifier + IP address pairs.  IP address is optional, and may be omitted in certain circumstances (such as Account Lockout mode).
	BlockedFor []UserBlockBlockedForInner `json:"blocked_for,omitempty"`
}

// GetBlockedFor returns the BlockedFor field value if set, zero value otherwise.
func (o *UserBlock) GetBlockedFor() []UserBlockBlockedForInner {
	if o == nil || IsNil(o.BlockedFor) {
		var ret []UserBlockBlockedForInner
		return ret
	}
	return o.BlockedFor
}

// GetBlockedForOk returns a tuple with the BlockedFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBlock) GetBlockedForOk() ([]UserBlockBlockedForInner, bool) {
	if o == nil || IsNil(o.BlockedFor) {
		return nil, false
	}
	return o.BlockedFor, true
}

// HasBlockedFor returns a boolean if a field has been set.
func (o *UserBlock) HasBlockedFor() bool {
	if o != nil && !IsNil(o.BlockedFor) {
		return true
	}

	return false
}

// SetBlockedFor gets a reference to the given []UserBlockBlockedForInner and assigns it to the BlockedFor field.
func (o *UserBlock) SetBlockedFor(v []UserBlockBlockedForInner) {
	o.BlockedFor = v
}

func (o UserBlock) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockedFor) {
		toSerialize["blocked_for"] = o.BlockedFor
	}
	return toSerialize, nil
}

type NullableUserBlock struct {
	value *UserBlock
	isSet bool
}

func (v NullableUserBlock) Get() *UserBlock {
	return v.value
}

func (v *NullableUserBlock) Set(val *UserBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableUserBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableUserBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserBlock(val *UserBlock) *NullableUserBlock {
	return &NullableUserBlock{value: val, isSet: true}
}

func (v NullableUserBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
