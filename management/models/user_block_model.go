/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
)

// UserBlock struct for UserBlock
type UserBlock struct {
	// Array of identifier + IP address pairs.  IP address is optional, and may be omitted in certain circumstances (such as Account Lockout mode).
	BlockedFor []UserBlockBlockedForInner `json:"blocked_for"`
}

type _UserBlock UserBlock

// GetBlockedFor returns the BlockedFor field value
func (o *UserBlock) GetBlockedFor() []UserBlockBlockedForInner {
	if o == nil {
		var ret []UserBlockBlockedForInner
		return ret
	}

	return o.BlockedFor
}

// GetBlockedForOk returns a tuple with the BlockedFor field value
// and a boolean to check if the value has been set.
func (o *UserBlock) GetBlockedForOk() ([]UserBlockBlockedForInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockedFor, true
}

// SetBlockedFor sets field value
func (o *UserBlock) SetBlockedFor(v []UserBlockBlockedForInner) {
	o.BlockedFor = v
}

func (o UserBlock) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["blocked_for"] = o.BlockedFor
	return toSerialize, nil
}

func (o *UserBlock) UnmarshalJSON(data []byte) (err error) {
	varUserBlock := _UserBlock{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserBlock)

	if err != nil {
		return err
	}

	*o = UserBlock(varUserBlock)

	return err
}

type NullableUserBlock struct {
	value *UserBlock
	isSet bool
}

func (v NullableUserBlock) Get() *UserBlock {
	return v.value
}

func (v *NullableUserBlock) Set(val *UserBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableUserBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableUserBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserBlock(val *UserBlock) *NullableUserBlock {
	return &NullableUserBlock{value: val, isSet: true}
}

func (v NullableUserBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
