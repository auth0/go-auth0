/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// UserEnrollmentAuthMethod Authentication method for this enrollment. Can be `authenticator`, `guardian`, `sms`, `webauthn-roaming`, or `webauthn-platform`.
type UserEnrollmentAuthMethod string

// List of userEnrollment_auth_method
const (
	USERENROLLMENTAUTHMETHOD_AUTHENTICATOR     UserEnrollmentAuthMethod = "authenticator"
	USERENROLLMENTAUTHMETHOD_GUARDIAN          UserEnrollmentAuthMethod = "guardian"
	USERENROLLMENTAUTHMETHOD_SMS               UserEnrollmentAuthMethod = "sms"
	USERENROLLMENTAUTHMETHOD_WEBAUTHN_PLATFORM UserEnrollmentAuthMethod = "webauthn-platform"
	USERENROLLMENTAUTHMETHOD_WEBAUTHN_ROAMING  UserEnrollmentAuthMethod = "webauthn-roaming"
)

// All allowed values of UserEnrollmentAuthMethod enum
var AllowedUserEnrollmentAuthMethodEnumValues = []UserEnrollmentAuthMethod{
	"authenticator",
	"guardian",
	"sms",
	"webauthn-platform",
	"webauthn-roaming",
}

func (v *UserEnrollmentAuthMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserEnrollmentAuthMethod(value)
	for _, existing := range AllowedUserEnrollmentAuthMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserEnrollmentAuthMethod", value)
}

// NewUserEnrollmentAuthMethodFromValue returns a pointer to a valid UserEnrollmentAuthMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserEnrollmentAuthMethodFromValue(v string) (*UserEnrollmentAuthMethod, error) {
	ev := UserEnrollmentAuthMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserEnrollmentAuthMethod: valid values are %v", v, AllowedUserEnrollmentAuthMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserEnrollmentAuthMethod) IsValid() bool {
	for _, existing := range AllowedUserEnrollmentAuthMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to userEnrollment_auth_method value
func (v UserEnrollmentAuthMethod) Ptr() *UserEnrollmentAuthMethod {
	return &v
}

type NullableUserEnrollmentAuthMethod struct {
	value *UserEnrollmentAuthMethod
	isSet bool
}

func (v NullableUserEnrollmentAuthMethod) Get() *UserEnrollmentAuthMethod {
	return v.value
}

func (v *NullableUserEnrollmentAuthMethod) Set(val *UserEnrollmentAuthMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableUserEnrollmentAuthMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableUserEnrollmentAuthMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserEnrollmentAuthMethod(val *UserEnrollmentAuthMethod) *NullableUserEnrollmentAuthMethod {
	return &NullableUserEnrollmentAuthMethod{value: val, isSet: true}
}

func (v NullableUserEnrollmentAuthMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserEnrollmentAuthMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
