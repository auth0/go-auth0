/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// ClientDefaultOrganization Defines the default Organization ID and flows
type ClientDefaultOrganization struct {
	// The default Organization ID to be used
	OrganizationId string `json:"organization_id"`
	// The default Organization usage
	Flows []ClientDefaultOrganizationFlowsInner `json:"flows"`
}

type _ClientDefaultOrganization ClientDefaultOrganization

// GetOrganizationId returns the OrganizationId field value
func (o *ClientDefaultOrganization) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *ClientDefaultOrganization) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *ClientDefaultOrganization) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetFlows returns the Flows field value
func (o *ClientDefaultOrganization) GetFlows() []ClientDefaultOrganizationFlowsInner {
	if o == nil {
		var ret []ClientDefaultOrganizationFlowsInner
		return ret
	}

	return o.Flows
}

// GetFlowsOk returns a tuple with the Flows field value
// and a boolean to check if the value has been set.
func (o *ClientDefaultOrganization) GetFlowsOk() ([]ClientDefaultOrganizationFlowsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Flows, true
}

// SetFlows sets field value
func (o *ClientDefaultOrganization) SetFlows(v []ClientDefaultOrganizationFlowsInner) {
	o.Flows = v
}

func (o ClientDefaultOrganization) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientDefaultOrganization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["organization_id"] = o.OrganizationId
	toSerialize["flows"] = o.Flows
	return toSerialize, nil
}

func (o *ClientDefaultOrganization) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organization_id",
		"flows",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClientDefaultOrganization := _ClientDefaultOrganization{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varClientDefaultOrganization)

	if err != nil {
		return err
	}

	*o = ClientDefaultOrganization(varClientDefaultOrganization)

	return err
}

type NullableClientDefaultOrganization struct {
	value *ClientDefaultOrganization
	isSet bool
}

func (v NullableClientDefaultOrganization) Get() *ClientDefaultOrganization {
	return v.value
}

func (v *NullableClientDefaultOrganization) Set(val *ClientDefaultOrganization) {
	v.value = val
	v.isSet = true
}

func (v NullableClientDefaultOrganization) IsSet() bool {
	return v.isSet
}

func (v *NullableClientDefaultOrganization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientDefaultOrganization(val *ClientDefaultOrganization) *NullableClientDefaultOrganization {
	return &NullableClientDefaultOrganization{value: val, isSet: true}
}

func (v NullableClientDefaultOrganization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientDefaultOrganization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
