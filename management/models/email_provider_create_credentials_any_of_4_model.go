/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// EmailProviderCreateCredentialsAnyOf4 struct for EmailProviderCreateCredentialsAnyOf4
type EmailProviderCreateCredentialsAnyOf4 struct {
	// Azure Communication Services Connection String.
	ConnectionString string `json:"connectionString"`
}

type _EmailProviderCreateCredentialsAnyOf4 EmailProviderCreateCredentialsAnyOf4

// GetConnectionString returns the ConnectionString field value
func (o *EmailProviderCreateCredentialsAnyOf4) GetConnectionString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionString
}

// GetConnectionStringOk returns a tuple with the ConnectionString field value
// and a boolean to check if the value has been set.
func (o *EmailProviderCreateCredentialsAnyOf4) GetConnectionStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionString, true
}

// SetConnectionString sets field value
func (o *EmailProviderCreateCredentialsAnyOf4) SetConnectionString(v string) {
	o.ConnectionString = v
}

func (o EmailProviderCreateCredentialsAnyOf4) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailProviderCreateCredentialsAnyOf4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectionString"] = o.ConnectionString
	return toSerialize, nil
}

func (o *EmailProviderCreateCredentialsAnyOf4) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectionString",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailProviderCreateCredentialsAnyOf4 := _EmailProviderCreateCredentialsAnyOf4{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varEmailProviderCreateCredentialsAnyOf4)

	if err != nil {
		return err
	}

	*o = EmailProviderCreateCredentialsAnyOf4(varEmailProviderCreateCredentialsAnyOf4)

	return err
}

type NullableEmailProviderCreateCredentialsAnyOf4 struct {
	value *EmailProviderCreateCredentialsAnyOf4
	isSet bool
}

func (v NullableEmailProviderCreateCredentialsAnyOf4) Get() *EmailProviderCreateCredentialsAnyOf4 {
	return v.value
}

func (v *NullableEmailProviderCreateCredentialsAnyOf4) Set(val *EmailProviderCreateCredentialsAnyOf4) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProviderCreateCredentialsAnyOf4) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProviderCreateCredentialsAnyOf4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProviderCreateCredentialsAnyOf4(val *EmailProviderCreateCredentialsAnyOf4) *NullableEmailProviderCreateCredentialsAnyOf4 {
	return &NullableEmailProviderCreateCredentialsAnyOf4{value: val, isSet: true}
}

func (v NullableEmailProviderCreateCredentialsAnyOf4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProviderCreateCredentialsAnyOf4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
