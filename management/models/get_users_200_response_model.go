/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetUsers200Response - struct for GetUsers200Response
type GetUsers200Response struct {
	GetUsers200ResponseOneOf             *GetUsers200ResponseOneOf
	ArrayOfGetUsers200ResponseOneOfInner *[]GetUsers200ResponseOneOfInner
}

// GetUsers200ResponseOneOfAsGetUsers200Response is a convenience function that returns GetUsers200ResponseOneOf wrapped in GetUsers200Response
func GetUsers200ResponseOneOfAsGetUsers200Response(v *GetUsers200ResponseOneOf) GetUsers200Response {
	return GetUsers200Response{
		GetUsers200ResponseOneOf: v,
	}
}

// []GetUsers200ResponseOneOfInnerAsGetUsers200Response is a convenience function that returns []GetUsers200ResponseOneOfInner wrapped in GetUsers200Response
func ArrayOfGetUsers200ResponseOneOfInnerAsGetUsers200Response(v *[]GetUsers200ResponseOneOfInner) GetUsers200Response {
	return GetUsers200Response{
		ArrayOfGetUsers200ResponseOneOfInner: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetUsers200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetUsers200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetUsers200ResponseOneOf)
	if err == nil {
		jsonGetUsers200ResponseOneOf, _ := json.Marshal(dst.GetUsers200ResponseOneOf)
		if string(jsonGetUsers200ResponseOneOf) == "{}" { // empty struct
			dst.GetUsers200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetUsers200ResponseOneOf); err != nil {
				dst.GetUsers200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetUsers200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfGetUsers200ResponseOneOfInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGetUsers200ResponseOneOfInner)
	if err == nil {
		jsonArrayOfGetUsers200ResponseOneOfInner, _ := json.Marshal(dst.ArrayOfGetUsers200ResponseOneOfInner)
		if string(jsonArrayOfGetUsers200ResponseOneOfInner) == "{}" { // empty struct
			dst.ArrayOfGetUsers200ResponseOneOfInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfGetUsers200ResponseOneOfInner); err != nil {
				dst.ArrayOfGetUsers200ResponseOneOfInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfGetUsers200ResponseOneOfInner = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetUsers200ResponseOneOf = nil
		dst.ArrayOfGetUsers200ResponseOneOfInner = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetUsers200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetUsers200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetUsers200Response) MarshalJSON() ([]byte, error) {
	if src.GetUsers200ResponseOneOf != nil {
		return json.Marshal(&src.GetUsers200ResponseOneOf)
	}

	if src.ArrayOfGetUsers200ResponseOneOfInner != nil {
		return json.Marshal(&src.ArrayOfGetUsers200ResponseOneOfInner)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetUsers200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetUsers200ResponseOneOf != nil {
		return obj.GetUsers200ResponseOneOf
	}

	if obj.ArrayOfGetUsers200ResponseOneOfInner != nil {
		return obj.ArrayOfGetUsers200ResponseOneOfInner
	}

	// all schemas are nil
	return nil
}

type NullableGetUsers200Response struct {
	value *GetUsers200Response
	isSet bool
}

func (v NullableGetUsers200Response) Get() *GetUsers200Response {
	return v.value
}

func (v *NullableGetUsers200Response) Set(val *GetUsers200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUsers200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUsers200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUsers200Response(val *GetUsers200Response) *NullableGetUsers200Response {
	return &NullableGetUsers200Response{value: val, isSet: true}
}

func (v NullableGetUsers200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUsers200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
