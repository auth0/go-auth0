/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ClientUpdateEncryptionKey The client's encryption key
type ClientUpdateEncryptionKey struct {
	// Encryption public key
	Pub *string `json:"pub,omitempty"`
	// Encryption certificate
	Cert *string `json:"cert,omitempty"`
	// Certificate subject
	Subject *string `json:"subject,omitempty"`
}

// GetPub returns the Pub field value if set, zero value otherwise.
func (o *ClientUpdateEncryptionKey) GetPub() string {
	if o == nil || IsNil(o.Pub) {
		var ret string
		return ret
	}
	return *o.Pub
}

// GetPubOk returns a tuple with the Pub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientUpdateEncryptionKey) GetPubOk() (*string, bool) {
	if o == nil || IsNil(o.Pub) {
		return nil, false
	}
	return o.Pub, true
}

// HasPub returns a boolean if a field has been set.
func (o *ClientUpdateEncryptionKey) HasPub() bool {
	if o != nil && !IsNil(o.Pub) {
		return true
	}

	return false
}

// SetPub gets a reference to the given string and assigns it to the Pub field.
func (o *ClientUpdateEncryptionKey) SetPub(v string) {
	o.Pub = &v
}

// GetCert returns the Cert field value if set, zero value otherwise.
func (o *ClientUpdateEncryptionKey) GetCert() string {
	if o == nil || IsNil(o.Cert) {
		var ret string
		return ret
	}
	return *o.Cert
}

// GetCertOk returns a tuple with the Cert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientUpdateEncryptionKey) GetCertOk() (*string, bool) {
	if o == nil || IsNil(o.Cert) {
		return nil, false
	}
	return o.Cert, true
}

// HasCert returns a boolean if a field has been set.
func (o *ClientUpdateEncryptionKey) HasCert() bool {
	if o != nil && !IsNil(o.Cert) {
		return true
	}

	return false
}

// SetCert gets a reference to the given string and assigns it to the Cert field.
func (o *ClientUpdateEncryptionKey) SetCert(v string) {
	o.Cert = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *ClientUpdateEncryptionKey) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientUpdateEncryptionKey) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *ClientUpdateEncryptionKey) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *ClientUpdateEncryptionKey) SetSubject(v string) {
	o.Subject = &v
}

func (o ClientUpdateEncryptionKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientUpdateEncryptionKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pub) {
		toSerialize["pub"] = o.Pub
	}
	if !IsNil(o.Cert) {
		toSerialize["cert"] = o.Cert
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	return toSerialize, nil
}

type NullableClientUpdateEncryptionKey struct {
	value *ClientUpdateEncryptionKey
	isSet bool
}

func (v NullableClientUpdateEncryptionKey) Get() *ClientUpdateEncryptionKey {
	return v.value
}

func (v *NullableClientUpdateEncryptionKey) Set(val *ClientUpdateEncryptionKey) {
	v.value = val
	v.isSet = true
}

func (v NullableClientUpdateEncryptionKey) IsSet() bool {
	return v.isSet
}

func (v *NullableClientUpdateEncryptionKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientUpdateEncryptionKey(val *ClientUpdateEncryptionKey) *NullableClientUpdateEncryptionKey {
	return &NullableClientUpdateEncryptionKey{value: val, isSet: true}
}

func (v NullableClientUpdateEncryptionKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientUpdateEncryptionKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
