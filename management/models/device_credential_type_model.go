/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DeviceCredentialType Type of credential. Can be `public_key`, `refresh_token`, or `rotating_refresh_token`.
type DeviceCredentialType string

// List of deviceCredential_type
const (
	DEVICECREDENTIALTYPE_PUBLIC_KEY             DeviceCredentialType = "public_key"
	DEVICECREDENTIALTYPE_REFRESH_TOKEN          DeviceCredentialType = "refresh_token"
	DEVICECREDENTIALTYPE_ROTATING_REFRESH_TOKEN DeviceCredentialType = "rotating_refresh_token"
)

// All allowed values of DeviceCredentialType enum
var AllowedDeviceCredentialTypeEnumValues = []DeviceCredentialType{
	"public_key",
	"refresh_token",
	"rotating_refresh_token",
}

func (v *DeviceCredentialType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceCredentialType(value)
	for _, existing := range AllowedDeviceCredentialTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceCredentialType", value)
}

// NewDeviceCredentialTypeFromValue returns a pointer to a valid DeviceCredentialType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceCredentialTypeFromValue(v string) (*DeviceCredentialType, error) {
	ev := DeviceCredentialType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceCredentialType: valid values are %v", v, AllowedDeviceCredentialTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceCredentialType) IsValid() bool {
	for _, existing := range AllowedDeviceCredentialTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to deviceCredential_type value
func (v DeviceCredentialType) Ptr() *DeviceCredentialType {
	return &v
}

type NullableDeviceCredentialType struct {
	value *DeviceCredentialType
	isSet bool
}

func (v NullableDeviceCredentialType) Get() *DeviceCredentialType {
	return v.value
}

func (v *NullableDeviceCredentialType) Set(val *DeviceCredentialType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceCredentialType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceCredentialType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceCredentialType(val *DeviceCredentialType) *NullableDeviceCredentialType {
	return &NullableDeviceCredentialType{value: val, isSet: true}
}

func (v NullableDeviceCredentialType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceCredentialType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
