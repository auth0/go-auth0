/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ResourceServerTokenEncryptionFormat Format of the encrypted JWT payload.
type ResourceServerTokenEncryptionFormat string

// List of resourceServer_token_encryption_format
const (
	RESOURCESERVERTOKENENCRYPTIONFORMAT_COMPACT_NESTED_JWE ResourceServerTokenEncryptionFormat = "compact-nested-jwe"
)

// All allowed values of ResourceServerTokenEncryptionFormat enum
var AllowedResourceServerTokenEncryptionFormatEnumValues = []ResourceServerTokenEncryptionFormat{
	"compact-nested-jwe",
}

func (v *ResourceServerTokenEncryptionFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceServerTokenEncryptionFormat(value)
	for _, existing := range AllowedResourceServerTokenEncryptionFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceServerTokenEncryptionFormat", value)
}

// NewResourceServerTokenEncryptionFormatFromValue returns a pointer to a valid ResourceServerTokenEncryptionFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceServerTokenEncryptionFormatFromValue(v string) (*ResourceServerTokenEncryptionFormat, error) {
	ev := ResourceServerTokenEncryptionFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceServerTokenEncryptionFormat: valid values are %v", v, AllowedResourceServerTokenEncryptionFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceServerTokenEncryptionFormat) IsValid() bool {
	for _, existing := range AllowedResourceServerTokenEncryptionFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to resourceServer_token_encryption_format value
func (v ResourceServerTokenEncryptionFormat) Ptr() *ResourceServerTokenEncryptionFormat {
	return &v
}

type NullableResourceServerTokenEncryptionFormat struct {
	value *ResourceServerTokenEncryptionFormat
	isSet bool
}

func (v NullableResourceServerTokenEncryptionFormat) Get() *ResourceServerTokenEncryptionFormat {
	return v.value
}

func (v *NullableResourceServerTokenEncryptionFormat) Set(val *ResourceServerTokenEncryptionFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceServerTokenEncryptionFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceServerTokenEncryptionFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceServerTokenEncryptionFormat(val *ResourceServerTokenEncryptionFormat) *NullableResourceServerTokenEncryptionFormat {
	return &NullableResourceServerTokenEncryptionFormat{value: val, isSet: true}
}

func (v NullableResourceServerTokenEncryptionFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceServerTokenEncryptionFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
