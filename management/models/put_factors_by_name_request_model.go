/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PutFactorsByNameRequest struct for PutFactorsByNameRequest
type PutFactorsByNameRequest struct {
	// Whether this factor is enabled (true) or disabled (false).
	Enabled bool `json:"enabled"`
}

type _PutFactorsByNameRequest PutFactorsByNameRequest

// GetEnabled returns the Enabled field value
func (o *PutFactorsByNameRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *PutFactorsByNameRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *PutFactorsByNameRequest) SetEnabled(v bool) {
	o.Enabled = v
}

func (o PutFactorsByNameRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutFactorsByNameRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

func (o *PutFactorsByNameRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPutFactorsByNameRequest := _PutFactorsByNameRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPutFactorsByNameRequest)

	if err != nil {
		return err
	}

	*o = PutFactorsByNameRequest(varPutFactorsByNameRequest)

	return err
}

type NullablePutFactorsByNameRequest struct {
	value *PutFactorsByNameRequest
	isSet bool
}

func (v NullablePutFactorsByNameRequest) Get() *PutFactorsByNameRequest {
	return v.value
}

func (v *NullablePutFactorsByNameRequest) Set(val *PutFactorsByNameRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutFactorsByNameRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutFactorsByNameRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutFactorsByNameRequest(val *PutFactorsByNameRequest) *NullablePutFactorsByNameRequest {
	return &NullablePutFactorsByNameRequest{value: val, isSet: true}
}

func (v NullablePutFactorsByNameRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutFactorsByNameRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
