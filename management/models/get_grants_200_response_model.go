/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetGrants200Response - struct for GetGrants200Response
type GetGrants200Response struct {
	GetGrants200ResponseOneOf *GetGrants200ResponseOneOf
	ArrayOfUserGrant          *[]UserGrant
}

// GetGrants200ResponseOneOfAsGetGrants200Response is a convenience function that returns GetGrants200ResponseOneOf wrapped in GetGrants200Response
func GetGrants200ResponseOneOfAsGetGrants200Response(v *GetGrants200ResponseOneOf) GetGrants200Response {
	return GetGrants200Response{
		GetGrants200ResponseOneOf: v,
	}
}

// []UserGrantAsGetGrants200Response is a convenience function that returns []UserGrant wrapped in GetGrants200Response
func ArrayOfUserGrantAsGetGrants200Response(v *[]UserGrant) GetGrants200Response {
	return GetGrants200Response{
		ArrayOfUserGrant: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetGrants200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetGrants200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetGrants200ResponseOneOf)
	if err == nil {
		jsonGetGrants200ResponseOneOf, _ := json.Marshal(dst.GetGrants200ResponseOneOf)
		if string(jsonGetGrants200ResponseOneOf) == "{}" { // empty struct
			dst.GetGrants200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetGrants200ResponseOneOf); err != nil {
				dst.GetGrants200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetGrants200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfUserGrant
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUserGrant)
	if err == nil {
		jsonArrayOfUserGrant, _ := json.Marshal(dst.ArrayOfUserGrant)
		if string(jsonArrayOfUserGrant) == "{}" { // empty struct
			dst.ArrayOfUserGrant = nil
		} else {
			if err = validator.Validate(dst.ArrayOfUserGrant); err != nil {
				dst.ArrayOfUserGrant = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfUserGrant = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetGrants200ResponseOneOf = nil
		dst.ArrayOfUserGrant = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetGrants200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetGrants200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetGrants200Response) MarshalJSON() ([]byte, error) {
	if src.GetGrants200ResponseOneOf != nil {
		return json.Marshal(&src.GetGrants200ResponseOneOf)
	}

	if src.ArrayOfUserGrant != nil {
		return json.Marshal(&src.ArrayOfUserGrant)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetGrants200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetGrants200ResponseOneOf != nil {
		return obj.GetGrants200ResponseOneOf
	}

	if obj.ArrayOfUserGrant != nil {
		return obj.ArrayOfUserGrant
	}

	// all schemas are nil
	return nil
}

type NullableGetGrants200Response struct {
	value *GetGrants200Response
	isSet bool
}

func (v NullableGetGrants200Response) Get() *GetGrants200Response {
	return v.value
}

func (v *NullableGetGrants200Response) Set(val *GetGrants200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGrants200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGrants200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGrants200Response(val *GetGrants200Response) *NullableGetGrants200Response {
	return &NullableGetGrants200Response{value: val, isSet: true}
}

func (v NullableGetGrants200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGrants200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
