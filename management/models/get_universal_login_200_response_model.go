/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetUniversalLogin200Response - struct for GetUniversalLogin200Response
type GetUniversalLogin200Response struct {
	GetUniversalLogin200ResponseOneOf *GetUniversalLogin200ResponseOneOf
	String                            *string
}

// GetUniversalLogin200ResponseOneOfAsGetUniversalLogin200Response is a convenience function that returns GetUniversalLogin200ResponseOneOf wrapped in GetUniversalLogin200Response
func GetUniversalLogin200ResponseOneOfAsGetUniversalLogin200Response(v *GetUniversalLogin200ResponseOneOf) GetUniversalLogin200Response {
	return GetUniversalLogin200Response{
		GetUniversalLogin200ResponseOneOf: v,
	}
}

// stringAsGetUniversalLogin200Response is a convenience function that returns string wrapped in GetUniversalLogin200Response
func StringAsGetUniversalLogin200Response(v *string) GetUniversalLogin200Response {
	return GetUniversalLogin200Response{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetUniversalLogin200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetUniversalLogin200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetUniversalLogin200ResponseOneOf)
	if err == nil {
		jsonGetUniversalLogin200ResponseOneOf, _ := json.Marshal(dst.GetUniversalLogin200ResponseOneOf)
		if string(jsonGetUniversalLogin200ResponseOneOf) == "{}" { // empty struct
			dst.GetUniversalLogin200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetUniversalLogin200ResponseOneOf); err != nil {
				dst.GetUniversalLogin200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetUniversalLogin200ResponseOneOf = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetUniversalLogin200ResponseOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetUniversalLogin200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetUniversalLogin200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetUniversalLogin200Response) MarshalJSON() ([]byte, error) {
	if src.GetUniversalLogin200ResponseOneOf != nil {
		return json.Marshal(&src.GetUniversalLogin200ResponseOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetUniversalLogin200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetUniversalLogin200ResponseOneOf != nil {
		return obj.GetUniversalLogin200ResponseOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableGetUniversalLogin200Response struct {
	value *GetUniversalLogin200Response
	isSet bool
}

func (v NullableGetUniversalLogin200Response) Get() *GetUniversalLogin200Response {
	return v.value
}

func (v *NullableGetUniversalLogin200Response) Set(val *GetUniversalLogin200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUniversalLogin200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUniversalLogin200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUniversalLogin200Response(val *GetUniversalLogin200Response) *NullableGetUniversalLogin200Response {
	return &NullableGetUniversalLogin200Response{value: val, isSet: true}
}

func (v NullableGetUniversalLogin200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUniversalLogin200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
