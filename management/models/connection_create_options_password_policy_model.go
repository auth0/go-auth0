/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ConnectionCreateOptionsPasswordPolicy Password strength level
type ConnectionCreateOptionsPasswordPolicy string

// List of connectionCreate_options_passwordPolicy
const (
	CONNECTIONCREATEOPTIONSPASSWORDPOLICY_NONE      ConnectionCreateOptionsPasswordPolicy = "none"
	CONNECTIONCREATEOPTIONSPASSWORDPOLICY_LOW       ConnectionCreateOptionsPasswordPolicy = "low"
	CONNECTIONCREATEOPTIONSPASSWORDPOLICY_FAIR      ConnectionCreateOptionsPasswordPolicy = "fair"
	CONNECTIONCREATEOPTIONSPASSWORDPOLICY_GOOD      ConnectionCreateOptionsPasswordPolicy = "good"
	CONNECTIONCREATEOPTIONSPASSWORDPOLICY_EXCELLENT ConnectionCreateOptionsPasswordPolicy = "excellent"
)

// All allowed values of ConnectionCreateOptionsPasswordPolicy enum
var AllowedConnectionCreateOptionsPasswordPolicyEnumValues = []ConnectionCreateOptionsPasswordPolicy{
	"none",
	"low",
	"fair",
	"good",
	"excellent",
}

func (v *ConnectionCreateOptionsPasswordPolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionCreateOptionsPasswordPolicy(value)
	for _, existing := range AllowedConnectionCreateOptionsPasswordPolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionCreateOptionsPasswordPolicy", value)
}

// NewConnectionCreateOptionsPasswordPolicyFromValue returns a pointer to a valid ConnectionCreateOptionsPasswordPolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionCreateOptionsPasswordPolicyFromValue(v string) (*ConnectionCreateOptionsPasswordPolicy, error) {
	ev := ConnectionCreateOptionsPasswordPolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionCreateOptionsPasswordPolicy: valid values are %v", v, AllowedConnectionCreateOptionsPasswordPolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionCreateOptionsPasswordPolicy) IsValid() bool {
	for _, existing := range AllowedConnectionCreateOptionsPasswordPolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to connectionCreate_options_passwordPolicy value
func (v ConnectionCreateOptionsPasswordPolicy) Ptr() *ConnectionCreateOptionsPasswordPolicy {
	return &v
}

type NullableConnectionCreateOptionsPasswordPolicy struct {
	value *ConnectionCreateOptionsPasswordPolicy
	isSet bool
}

func (v NullableConnectionCreateOptionsPasswordPolicy) Get() *ConnectionCreateOptionsPasswordPolicy {
	return v.value
}

func (v *NullableConnectionCreateOptionsPasswordPolicy) Set(val *ConnectionCreateOptionsPasswordPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionCreateOptionsPasswordPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionCreateOptionsPasswordPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionCreateOptionsPasswordPolicy(val *ConnectionCreateOptionsPasswordPolicy) *NullableConnectionCreateOptionsPasswordPolicy {
	return &NullableConnectionCreateOptionsPasswordPolicy{value: val, isSet: true}
}

func (v NullableConnectionCreateOptionsPasswordPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionCreateOptionsPasswordPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
