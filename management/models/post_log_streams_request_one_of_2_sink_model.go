/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PostLogStreamsRequestOneOf2Sink struct for PostLogStreamsRequestOneOf2Sink
type PostLogStreamsRequestOneOf2Sink struct {
	// Subscription ID
	AzureSubscriptionId string                                             `json:"azureSubscriptionId"`
	AzureRegion         GetLogStreams200ResponseInnerOneOf2SinkAzureRegion `json:"azureRegion"`
	// Resource Group
	AzureResourceGroup string `json:"azureResourceGroup"`
}

type _PostLogStreamsRequestOneOf2Sink PostLogStreamsRequestOneOf2Sink

// GetAzureSubscriptionId returns the AzureSubscriptionId field value
func (o *PostLogStreamsRequestOneOf2Sink) GetAzureSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AzureSubscriptionId
}

// GetAzureSubscriptionIdOk returns a tuple with the AzureSubscriptionId field value
// and a boolean to check if the value has been set.
func (o *PostLogStreamsRequestOneOf2Sink) GetAzureSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AzureSubscriptionId, true
}

// SetAzureSubscriptionId sets field value
func (o *PostLogStreamsRequestOneOf2Sink) SetAzureSubscriptionId(v string) {
	o.AzureSubscriptionId = v
}

// GetAzureRegion returns the AzureRegion field value
func (o *PostLogStreamsRequestOneOf2Sink) GetAzureRegion() GetLogStreams200ResponseInnerOneOf2SinkAzureRegion {
	if o == nil {
		var ret GetLogStreams200ResponseInnerOneOf2SinkAzureRegion
		return ret
	}

	return o.AzureRegion
}

// GetAzureRegionOk returns a tuple with the AzureRegion field value
// and a boolean to check if the value has been set.
func (o *PostLogStreamsRequestOneOf2Sink) GetAzureRegionOk() (*GetLogStreams200ResponseInnerOneOf2SinkAzureRegion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AzureRegion, true
}

// SetAzureRegion sets field value
func (o *PostLogStreamsRequestOneOf2Sink) SetAzureRegion(v GetLogStreams200ResponseInnerOneOf2SinkAzureRegion) {
	o.AzureRegion = v
}

// GetAzureResourceGroup returns the AzureResourceGroup field value
func (o *PostLogStreamsRequestOneOf2Sink) GetAzureResourceGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AzureResourceGroup
}

// GetAzureResourceGroupOk returns a tuple with the AzureResourceGroup field value
// and a boolean to check if the value has been set.
func (o *PostLogStreamsRequestOneOf2Sink) GetAzureResourceGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AzureResourceGroup, true
}

// SetAzureResourceGroup sets field value
func (o *PostLogStreamsRequestOneOf2Sink) SetAzureResourceGroup(v string) {
	o.AzureResourceGroup = v
}

func (o PostLogStreamsRequestOneOf2Sink) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostLogStreamsRequestOneOf2Sink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["azureSubscriptionId"] = o.AzureSubscriptionId
	toSerialize["azureRegion"] = o.AzureRegion
	toSerialize["azureResourceGroup"] = o.AzureResourceGroup
	return toSerialize, nil
}

func (o *PostLogStreamsRequestOneOf2Sink) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"azureSubscriptionId",
		"azureRegion",
		"azureResourceGroup",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostLogStreamsRequestOneOf2Sink := _PostLogStreamsRequestOneOf2Sink{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostLogStreamsRequestOneOf2Sink)

	if err != nil {
		return err
	}

	*o = PostLogStreamsRequestOneOf2Sink(varPostLogStreamsRequestOneOf2Sink)

	return err
}

type NullablePostLogStreamsRequestOneOf2Sink struct {
	value *PostLogStreamsRequestOneOf2Sink
	isSet bool
}

func (v NullablePostLogStreamsRequestOneOf2Sink) Get() *PostLogStreamsRequestOneOf2Sink {
	return v.value
}

func (v *NullablePostLogStreamsRequestOneOf2Sink) Set(val *PostLogStreamsRequestOneOf2Sink) {
	v.value = val
	v.isSet = true
}

func (v NullablePostLogStreamsRequestOneOf2Sink) IsSet() bool {
	return v.isSet
}

func (v *NullablePostLogStreamsRequestOneOf2Sink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostLogStreamsRequestOneOf2Sink(val *PostLogStreamsRequestOneOf2Sink) *NullablePostLogStreamsRequestOneOf2Sink {
	return &NullablePostLogStreamsRequestOneOf2Sink{value: val, isSet: true}
}

func (v NullablePostLogStreamsRequestOneOf2Sink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostLogStreamsRequestOneOf2Sink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
