/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ResourceServerConsentPolicy the model 'ResourceServerConsentPolicy'
type ResourceServerConsentPolicy string

// List of resourceServer_consent_policy
const (
	RESOURCESERVERCONSENTPOLICY_TRANSACTIONAL_AUTHORIZATION_WITH_MFA ResourceServerConsentPolicy = "transactional-authorization-with-mfa"
)

// All allowed values of ResourceServerConsentPolicy enum
var AllowedResourceServerConsentPolicyEnumValues = []ResourceServerConsentPolicy{
	"transactional-authorization-with-mfa",
}

func (v *ResourceServerConsentPolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceServerConsentPolicy(value)
	for _, existing := range AllowedResourceServerConsentPolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceServerConsentPolicy", value)
}

// NewResourceServerConsentPolicyFromValue returns a pointer to a valid ResourceServerConsentPolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceServerConsentPolicyFromValue(v string) (*ResourceServerConsentPolicy, error) {
	ev := ResourceServerConsentPolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceServerConsentPolicy: valid values are %v", v, AllowedResourceServerConsentPolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceServerConsentPolicy) IsValid() bool {
	for _, existing := range AllowedResourceServerConsentPolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to resourceServer_consent_policy value
func (v ResourceServerConsentPolicy) Ptr() *ResourceServerConsentPolicy {
	return &v
}

type NullableResourceServerConsentPolicy struct {
	value *ResourceServerConsentPolicy
	isSet bool
}

func (v NullableResourceServerConsentPolicy) Get() *ResourceServerConsentPolicy {
	return v.value
}

func (v *NullableResourceServerConsentPolicy) Set(val *ResourceServerConsentPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceServerConsentPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceServerConsentPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceServerConsentPolicy(val *ResourceServerConsentPolicy) *NullableResourceServerConsentPolicy {
	return &NullableResourceServerConsentPolicy{value: val, isSet: true}
}

func (v NullableResourceServerConsentPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceServerConsentPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
