/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// GetErrors200ResponseOneOfInner struct for GetErrors200ResponseOneOfInner
type GetErrors200ResponseOneOfInner struct {
	// User, as provided in the import file
	User map[string]interface{} `json:"user"`
	// Errors importing the user.
	Errors []GetErrors200ResponseOneOfInnerErrorsInner `json:"errors"`
}

type _GetErrors200ResponseOneOfInner GetErrors200ResponseOneOfInner

// GetUser returns the User field value
func (o *GetErrors200ResponseOneOfInner) GetUser() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *GetErrors200ResponseOneOfInner) GetUserOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.User, true
}

// SetUser sets field value
func (o *GetErrors200ResponseOneOfInner) SetUser(v map[string]interface{}) {
	o.User = v
}

// GetErrors returns the Errors field value
func (o *GetErrors200ResponseOneOfInner) GetErrors() []GetErrors200ResponseOneOfInnerErrorsInner {
	if o == nil {
		var ret []GetErrors200ResponseOneOfInnerErrorsInner
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *GetErrors200ResponseOneOfInner) GetErrorsOk() ([]GetErrors200ResponseOneOfInnerErrorsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *GetErrors200ResponseOneOfInner) SetErrors(v []GetErrors200ResponseOneOfInnerErrorsInner) {
	o.Errors = v
}

func (o GetErrors200ResponseOneOfInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetErrors200ResponseOneOfInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	toSerialize["errors"] = o.Errors
	return toSerialize, nil
}

func (o *GetErrors200ResponseOneOfInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
		"errors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetErrors200ResponseOneOfInner := _GetErrors200ResponseOneOfInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetErrors200ResponseOneOfInner)

	if err != nil {
		return err
	}

	*o = GetErrors200ResponseOneOfInner(varGetErrors200ResponseOneOfInner)

	return err
}

type NullableGetErrors200ResponseOneOfInner struct {
	value *GetErrors200ResponseOneOfInner
	isSet bool
}

func (v NullableGetErrors200ResponseOneOfInner) Get() *GetErrors200ResponseOneOfInner {
	return v.value
}

func (v *NullableGetErrors200ResponseOneOfInner) Set(val *GetErrors200ResponseOneOfInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetErrors200ResponseOneOfInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetErrors200ResponseOneOfInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetErrors200ResponseOneOfInner(val *GetErrors200ResponseOneOfInner) *NullableGetErrors200ResponseOneOfInner {
	return &NullableGetErrors200ResponseOneOfInner{value: val, isSet: true}
}

func (v NullableGetErrors200ResponseOneOfInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetErrors200ResponseOneOfInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
