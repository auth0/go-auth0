/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// TenantSettingsDeviceFlow Device Flow configuration
type TenantSettingsDeviceFlow struct {
	Charset TenantSettingsDeviceFlowCharset `json:"charset"`
	// Mask used to format a generated User Code into a friendly, readable format.
	Mask string `json:"mask"`
}

type _TenantSettingsDeviceFlow TenantSettingsDeviceFlow

// GetCharset returns the Charset field value
func (o *TenantSettingsDeviceFlow) GetCharset() TenantSettingsDeviceFlowCharset {
	if o == nil {
		var ret TenantSettingsDeviceFlowCharset
		return ret
	}

	return o.Charset
}

// GetCharsetOk returns a tuple with the Charset field value
// and a boolean to check if the value has been set.
func (o *TenantSettingsDeviceFlow) GetCharsetOk() (*TenantSettingsDeviceFlowCharset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Charset, true
}

// SetCharset sets field value
func (o *TenantSettingsDeviceFlow) SetCharset(v TenantSettingsDeviceFlowCharset) {
	o.Charset = v
}

// GetMask returns the Mask field value
func (o *TenantSettingsDeviceFlow) GetMask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mask
}

// GetMaskOk returns a tuple with the Mask field value
// and a boolean to check if the value has been set.
func (o *TenantSettingsDeviceFlow) GetMaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mask, true
}

// SetMask sets field value
func (o *TenantSettingsDeviceFlow) SetMask(v string) {
	o.Mask = v
}

func (o TenantSettingsDeviceFlow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantSettingsDeviceFlow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["charset"] = o.Charset
	toSerialize["mask"] = o.Mask
	return toSerialize, nil
}

func (o *TenantSettingsDeviceFlow) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"charset",
		"mask",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTenantSettingsDeviceFlow := _TenantSettingsDeviceFlow{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTenantSettingsDeviceFlow)

	if err != nil {
		return err
	}

	*o = TenantSettingsDeviceFlow(varTenantSettingsDeviceFlow)

	return err
}

type NullableTenantSettingsDeviceFlow struct {
	value *TenantSettingsDeviceFlow
	isSet bool
}

func (v NullableTenantSettingsDeviceFlow) Get() *TenantSettingsDeviceFlow {
	return v.value
}

func (v *NullableTenantSettingsDeviceFlow) Set(val *TenantSettingsDeviceFlow) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantSettingsDeviceFlow) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantSettingsDeviceFlow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantSettingsDeviceFlow(val *TenantSettingsDeviceFlow) *NullableTenantSettingsDeviceFlow {
	return &NullableTenantSettingsDeviceFlow{value: val, isSet: true}
}

func (v NullableTenantSettingsDeviceFlow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantSettingsDeviceFlow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
