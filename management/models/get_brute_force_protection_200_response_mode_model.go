/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// GetBruteForceProtection200ResponseMode Account Lockout: Determines whether or not IP address is used when counting failed attempts.           Possible values: <code>count_per_identifier_and_ip</code>, <code>count_per_identifier</code>.
type GetBruteForceProtection200ResponseMode string

// List of get_brute_force_protection_200_response_mode
const (
	GETBRUTEFORCEPROTECTION200RESPONSEMODE_IDENTIFIER_AND_IP GetBruteForceProtection200ResponseMode = "count_per_identifier_and_ip"
	GETBRUTEFORCEPROTECTION200RESPONSEMODE_IDENTIFIER        GetBruteForceProtection200ResponseMode = "count_per_identifier"
)

// All allowed values of GetBruteForceProtection200ResponseMode enum
var AllowedGetBruteForceProtection200ResponseModeEnumValues = []GetBruteForceProtection200ResponseMode{
	"count_per_identifier_and_ip",
	"count_per_identifier",
}

func (v *GetBruteForceProtection200ResponseMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GetBruteForceProtection200ResponseMode(value)
	for _, existing := range AllowedGetBruteForceProtection200ResponseModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GetBruteForceProtection200ResponseMode", value)
}

// NewGetBruteForceProtection200ResponseModeFromValue returns a pointer to a valid GetBruteForceProtection200ResponseMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGetBruteForceProtection200ResponseModeFromValue(v string) (*GetBruteForceProtection200ResponseMode, error) {
	ev := GetBruteForceProtection200ResponseMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GetBruteForceProtection200ResponseMode: valid values are %v", v, AllowedGetBruteForceProtection200ResponseModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GetBruteForceProtection200ResponseMode) IsValid() bool {
	for _, existing := range AllowedGetBruteForceProtection200ResponseModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to get_brute_force_protection_200_response_mode value
func (v GetBruteForceProtection200ResponseMode) Ptr() *GetBruteForceProtection200ResponseMode {
	return &v
}

type NullableGetBruteForceProtection200ResponseMode struct {
	value *GetBruteForceProtection200ResponseMode
	isSet bool
}

func (v NullableGetBruteForceProtection200ResponseMode) Get() *GetBruteForceProtection200ResponseMode {
	return v.value
}

func (v *NullableGetBruteForceProtection200ResponseMode) Set(val *GetBruteForceProtection200ResponseMode) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBruteForceProtection200ResponseMode) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBruteForceProtection200ResponseMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBruteForceProtection200ResponseMode(val *GetBruteForceProtection200ResponseMode) *NullableGetBruteForceProtection200ResponseMode {
	return &NullableGetBruteForceProtection200ResponseMode{value: val, isSet: true}
}

func (v NullableGetBruteForceProtection200ResponseMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBruteForceProtection200ResponseMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
