/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// GetPnProviders200Response struct for GetPnProviders200Response
type GetPnProviders200Response struct {
	Provider GetPnProviders200ResponseProvider `json:"provider"`
}

type _GetPnProviders200Response GetPnProviders200Response

// GetProvider returns the Provider field value
func (o *GetPnProviders200Response) GetProvider() GetPnProviders200ResponseProvider {
	if o == nil {
		var ret GetPnProviders200ResponseProvider
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *GetPnProviders200Response) GetProviderOk() (*GetPnProviders200ResponseProvider, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *GetPnProviders200Response) SetProvider(v GetPnProviders200ResponseProvider) {
	o.Provider = v
}

func (o GetPnProviders200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetPnProviders200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["provider"] = o.Provider
	return toSerialize, nil
}

func (o *GetPnProviders200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetPnProviders200Response := _GetPnProviders200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetPnProviders200Response)

	if err != nil {
		return err
	}

	*o = GetPnProviders200Response(varGetPnProviders200Response)

	return err
}

type NullableGetPnProviders200Response struct {
	value *GetPnProviders200Response
	isSet bool
}

func (v NullableGetPnProviders200Response) Get() *GetPnProviders200Response {
	return v.value
}

func (v *NullableGetPnProviders200Response) Set(val *GetPnProviders200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPnProviders200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPnProviders200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPnProviders200Response(val *GetPnProviders200Response) *NullableGetPnProviders200Response {
	return &NullableGetPnProviders200Response{value: val, isSet: true}
}

func (v NullableGetPnProviders200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPnProviders200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
