/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ConnectionUpdate struct for ConnectionUpdate
type ConnectionUpdate struct {
	// The connection name used in the new universal login experience. If display_name is not included in the request, the field will be overwritten with the name value.
	DisplayName *string                         `json:"display_name,omitempty"`
	Options     NullableConnectionUpdateOptions `json:"options,omitempty"`
	// The identifiers of the clients for which the connection is to be enabled. If the property is not specified, no clients are enabled. If the array is empty, the connection will be disabled for every client.
	EnabledClients []string `json:"enabled_clients,omitempty"`
	// <code>true</code> promotes to a domain-level connection so that third-party applications can use it. <code>false</code> does not promote the connection, so only first-party applications with the connection enabled can use it. (Defaults to <code>false</code>.)
	IsDomainConnection *bool `json:"is_domain_connection,omitempty"`
	// Enables showing a button for the connection in the login page (new experience only). If false, it will be usable only by HRD. (Defaults to <code>false</code>.)
	ShowAsButton *bool `json:"show_as_button,omitempty"`
	// Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm.
	Realms []string `json:"realms,omitempty"`
	// Metadata associated with the connection in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ConnectionUpdate) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionUpdate) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ConnectionUpdate) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ConnectionUpdate) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetOptions returns the Options field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectionUpdate) GetOptions() ConnectionUpdateOptions {
	if o == nil || IsNil(o.Options.Get()) {
		var ret ConnectionUpdateOptions
		return ret
	}
	return *o.Options.Get()
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectionUpdate) GetOptionsOk() (*ConnectionUpdateOptions, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options.Get(), o.Options.IsSet()
}

// HasOptions returns a boolean if a field has been set.
func (o *ConnectionUpdate) HasOptions() bool {
	if o != nil && o.Options.IsSet() {
		return true
	}

	return false
}

// SetOptions gets a reference to the given NullableConnectionUpdateOptions and assigns it to the Options field.
func (o *ConnectionUpdate) SetOptions(v ConnectionUpdateOptions) {
	o.Options.Set(&v)
}

// SetOptionsNil sets the value for Options to be an explicit nil
func (o *ConnectionUpdate) SetOptionsNil() {
	o.Options.Set(nil)
}

// UnsetOptions ensures that no value is present for Options, not even an explicit nil
func (o *ConnectionUpdate) UnsetOptions() {
	o.Options.Unset()
}

// GetEnabledClients returns the EnabledClients field value if set, zero value otherwise.
func (o *ConnectionUpdate) GetEnabledClients() []string {
	if o == nil || IsNil(o.EnabledClients) {
		var ret []string
		return ret
	}
	return o.EnabledClients
}

// GetEnabledClientsOk returns a tuple with the EnabledClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionUpdate) GetEnabledClientsOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledClients) {
		return nil, false
	}
	return o.EnabledClients, true
}

// HasEnabledClients returns a boolean if a field has been set.
func (o *ConnectionUpdate) HasEnabledClients() bool {
	if o != nil && !IsNil(o.EnabledClients) {
		return true
	}

	return false
}

// SetEnabledClients gets a reference to the given []string and assigns it to the EnabledClients field.
func (o *ConnectionUpdate) SetEnabledClients(v []string) {
	o.EnabledClients = v
}

// GetIsDomainConnection returns the IsDomainConnection field value if set, zero value otherwise.
func (o *ConnectionUpdate) GetIsDomainConnection() bool {
	if o == nil || IsNil(o.IsDomainConnection) {
		var ret bool
		return ret
	}
	return *o.IsDomainConnection
}

// GetIsDomainConnectionOk returns a tuple with the IsDomainConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionUpdate) GetIsDomainConnectionOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDomainConnection) {
		return nil, false
	}
	return o.IsDomainConnection, true
}

// HasIsDomainConnection returns a boolean if a field has been set.
func (o *ConnectionUpdate) HasIsDomainConnection() bool {
	if o != nil && !IsNil(o.IsDomainConnection) {
		return true
	}

	return false
}

// SetIsDomainConnection gets a reference to the given bool and assigns it to the IsDomainConnection field.
func (o *ConnectionUpdate) SetIsDomainConnection(v bool) {
	o.IsDomainConnection = &v
}

// GetShowAsButton returns the ShowAsButton field value if set, zero value otherwise.
func (o *ConnectionUpdate) GetShowAsButton() bool {
	if o == nil || IsNil(o.ShowAsButton) {
		var ret bool
		return ret
	}
	return *o.ShowAsButton
}

// GetShowAsButtonOk returns a tuple with the ShowAsButton field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionUpdate) GetShowAsButtonOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowAsButton) {
		return nil, false
	}
	return o.ShowAsButton, true
}

// HasShowAsButton returns a boolean if a field has been set.
func (o *ConnectionUpdate) HasShowAsButton() bool {
	if o != nil && !IsNil(o.ShowAsButton) {
		return true
	}

	return false
}

// SetShowAsButton gets a reference to the given bool and assigns it to the ShowAsButton field.
func (o *ConnectionUpdate) SetShowAsButton(v bool) {
	o.ShowAsButton = &v
}

// GetRealms returns the Realms field value if set, zero value otherwise.
func (o *ConnectionUpdate) GetRealms() []string {
	if o == nil || IsNil(o.Realms) {
		var ret []string
		return ret
	}
	return o.Realms
}

// GetRealmsOk returns a tuple with the Realms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionUpdate) GetRealmsOk() ([]string, bool) {
	if o == nil || IsNil(o.Realms) {
		return nil, false
	}
	return o.Realms, true
}

// HasRealms returns a boolean if a field has been set.
func (o *ConnectionUpdate) HasRealms() bool {
	if o != nil && !IsNil(o.Realms) {
		return true
	}

	return false
}

// SetRealms gets a reference to the given []string and assigns it to the Realms field.
func (o *ConnectionUpdate) SetRealms(v []string) {
	o.Realms = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ConnectionUpdate) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionUpdate) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ConnectionUpdate) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *ConnectionUpdate) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o ConnectionUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Options.IsSet() {
		toSerialize["options"] = o.Options.Get()
	}
	if !IsNil(o.EnabledClients) {
		toSerialize["enabled_clients"] = o.EnabledClients
	}
	if !IsNil(o.IsDomainConnection) {
		toSerialize["is_domain_connection"] = o.IsDomainConnection
	}
	if !IsNil(o.ShowAsButton) {
		toSerialize["show_as_button"] = o.ShowAsButton
	}
	if !IsNil(o.Realms) {
		toSerialize["realms"] = o.Realms
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableConnectionUpdate struct {
	value *ConnectionUpdate
	isSet bool
}

func (v NullableConnectionUpdate) Get() *ConnectionUpdate {
	return v.value
}

func (v *NullableConnectionUpdate) Set(val *ConnectionUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionUpdate(val *ConnectionUpdate) *NullableConnectionUpdate {
	return &NullableConnectionUpdate{value: val, isSet: true}
}

func (v NullableConnectionUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
