/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// EmailProviderCreate struct for EmailProviderCreate
type EmailProviderCreate struct {
	Name EmailProviderCreateName `json:"name"`
	// Whether the provider is enabled (true) or disabled (false).
	Enabled *bool `json:"enabled,omitempty"`
	// Email address to use as \"from\" when no other address specified.
	DefaultFromAddress *string                        `json:"default_from_address,omitempty"`
	Credentials        EmailProviderCreateCredentials `json:"credentials"`
	// Specific provider setting
	Settings map[string]interface{} `json:"settings,omitempty"`
}

type _EmailProviderCreate EmailProviderCreate

// GetName returns the Name field value
func (o *EmailProviderCreate) GetName() EmailProviderCreateName {
	if o == nil {
		var ret EmailProviderCreateName
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EmailProviderCreate) GetNameOk() (*EmailProviderCreateName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EmailProviderCreate) SetName(v EmailProviderCreateName) {
	o.Name = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *EmailProviderCreate) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailProviderCreate) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *EmailProviderCreate) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *EmailProviderCreate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDefaultFromAddress returns the DefaultFromAddress field value if set, zero value otherwise.
func (o *EmailProviderCreate) GetDefaultFromAddress() string {
	if o == nil || IsNil(o.DefaultFromAddress) {
		var ret string
		return ret
	}
	return *o.DefaultFromAddress
}

// GetDefaultFromAddressOk returns a tuple with the DefaultFromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailProviderCreate) GetDefaultFromAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultFromAddress) {
		return nil, false
	}
	return o.DefaultFromAddress, true
}

// HasDefaultFromAddress returns a boolean if a field has been set.
func (o *EmailProviderCreate) HasDefaultFromAddress() bool {
	if o != nil && !IsNil(o.DefaultFromAddress) {
		return true
	}

	return false
}

// SetDefaultFromAddress gets a reference to the given string and assigns it to the DefaultFromAddress field.
func (o *EmailProviderCreate) SetDefaultFromAddress(v string) {
	o.DefaultFromAddress = &v
}

// GetCredentials returns the Credentials field value
func (o *EmailProviderCreate) GetCredentials() EmailProviderCreateCredentials {
	if o == nil {
		var ret EmailProviderCreateCredentials
		return ret
	}

	return o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value
// and a boolean to check if the value has been set.
func (o *EmailProviderCreate) GetCredentialsOk() (*EmailProviderCreateCredentials, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Credentials, true
}

// SetCredentials sets field value
func (o *EmailProviderCreate) SetCredentials(v EmailProviderCreateCredentials) {
	o.Credentials = v
}

// GetSettings returns the Settings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailProviderCreate) GetSettings() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailProviderCreate) GetSettingsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Settings) {
		return map[string]interface{}{}, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *EmailProviderCreate) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]interface{} and assigns it to the Settings field.
func (o *EmailProviderCreate) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

func (o EmailProviderCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailProviderCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.DefaultFromAddress) {
		toSerialize["default_from_address"] = o.DefaultFromAddress
	}
	toSerialize["credentials"] = o.Credentials
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	return toSerialize, nil
}

func (o *EmailProviderCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"credentials",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailProviderCreate := _EmailProviderCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailProviderCreate)

	if err != nil {
		return err
	}

	*o = EmailProviderCreate(varEmailProviderCreate)

	return err
}

type NullableEmailProviderCreate struct {
	value *EmailProviderCreate
	isSet bool
}

func (v NullableEmailProviderCreate) Get() *EmailProviderCreate {
	return v.value
}

func (v *NullableEmailProviderCreate) Set(val *EmailProviderCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProviderCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProviderCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProviderCreate(val *EmailProviderCreate) *NullableEmailProviderCreate {
	return &NullableEmailProviderCreate{value: val, isSet: true}
}

func (v NullableEmailProviderCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProviderCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
