/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PostAuthenticationMethodsRequestType the model 'PostAuthenticationMethodsRequestType'
type PostAuthenticationMethodsRequestType string

// List of post_authentication_methods_request_type
const (
	POSTAUTHENTICATIONMETHODSREQUESTTYPE_PHONE            PostAuthenticationMethodsRequestType = "phone"
	POSTAUTHENTICATIONMETHODSREQUESTTYPE_EMAIL            PostAuthenticationMethodsRequestType = "email"
	POSTAUTHENTICATIONMETHODSREQUESTTYPE_TOTP             PostAuthenticationMethodsRequestType = "totp"
	POSTAUTHENTICATIONMETHODSREQUESTTYPE_WEBAUTHN_ROAMING PostAuthenticationMethodsRequestType = "webauthn-roaming"
	POSTAUTHENTICATIONMETHODSREQUESTTYPE_PASSKEY          PostAuthenticationMethodsRequestType = "passkey"
)

// All allowed values of PostAuthenticationMethodsRequestType enum
var AllowedPostAuthenticationMethodsRequestTypeEnumValues = []PostAuthenticationMethodsRequestType{
	"phone",
	"email",
	"totp",
	"webauthn-roaming",
	"passkey",
}

func (v *PostAuthenticationMethodsRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PostAuthenticationMethodsRequestType(value)
	for _, existing := range AllowedPostAuthenticationMethodsRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PostAuthenticationMethodsRequestType", value)
}

// NewPostAuthenticationMethodsRequestTypeFromValue returns a pointer to a valid PostAuthenticationMethodsRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPostAuthenticationMethodsRequestTypeFromValue(v string) (*PostAuthenticationMethodsRequestType, error) {
	ev := PostAuthenticationMethodsRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PostAuthenticationMethodsRequestType: valid values are %v", v, AllowedPostAuthenticationMethodsRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PostAuthenticationMethodsRequestType) IsValid() bool {
	for _, existing := range AllowedPostAuthenticationMethodsRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to post_authentication_methods_request_type value
func (v PostAuthenticationMethodsRequestType) Ptr() *PostAuthenticationMethodsRequestType {
	return &v
}

type NullablePostAuthenticationMethodsRequestType struct {
	value *PostAuthenticationMethodsRequestType
	isSet bool
}

func (v NullablePostAuthenticationMethodsRequestType) Get() *PostAuthenticationMethodsRequestType {
	return v.value
}

func (v *NullablePostAuthenticationMethodsRequestType) Set(val *PostAuthenticationMethodsRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullablePostAuthenticationMethodsRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullablePostAuthenticationMethodsRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostAuthenticationMethodsRequestType(val *PostAuthenticationMethodsRequestType) *NullablePostAuthenticationMethodsRequestType {
	return &NullablePostAuthenticationMethodsRequestType{value: val, isSet: true}
}

func (v NullablePostAuthenticationMethodsRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostAuthenticationMethodsRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
