/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// EmailProvider struct for EmailProvider
type EmailProvider struct {
	GetPayloadSchema interface{} `json:"getPayloadSchema,omitempty"`
}

// GetGetPayloadSchema returns the GetPayloadSchema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailProvider) GetGetPayloadSchema() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.GetPayloadSchema
}

// GetGetPayloadSchemaOk returns a tuple with the GetPayloadSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailProvider) GetGetPayloadSchemaOk() (*interface{}, bool) {
	if o == nil || IsNil(o.GetPayloadSchema) {
		return nil, false
	}
	return &o.GetPayloadSchema, true
}

// HasGetPayloadSchema returns a boolean if a field has been set.
func (o *EmailProvider) HasGetPayloadSchema() bool {
	if o != nil && !IsNil(o.GetPayloadSchema) {
		return true
	}

	return false
}

// SetGetPayloadSchema gets a reference to the given interface{} and assigns it to the GetPayloadSchema field.
func (o *EmailProvider) SetGetPayloadSchema(v interface{}) {
	o.GetPayloadSchema = v
}

func (o EmailProvider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.GetPayloadSchema != nil {
		toSerialize["getPayloadSchema"] = o.GetPayloadSchema
	}
	return toSerialize, nil
}

type NullableEmailProvider struct {
	value *EmailProvider
	isSet bool
}

func (v NullableEmailProvider) Get() *EmailProvider {
	return v.value
}

func (v *NullableEmailProvider) Set(val *EmailProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProvider(val *EmailProvider) *NullableEmailProvider {
	return &NullableEmailProvider{value: val, isSet: true}
}

func (v NullableEmailProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
