/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
)

// EmailProvider struct for EmailProvider
type EmailProvider struct {
	// Name of the email provider. Can be `mailgun`, `mandrill`, `sendgrid`, `ses`, `sparkpost`, `smtp`, `azure_cs`, or `ms365`.
	Name string `json:"name"`
	// Whether the provider is enabled (true) or disabled (false).
	Enabled bool `json:"enabled"`
	// Email address to use as \"from\" when no other address specified.
	DefaultFromAddress string                   `json:"default_from_address"`
	Credentials        EmailProviderCredentials `json:"credentials"`
	// Specific provider setting
	Settings map[string]interface{} `json:"settings"`
}

type _EmailProvider EmailProvider

// GetName returns the Name field value
func (o *EmailProvider) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EmailProvider) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EmailProvider) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value
func (o *EmailProvider) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *EmailProvider) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *EmailProvider) SetEnabled(v bool) {
	o.Enabled = v
}

// GetDefaultFromAddress returns the DefaultFromAddress field value
func (o *EmailProvider) GetDefaultFromAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultFromAddress
}

// GetDefaultFromAddressOk returns a tuple with the DefaultFromAddress field value
// and a boolean to check if the value has been set.
func (o *EmailProvider) GetDefaultFromAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultFromAddress, true
}

// SetDefaultFromAddress sets field value
func (o *EmailProvider) SetDefaultFromAddress(v string) {
	o.DefaultFromAddress = v
}

// GetCredentials returns the Credentials field value
func (o *EmailProvider) GetCredentials() EmailProviderCredentials {
	if o == nil {
		var ret EmailProviderCredentials
		return ret
	}

	return o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value
// and a boolean to check if the value has been set.
func (o *EmailProvider) GetCredentialsOk() (*EmailProviderCredentials, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Credentials, true
}

// SetCredentials sets field value
func (o *EmailProvider) SetCredentials(v EmailProviderCredentials) {
	o.Credentials = v
}

// GetSettings returns the Settings field value
func (o *EmailProvider) GetSettings() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *EmailProvider) GetSettingsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Settings, true
}

// SetSettings sets field value
func (o *EmailProvider) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

func (o EmailProvider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["enabled"] = o.Enabled
	toSerialize["default_from_address"] = o.DefaultFromAddress
	toSerialize["credentials"] = o.Credentials
	toSerialize["settings"] = o.Settings
	return toSerialize, nil
}

func (o *EmailProvider) UnmarshalJSON(data []byte) (err error) {
	varEmailProvider := _EmailProvider{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailProvider)

	if err != nil {
		return err
	}

	*o = EmailProvider(varEmailProvider)

	return err
}

type NullableEmailProvider struct {
	value *EmailProvider
	isSet bool
}

func (v NullableEmailProvider) Get() *EmailProvider {
	return v.value
}

func (v *NullableEmailProvider) Set(val *EmailProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProvider(val *EmailProvider) *NullableEmailProvider {
	return &NullableEmailProvider{value: val, isSet: true}
}

func (v NullableEmailProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
