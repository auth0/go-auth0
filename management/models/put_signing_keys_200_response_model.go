/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PutSigningKeys200Response struct for PutSigningKeys200Response
type PutSigningKeys200Response struct {
	// Revoked key certificate
	Cert string `json:"cert"`
	// Revoked key id
	Kid                  string `json:"kid"`
	AdditionalProperties map[string]interface{}
}

type _PutSigningKeys200Response PutSigningKeys200Response

// GetCert returns the Cert field value
func (o *PutSigningKeys200Response) GetCert() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cert
}

// GetCertOk returns a tuple with the Cert field value
// and a boolean to check if the value has been set.
func (o *PutSigningKeys200Response) GetCertOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cert, true
}

// SetCert sets field value
func (o *PutSigningKeys200Response) SetCert(v string) {
	o.Cert = v
}

// GetKid returns the Kid field value
func (o *PutSigningKeys200Response) GetKid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kid
}

// GetKidOk returns a tuple with the Kid field value
// and a boolean to check if the value has been set.
func (o *PutSigningKeys200Response) GetKidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kid, true
}

// SetKid sets field value
func (o *PutSigningKeys200Response) SetKid(v string) {
	o.Kid = v
}

func (o PutSigningKeys200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutSigningKeys200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cert"] = o.Cert
	toSerialize["kid"] = o.Kid

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PutSigningKeys200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cert",
		"kid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPutSigningKeys200Response := _PutSigningKeys200Response{}

	err = json.Unmarshal(data, &varPutSigningKeys200Response)

	if err != nil {
		return err
	}

	*o = PutSigningKeys200Response(varPutSigningKeys200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cert")
		delete(additionalProperties, "kid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePutSigningKeys200Response struct {
	value *PutSigningKeys200Response
	isSet bool
}

func (v NullablePutSigningKeys200Response) Get() *PutSigningKeys200Response {
	return v.value
}

func (v *NullablePutSigningKeys200Response) Set(val *PutSigningKeys200Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePutSigningKeys200Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePutSigningKeys200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutSigningKeys200Response(val *PutSigningKeys200Response) *NullablePutSigningKeys200Response {
	return &NullablePutSigningKeys200Response{value: val, isSet: true}
}

func (v NullablePutSigningKeys200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutSigningKeys200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
