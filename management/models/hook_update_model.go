/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// HookUpdate struct for HookUpdate
type HookUpdate struct {
	// Name of this hook.
	Name *string `json:"name,omitempty"`
	// Code to be executed when this hook runs.
	Script *string `json:"script,omitempty"`
	// Whether this hook will be executed (true) or ignored (false).
	Enabled *bool `json:"enabled,omitempty"`
	// Dependencies of this hook used by webtask server.
	Dependencies map[string]interface{} `json:"dependencies,omitempty"`
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HookUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HookUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HookUpdate) SetName(v string) {
	o.Name = &v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *HookUpdate) GetScript() string {
	if o == nil || IsNil(o.Script) {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookUpdate) GetScriptOk() (*string, bool) {
	if o == nil || IsNil(o.Script) {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *HookUpdate) HasScript() bool {
	if o != nil && !IsNil(o.Script) {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *HookUpdate) SetScript(v string) {
	o.Script = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *HookUpdate) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *HookUpdate) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *HookUpdate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *HookUpdate) GetDependencies() map[string]interface{} {
	if o == nil || IsNil(o.Dependencies) {
		var ret map[string]interface{}
		return ret
	}
	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookUpdate) GetDependenciesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Dependencies) {
		return map[string]interface{}{}, false
	}
	return o.Dependencies, true
}

// HasDependencies returns a boolean if a field has been set.
func (o *HookUpdate) HasDependencies() bool {
	if o != nil && !IsNil(o.Dependencies) {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given map[string]interface{} and assigns it to the Dependencies field.
func (o *HookUpdate) SetDependencies(v map[string]interface{}) {
	o.Dependencies = v
}

func (o HookUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HookUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Script) {
		toSerialize["script"] = o.Script
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Dependencies) {
		toSerialize["dependencies"] = o.Dependencies
	}
	return toSerialize, nil
}

type NullableHookUpdate struct {
	value *HookUpdate
	isSet bool
}

func (v NullableHookUpdate) Get() *HookUpdate {
	return v.value
}

func (v *NullableHookUpdate) Set(val *HookUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableHookUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableHookUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHookUpdate(val *HookUpdate) *NullableHookUpdate {
	return &NullableHookUpdate{value: val, isSet: true}
}

func (v NullableHookUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHookUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
