/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// RuleUpdate struct for RuleUpdate
type RuleUpdate struct {
	// Code to be executed when this rule runs.
	Script *string `json:"script,omitempty"`
	// Name of this rule.
	Name *string `json:"name,omitempty"`
	// Order that this rule should execute in relative to other rules. Lower-valued rules execute first.
	Order *float32 `json:"order,omitempty"`
	// Whether the rule is enabled (true), or disabled (false).
	Enabled *bool `json:"enabled,omitempty"`
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *RuleUpdate) GetScript() string {
	if o == nil || IsNil(o.Script) {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetScriptOk() (*string, bool) {
	if o == nil || IsNil(o.Script) {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *RuleUpdate) HasScript() bool {
	if o != nil && !IsNil(o.Script) {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *RuleUpdate) SetScript(v string) {
	o.Script = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RuleUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RuleUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RuleUpdate) SetName(v string) {
	o.Name = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *RuleUpdate) GetOrder() float32 {
	if o == nil || IsNil(o.Order) {
		var ret float32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetOrderOk() (*float32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *RuleUpdate) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given float32 and assigns it to the Order field.
func (o *RuleUpdate) SetOrder(v float32) {
	o.Order = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RuleUpdate) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RuleUpdate) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RuleUpdate) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o RuleUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Script) {
		toSerialize["script"] = o.Script
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableRuleUpdate struct {
	value *RuleUpdate
	isSet bool
}

func (v NullableRuleUpdate) Get() *RuleUpdate {
	return v.value
}

func (v *NullableRuleUpdate) Set(val *RuleUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleUpdate(val *RuleUpdate) *NullableRuleUpdate {
	return &NullableRuleUpdate{value: val, isSet: true}
}

func (v NullableRuleUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
