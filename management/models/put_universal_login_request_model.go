/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// PutUniversalLoginRequest - struct for PutUniversalLoginRequest
type PutUniversalLoginRequest struct {
	PutUniversalLoginRequestOneOf *PutUniversalLoginRequestOneOf
	String                        *string
}

// PutUniversalLoginRequestOneOfAsPutUniversalLoginRequest is a convenience function that returns PutUniversalLoginRequestOneOf wrapped in PutUniversalLoginRequest
func PutUniversalLoginRequestOneOfAsPutUniversalLoginRequest(v *PutUniversalLoginRequestOneOf) PutUniversalLoginRequest {
	return PutUniversalLoginRequest{
		PutUniversalLoginRequestOneOf: v,
	}
}

// stringAsPutUniversalLoginRequest is a convenience function that returns string wrapped in PutUniversalLoginRequest
func StringAsPutUniversalLoginRequest(v *string) PutUniversalLoginRequest {
	return PutUniversalLoginRequest{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PutUniversalLoginRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PutUniversalLoginRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.PutUniversalLoginRequestOneOf)
	if err == nil {
		jsonPutUniversalLoginRequestOneOf, _ := json.Marshal(dst.PutUniversalLoginRequestOneOf)
		if string(jsonPutUniversalLoginRequestOneOf) == "{}" { // empty struct
			dst.PutUniversalLoginRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.PutUniversalLoginRequestOneOf); err != nil {
				dst.PutUniversalLoginRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.PutUniversalLoginRequestOneOf = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PutUniversalLoginRequestOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PutUniversalLoginRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PutUniversalLoginRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PutUniversalLoginRequest) MarshalJSON() ([]byte, error) {
	if src.PutUniversalLoginRequestOneOf != nil {
		return json.Marshal(&src.PutUniversalLoginRequestOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PutUniversalLoginRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.PutUniversalLoginRequestOneOf != nil {
		return obj.PutUniversalLoginRequestOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullablePutUniversalLoginRequest struct {
	value *PutUniversalLoginRequest
	isSet bool
}

func (v NullablePutUniversalLoginRequest) Get() *PutUniversalLoginRequest {
	return v.value
}

func (v *NullablePutUniversalLoginRequest) Set(val *PutUniversalLoginRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutUniversalLoginRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutUniversalLoginRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutUniversalLoginRequest(val *PutUniversalLoginRequest) *NullablePutUniversalLoginRequest {
	return &NullablePutUniversalLoginRequest{value: val, isSet: true}
}

func (v NullablePutUniversalLoginRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutUniversalLoginRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
