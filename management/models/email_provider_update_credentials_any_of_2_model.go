/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// EmailProviderUpdateCredentialsAnyOf2 struct for EmailProviderUpdateCredentialsAnyOf2
type EmailProviderUpdateCredentialsAnyOf2 struct {
	SmtpHost *EmailProviderUpdateCredentialsAnyOf2SmtpHost `json:"smtp_host,omitempty"`
	// SMTP port.
	SmtpPort *int32 `json:"smtp_port,omitempty"`
	// SMTP username.
	SmtpUser *string `json:"smtp_user,omitempty"`
	// SMTP password.
	SmtpPass *string `json:"smtp_pass,omitempty"`
}

// GetSmtpHost returns the SmtpHost field value if set, zero value otherwise.
func (o *EmailProviderUpdateCredentialsAnyOf2) GetSmtpHost() EmailProviderUpdateCredentialsAnyOf2SmtpHost {
	if o == nil || IsNil(o.SmtpHost) {
		var ret EmailProviderUpdateCredentialsAnyOf2SmtpHost
		return ret
	}
	return *o.SmtpHost
}

// GetSmtpHostOk returns a tuple with the SmtpHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailProviderUpdateCredentialsAnyOf2) GetSmtpHostOk() (*EmailProviderUpdateCredentialsAnyOf2SmtpHost, bool) {
	if o == nil || IsNil(o.SmtpHost) {
		return nil, false
	}
	return o.SmtpHost, true
}

// HasSmtpHost returns a boolean if a field has been set.
func (o *EmailProviderUpdateCredentialsAnyOf2) HasSmtpHost() bool {
	if o != nil && !IsNil(o.SmtpHost) {
		return true
	}

	return false
}

// SetSmtpHost gets a reference to the given EmailProviderUpdateCredentialsAnyOf2SmtpHost and assigns it to the SmtpHost field.
func (o *EmailProviderUpdateCredentialsAnyOf2) SetSmtpHost(v EmailProviderUpdateCredentialsAnyOf2SmtpHost) {
	o.SmtpHost = &v
}

// GetSmtpPort returns the SmtpPort field value if set, zero value otherwise.
func (o *EmailProviderUpdateCredentialsAnyOf2) GetSmtpPort() int32 {
	if o == nil || IsNil(o.SmtpPort) {
		var ret int32
		return ret
	}
	return *o.SmtpPort
}

// GetSmtpPortOk returns a tuple with the SmtpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailProviderUpdateCredentialsAnyOf2) GetSmtpPortOk() (*int32, bool) {
	if o == nil || IsNil(o.SmtpPort) {
		return nil, false
	}
	return o.SmtpPort, true
}

// HasSmtpPort returns a boolean if a field has been set.
func (o *EmailProviderUpdateCredentialsAnyOf2) HasSmtpPort() bool {
	if o != nil && !IsNil(o.SmtpPort) {
		return true
	}

	return false
}

// SetSmtpPort gets a reference to the given int32 and assigns it to the SmtpPort field.
func (o *EmailProviderUpdateCredentialsAnyOf2) SetSmtpPort(v int32) {
	o.SmtpPort = &v
}

// GetSmtpUser returns the SmtpUser field value if set, zero value otherwise.
func (o *EmailProviderUpdateCredentialsAnyOf2) GetSmtpUser() string {
	if o == nil || IsNil(o.SmtpUser) {
		var ret string
		return ret
	}
	return *o.SmtpUser
}

// GetSmtpUserOk returns a tuple with the SmtpUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailProviderUpdateCredentialsAnyOf2) GetSmtpUserOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpUser) {
		return nil, false
	}
	return o.SmtpUser, true
}

// HasSmtpUser returns a boolean if a field has been set.
func (o *EmailProviderUpdateCredentialsAnyOf2) HasSmtpUser() bool {
	if o != nil && !IsNil(o.SmtpUser) {
		return true
	}

	return false
}

// SetSmtpUser gets a reference to the given string and assigns it to the SmtpUser field.
func (o *EmailProviderUpdateCredentialsAnyOf2) SetSmtpUser(v string) {
	o.SmtpUser = &v
}

// GetSmtpPass returns the SmtpPass field value if set, zero value otherwise.
func (o *EmailProviderUpdateCredentialsAnyOf2) GetSmtpPass() string {
	if o == nil || IsNil(o.SmtpPass) {
		var ret string
		return ret
	}
	return *o.SmtpPass
}

// GetSmtpPassOk returns a tuple with the SmtpPass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailProviderUpdateCredentialsAnyOf2) GetSmtpPassOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpPass) {
		return nil, false
	}
	return o.SmtpPass, true
}

// HasSmtpPass returns a boolean if a field has been set.
func (o *EmailProviderUpdateCredentialsAnyOf2) HasSmtpPass() bool {
	if o != nil && !IsNil(o.SmtpPass) {
		return true
	}

	return false
}

// SetSmtpPass gets a reference to the given string and assigns it to the SmtpPass field.
func (o *EmailProviderUpdateCredentialsAnyOf2) SetSmtpPass(v string) {
	o.SmtpPass = &v
}

func (o EmailProviderUpdateCredentialsAnyOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailProviderUpdateCredentialsAnyOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SmtpHost) {
		toSerialize["smtp_host"] = o.SmtpHost
	}
	if !IsNil(o.SmtpPort) {
		toSerialize["smtp_port"] = o.SmtpPort
	}
	if !IsNil(o.SmtpUser) {
		toSerialize["smtp_user"] = o.SmtpUser
	}
	if !IsNil(o.SmtpPass) {
		toSerialize["smtp_pass"] = o.SmtpPass
	}
	return toSerialize, nil
}

type NullableEmailProviderUpdateCredentialsAnyOf2 struct {
	value *EmailProviderUpdateCredentialsAnyOf2
	isSet bool
}

func (v NullableEmailProviderUpdateCredentialsAnyOf2) Get() *EmailProviderUpdateCredentialsAnyOf2 {
	return v.value
}

func (v *NullableEmailProviderUpdateCredentialsAnyOf2) Set(val *EmailProviderUpdateCredentialsAnyOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProviderUpdateCredentialsAnyOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProviderUpdateCredentialsAnyOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProviderUpdateCredentialsAnyOf2(val *EmailProviderUpdateCredentialsAnyOf2) *NullableEmailProviderUpdateCredentialsAnyOf2 {
	return &NullableEmailProviderUpdateCredentialsAnyOf2{value: val, isSet: true}
}

func (v NullableEmailProviderUpdateCredentialsAnyOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProviderUpdateCredentialsAnyOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
