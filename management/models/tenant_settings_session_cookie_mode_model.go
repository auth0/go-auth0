/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TenantSettingsSessionCookieMode Behavior of the session cookie
type TenantSettingsSessionCookieMode string

// List of tenantSettings_session_cookie_mode
const (
	TENANTSETTINGSSESSIONCOOKIEMODE_PERSISTENT     TenantSettingsSessionCookieMode = "persistent"
	TENANTSETTINGSSESSIONCOOKIEMODE_NON_PERSISTENT TenantSettingsSessionCookieMode = "non-persistent"
)

// All allowed values of TenantSettingsSessionCookieMode enum
var AllowedTenantSettingsSessionCookieModeEnumValues = []TenantSettingsSessionCookieMode{
	"persistent",
	"non-persistent",
}

func (v *TenantSettingsSessionCookieMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TenantSettingsSessionCookieMode(value)
	for _, existing := range AllowedTenantSettingsSessionCookieModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TenantSettingsSessionCookieMode", value)
}

// NewTenantSettingsSessionCookieModeFromValue returns a pointer to a valid TenantSettingsSessionCookieMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTenantSettingsSessionCookieModeFromValue(v string) (*TenantSettingsSessionCookieMode, error) {
	ev := TenantSettingsSessionCookieMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TenantSettingsSessionCookieMode: valid values are %v", v, AllowedTenantSettingsSessionCookieModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TenantSettingsSessionCookieMode) IsValid() bool {
	for _, existing := range AllowedTenantSettingsSessionCookieModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to tenantSettings_session_cookie_mode value
func (v TenantSettingsSessionCookieMode) Ptr() *TenantSettingsSessionCookieMode {
	return &v
}

type NullableTenantSettingsSessionCookieMode struct {
	value *TenantSettingsSessionCookieMode
	isSet bool
}

func (v NullableTenantSettingsSessionCookieMode) Get() *TenantSettingsSessionCookieMode {
	return v.value
}

func (v *NullableTenantSettingsSessionCookieMode) Set(val *TenantSettingsSessionCookieMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantSettingsSessionCookieMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantSettingsSessionCookieMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantSettingsSessionCookieMode(val *TenantSettingsSessionCookieMode) *NullableTenantSettingsSessionCookieMode {
	return &NullableTenantSettingsSessionCookieMode{value: val, isSet: true}
}

func (v NullableTenantSettingsSessionCookieMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantSettingsSessionCookieMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
