/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// GetMessageTypes200Response struct for GetMessageTypes200Response
type GetMessageTypes200Response struct {
	// The list of phone factors to enable on the tenant. Can include `sms` and `voice`.
	MessageTypes []GetMessageTypes200ResponseMessageTypesInner `json:"message_types"`
}

type _GetMessageTypes200Response GetMessageTypes200Response

// GetMessageTypes returns the MessageTypes field value
func (o *GetMessageTypes200Response) GetMessageTypes() []GetMessageTypes200ResponseMessageTypesInner {
	if o == nil {
		var ret []GetMessageTypes200ResponseMessageTypesInner
		return ret
	}

	return o.MessageTypes
}

// GetMessageTypesOk returns a tuple with the MessageTypes field value
// and a boolean to check if the value has been set.
func (o *GetMessageTypes200Response) GetMessageTypesOk() ([]GetMessageTypes200ResponseMessageTypesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessageTypes, true
}

// SetMessageTypes sets field value
func (o *GetMessageTypes200Response) SetMessageTypes(v []GetMessageTypes200ResponseMessageTypesInner) {
	o.MessageTypes = v
}

func (o GetMessageTypes200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetMessageTypes200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message_types"] = o.MessageTypes
	return toSerialize, nil
}

func (o *GetMessageTypes200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message_types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetMessageTypes200Response := _GetMessageTypes200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetMessageTypes200Response)

	if err != nil {
		return err
	}

	*o = GetMessageTypes200Response(varGetMessageTypes200Response)

	return err
}

type NullableGetMessageTypes200Response struct {
	value *GetMessageTypes200Response
	isSet bool
}

func (v NullableGetMessageTypes200Response) Get() *GetMessageTypes200Response {
	return v.value
}

func (v *NullableGetMessageTypes200Response) Set(val *GetMessageTypes200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMessageTypes200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMessageTypes200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMessageTypes200Response(val *GetMessageTypes200Response) *NullableGetMessageTypes200Response {
	return &NullableGetMessageTypes200Response{value: val, isSet: true}
}

func (v NullableGetMessageTypes200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMessageTypes200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
