/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// GetLogStreams200ResponseInnerOneOfSink struct for GetLogStreams200ResponseInnerOneOfSink
type GetLogStreams200ResponseInnerOneOfSink struct {
	// HTTP Authorization header
	HttpAuthorization *string                                                  `json:"httpAuthorization,omitempty"`
	HttpContentFormat *GetLogStreams200ResponseInnerOneOfSinkHttpContentFormat `json:"httpContentFormat,omitempty"`
	// HTTP Content-Type header
	HttpContentType *string `json:"httpContentType,omitempty"`
	// HTTP endpoint
	HttpEndpoint string `json:"httpEndpoint"`
	// custom HTTP headers
	HttpCustomHeaders []GetLogStreams200ResponseInnerOneOfSinkHttpCustomHeadersInner `json:"httpCustomHeaders,omitempty"`
}

type _GetLogStreams200ResponseInnerOneOfSink GetLogStreams200ResponseInnerOneOfSink

// GetHttpAuthorization returns the HttpAuthorization field value if set, zero value otherwise.
func (o *GetLogStreams200ResponseInnerOneOfSink) GetHttpAuthorization() string {
	if o == nil || IsNil(o.HttpAuthorization) {
		var ret string
		return ret
	}
	return *o.HttpAuthorization
}

// GetHttpAuthorizationOk returns a tuple with the HttpAuthorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLogStreams200ResponseInnerOneOfSink) GetHttpAuthorizationOk() (*string, bool) {
	if o == nil || IsNil(o.HttpAuthorization) {
		return nil, false
	}
	return o.HttpAuthorization, true
}

// HasHttpAuthorization returns a boolean if a field has been set.
func (o *GetLogStreams200ResponseInnerOneOfSink) HasHttpAuthorization() bool {
	if o != nil && !IsNil(o.HttpAuthorization) {
		return true
	}

	return false
}

// SetHttpAuthorization gets a reference to the given string and assigns it to the HttpAuthorization field.
func (o *GetLogStreams200ResponseInnerOneOfSink) SetHttpAuthorization(v string) {
	o.HttpAuthorization = &v
}

// GetHttpContentFormat returns the HttpContentFormat field value if set, zero value otherwise.
func (o *GetLogStreams200ResponseInnerOneOfSink) GetHttpContentFormat() GetLogStreams200ResponseInnerOneOfSinkHttpContentFormat {
	if o == nil || IsNil(o.HttpContentFormat) {
		var ret GetLogStreams200ResponseInnerOneOfSinkHttpContentFormat
		return ret
	}
	return *o.HttpContentFormat
}

// GetHttpContentFormatOk returns a tuple with the HttpContentFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLogStreams200ResponseInnerOneOfSink) GetHttpContentFormatOk() (*GetLogStreams200ResponseInnerOneOfSinkHttpContentFormat, bool) {
	if o == nil || IsNil(o.HttpContentFormat) {
		return nil, false
	}
	return o.HttpContentFormat, true
}

// HasHttpContentFormat returns a boolean if a field has been set.
func (o *GetLogStreams200ResponseInnerOneOfSink) HasHttpContentFormat() bool {
	if o != nil && !IsNil(o.HttpContentFormat) {
		return true
	}

	return false
}

// SetHttpContentFormat gets a reference to the given GetLogStreams200ResponseInnerOneOfSinkHttpContentFormat and assigns it to the HttpContentFormat field.
func (o *GetLogStreams200ResponseInnerOneOfSink) SetHttpContentFormat(v GetLogStreams200ResponseInnerOneOfSinkHttpContentFormat) {
	o.HttpContentFormat = &v
}

// GetHttpContentType returns the HttpContentType field value if set, zero value otherwise.
func (o *GetLogStreams200ResponseInnerOneOfSink) GetHttpContentType() string {
	if o == nil || IsNil(o.HttpContentType) {
		var ret string
		return ret
	}
	return *o.HttpContentType
}

// GetHttpContentTypeOk returns a tuple with the HttpContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLogStreams200ResponseInnerOneOfSink) GetHttpContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HttpContentType) {
		return nil, false
	}
	return o.HttpContentType, true
}

// HasHttpContentType returns a boolean if a field has been set.
func (o *GetLogStreams200ResponseInnerOneOfSink) HasHttpContentType() bool {
	if o != nil && !IsNil(o.HttpContentType) {
		return true
	}

	return false
}

// SetHttpContentType gets a reference to the given string and assigns it to the HttpContentType field.
func (o *GetLogStreams200ResponseInnerOneOfSink) SetHttpContentType(v string) {
	o.HttpContentType = &v
}

// GetHttpEndpoint returns the HttpEndpoint field value
func (o *GetLogStreams200ResponseInnerOneOfSink) GetHttpEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HttpEndpoint
}

// GetHttpEndpointOk returns a tuple with the HttpEndpoint field value
// and a boolean to check if the value has been set.
func (o *GetLogStreams200ResponseInnerOneOfSink) GetHttpEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpEndpoint, true
}

// SetHttpEndpoint sets field value
func (o *GetLogStreams200ResponseInnerOneOfSink) SetHttpEndpoint(v string) {
	o.HttpEndpoint = v
}

// GetHttpCustomHeaders returns the HttpCustomHeaders field value if set, zero value otherwise.
func (o *GetLogStreams200ResponseInnerOneOfSink) GetHttpCustomHeaders() []GetLogStreams200ResponseInnerOneOfSinkHttpCustomHeadersInner {
	if o == nil || IsNil(o.HttpCustomHeaders) {
		var ret []GetLogStreams200ResponseInnerOneOfSinkHttpCustomHeadersInner
		return ret
	}
	return o.HttpCustomHeaders
}

// GetHttpCustomHeadersOk returns a tuple with the HttpCustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLogStreams200ResponseInnerOneOfSink) GetHttpCustomHeadersOk() ([]GetLogStreams200ResponseInnerOneOfSinkHttpCustomHeadersInner, bool) {
	if o == nil || IsNil(o.HttpCustomHeaders) {
		return nil, false
	}
	return o.HttpCustomHeaders, true
}

// HasHttpCustomHeaders returns a boolean if a field has been set.
func (o *GetLogStreams200ResponseInnerOneOfSink) HasHttpCustomHeaders() bool {
	if o != nil && !IsNil(o.HttpCustomHeaders) {
		return true
	}

	return false
}

// SetHttpCustomHeaders gets a reference to the given []GetLogStreams200ResponseInnerOneOfSinkHttpCustomHeadersInner and assigns it to the HttpCustomHeaders field.
func (o *GetLogStreams200ResponseInnerOneOfSink) SetHttpCustomHeaders(v []GetLogStreams200ResponseInnerOneOfSinkHttpCustomHeadersInner) {
	o.HttpCustomHeaders = v
}

func (o GetLogStreams200ResponseInnerOneOfSink) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetLogStreams200ResponseInnerOneOfSink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HttpAuthorization) {
		toSerialize["httpAuthorization"] = o.HttpAuthorization
	}
	if !IsNil(o.HttpContentFormat) {
		toSerialize["httpContentFormat"] = o.HttpContentFormat
	}
	if !IsNil(o.HttpContentType) {
		toSerialize["httpContentType"] = o.HttpContentType
	}
	toSerialize["httpEndpoint"] = o.HttpEndpoint
	if !IsNil(o.HttpCustomHeaders) {
		toSerialize["httpCustomHeaders"] = o.HttpCustomHeaders
	}
	return toSerialize, nil
}

func (o *GetLogStreams200ResponseInnerOneOfSink) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"httpEndpoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetLogStreams200ResponseInnerOneOfSink := _GetLogStreams200ResponseInnerOneOfSink{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetLogStreams200ResponseInnerOneOfSink)

	if err != nil {
		return err
	}

	*o = GetLogStreams200ResponseInnerOneOfSink(varGetLogStreams200ResponseInnerOneOfSink)

	return err
}

type NullableGetLogStreams200ResponseInnerOneOfSink struct {
	value *GetLogStreams200ResponseInnerOneOfSink
	isSet bool
}

func (v NullableGetLogStreams200ResponseInnerOneOfSink) Get() *GetLogStreams200ResponseInnerOneOfSink {
	return v.value
}

func (v *NullableGetLogStreams200ResponseInnerOneOfSink) Set(val *GetLogStreams200ResponseInnerOneOfSink) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLogStreams200ResponseInnerOneOfSink) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLogStreams200ResponseInnerOneOfSink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLogStreams200ResponseInnerOneOfSink(val *GetLogStreams200ResponseInnerOneOfSink) *NullableGetLogStreams200ResponseInnerOneOfSink {
	return &NullableGetLogStreams200ResponseInnerOneOfSink{value: val, isSet: true}
}

func (v NullableGetLogStreams200ResponseInnerOneOfSink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLogStreams200ResponseInnerOneOfSink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
