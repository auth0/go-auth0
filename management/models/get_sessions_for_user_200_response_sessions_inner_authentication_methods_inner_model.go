/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner Authentication signal details
type GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner struct {
	// One of: \"federated\", \"passkey\", \"pwd\", \"sms\", \"email\", \"mfa\", \"mock\" or a custom method denoted by a URL
	Name      string                                                                        `json:"name"`
	Timestamp GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp `json:"timestamp"`
	// A specific MFA factor. Only present when \"name\" is set to \"mfa\"
	Type                 string `json:"^type$"`
	AdditionalProperties map[string]interface{}
}

type _GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner

// GetName returns the Name field value
func (o *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) SetName(v string) {
	o.Name = v
}

// GetTimestamp returns the Timestamp field value
func (o *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) GetTimestamp() GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp {
	if o == nil {
		var ret GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) GetTimestampOk() (*GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) SetTimestamp(v GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInnerTimestamp) {
	o.Timestamp = v
}

// GetType returns the Type field value
func (o *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) SetType(v string) {
	o.Type = v
}

func (o GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["^type$"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) UnmarshalJSON(data []byte) (err error) {
	varGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner := _GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner{}

	err = json.Unmarshal(data, &varGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner)

	if err != nil {
		return err
	}

	*o = GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner(varGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "^type$")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner struct {
	value *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner
	isSet bool
}

func (v NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) Get() *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner {
	return v.value
}

func (v *NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) Set(val *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner(val *GetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) *NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner {
	return &NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner{value: val, isSet: true}
}

func (v NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSessionsForUser200ResponseSessionsInnerAuthenticationMethodsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
