/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// DeviceCredential struct for DeviceCredential
type DeviceCredential struct {
	// ID of this device.
	Id *string `json:"id,omitempty"`
	// User agent for this device
	DeviceName *string `json:"device_name,omitempty"`
	// Unique identifier for the device. NOTE: This field is generally not populated for refresh_tokens and rotating_refresh_tokens
	DeviceId *string               `json:"device_id,omitempty"`
	Type     *DeviceCredentialType `json:"type,omitempty"`
	// user_id this credential is associated with.
	UserId *string `json:"user_id,omitempty"`
	// client_id of the client (application) this credential is for.
	ClientId *string `json:"client_id,omitempty"`
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceCredential) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCredential) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceCredential) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceCredential) SetId(v string) {
	o.Id = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *DeviceCredential) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCredential) GetDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *DeviceCredential) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *DeviceCredential) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *DeviceCredential) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCredential) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *DeviceCredential) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *DeviceCredential) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DeviceCredential) GetType() DeviceCredentialType {
	if o == nil || IsNil(o.Type) {
		var ret DeviceCredentialType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCredential) GetTypeOk() (*DeviceCredentialType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DeviceCredential) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DeviceCredentialType and assigns it to the Type field.
func (o *DeviceCredential) SetType(v DeviceCredentialType) {
	o.Type = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *DeviceCredential) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCredential) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DeviceCredential) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *DeviceCredential) SetUserId(v string) {
	o.UserId = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *DeviceCredential) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCredential) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *DeviceCredential) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *DeviceCredential) SetClientId(v string) {
	o.ClientId = &v
}

func (o DeviceCredential) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceCredential) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DeviceName) {
		toSerialize["device_name"] = o.DeviceName
	}
	if !IsNil(o.DeviceId) {
		toSerialize["device_id"] = o.DeviceId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.ClientId) {
		toSerialize["client_id"] = o.ClientId
	}
	return toSerialize, nil
}

type NullableDeviceCredential struct {
	value *DeviceCredential
	isSet bool
}

func (v NullableDeviceCredential) Get() *DeviceCredential {
	return v.value
}

func (v *NullableDeviceCredential) Set(val *DeviceCredential) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceCredential) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceCredential) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceCredential(val *DeviceCredential) *NullableDeviceCredential {
	return &NullableDeviceCredential{value: val, isSet: true}
}

func (v NullableDeviceCredential) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceCredential) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
