/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DeleteMultifactorByProviderProviderParameter the model 'DeleteMultifactorByProviderProviderParameter'
type DeleteMultifactorByProviderProviderParameter string

// List of delete_multifactor_by_provider_provider_parameter
const (
	DELETEMULTIFACTORBYPROVIDERPROVIDERPARAMETER_DUO                  DeleteMultifactorByProviderProviderParameter = "duo"
	DELETEMULTIFACTORBYPROVIDERPROVIDERPARAMETER_GOOGLE_AUTHENTICATOR DeleteMultifactorByProviderProviderParameter = "google-authenticator"
)

// All allowed values of DeleteMultifactorByProviderProviderParameter enum
var AllowedDeleteMultifactorByProviderProviderParameterEnumValues = []DeleteMultifactorByProviderProviderParameter{
	"duo",
	"google-authenticator",
}

func (v *DeleteMultifactorByProviderProviderParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeleteMultifactorByProviderProviderParameter(value)
	for _, existing := range AllowedDeleteMultifactorByProviderProviderParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeleteMultifactorByProviderProviderParameter", value)
}

// NewDeleteMultifactorByProviderProviderParameterFromValue returns a pointer to a valid DeleteMultifactorByProviderProviderParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeleteMultifactorByProviderProviderParameterFromValue(v string) (*DeleteMultifactorByProviderProviderParameter, error) {
	ev := DeleteMultifactorByProviderProviderParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeleteMultifactorByProviderProviderParameter: valid values are %v", v, AllowedDeleteMultifactorByProviderProviderParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeleteMultifactorByProviderProviderParameter) IsValid() bool {
	for _, existing := range AllowedDeleteMultifactorByProviderProviderParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to delete_multifactor_by_provider_provider_parameter value
func (v DeleteMultifactorByProviderProviderParameter) Ptr() *DeleteMultifactorByProviderProviderParameter {
	return &v
}

type NullableDeleteMultifactorByProviderProviderParameter struct {
	value *DeleteMultifactorByProviderProviderParameter
	isSet bool
}

func (v NullableDeleteMultifactorByProviderProviderParameter) Get() *DeleteMultifactorByProviderProviderParameter {
	return v.value
}

func (v *NullableDeleteMultifactorByProviderProviderParameter) Set(val *DeleteMultifactorByProviderProviderParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteMultifactorByProviderProviderParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteMultifactorByProviderProviderParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteMultifactorByProviderProviderParameter(val *DeleteMultifactorByProviderProviderParameter) *NullableDeleteMultifactorByProviderProviderParameter {
	return &NullableDeleteMultifactorByProviderProviderParameter{value: val, isSet: true}
}

func (v NullableDeleteMultifactorByProviderProviderParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteMultifactorByProviderProviderParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
