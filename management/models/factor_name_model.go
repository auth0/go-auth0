/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// FactorName Factor name. Can be `sms`, `push-notification`, `email`, `duo` `otp` `webauthn-roaming`, `webauthn-platform`, or `recovery-code`.
type FactorName string

// List of factor_name
const (
	FACTORNAME_PUSH_NOTIFICATION FactorName = "push-notification"
	FACTORNAME_SMS               FactorName = "sms"
	FACTORNAME_EMAIL             FactorName = "email"
	FACTORNAME_DUO               FactorName = "duo"
	FACTORNAME_OTP               FactorName = "otp"
	FACTORNAME_WEBAUTHN_ROAMING  FactorName = "webauthn-roaming"
	FACTORNAME_WEBAUTHN_PLATFORM FactorName = "webauthn-platform"
	FACTORNAME_RECOVERY_CODE     FactorName = "recovery-code"
)

// All allowed values of FactorName enum
var AllowedFactorNameEnumValues = []FactorName{
	"push-notification",
	"sms",
	"email",
	"duo",
	"otp",
	"webauthn-roaming",
	"webauthn-platform",
	"recovery-code",
}

func (v *FactorName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FactorName(value)
	for _, existing := range AllowedFactorNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FactorName", value)
}

// NewFactorNameFromValue returns a pointer to a valid FactorName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFactorNameFromValue(v string) (*FactorName, error) {
	ev := FactorName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FactorName: valid values are %v", v, AllowedFactorNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FactorName) IsValid() bool {
	for _, existing := range AllowedFactorNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to factor_name value
func (v FactorName) Ptr() *FactorName {
	return &v
}

type NullableFactorName struct {
	value *FactorName
	isSet bool
}

func (v NullableFactorName) Get() *FactorName {
	return v.value
}

func (v *NullableFactorName) Set(val *FactorName) {
	v.value = val
	v.isSet = true
}

func (v NullableFactorName) IsSet() bool {
	return v.isSet
}

func (v *NullableFactorName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFactorName(val *FactorName) *NullableFactorName {
	return &NullableFactorName{value: val, isSet: true}
}

func (v NullableFactorName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFactorName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
