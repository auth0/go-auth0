/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetErrors200Response - struct for GetErrors200Response
type GetErrors200Response struct {
	Job                                   *Job
	ArrayOfGetErrors200ResponseOneOfInner *[]GetErrors200ResponseOneOfInner
}

// JobAsGetErrors200Response is a convenience function that returns Job wrapped in GetErrors200Response
func JobAsGetErrors200Response(v *Job) GetErrors200Response {
	return GetErrors200Response{
		Job: v,
	}
}

// []GetErrors200ResponseOneOfInnerAsGetErrors200Response is a convenience function that returns []GetErrors200ResponseOneOfInner wrapped in GetErrors200Response
func ArrayOfGetErrors200ResponseOneOfInnerAsGetErrors200Response(v *[]GetErrors200ResponseOneOfInner) GetErrors200Response {
	return GetErrors200Response{
		ArrayOfGetErrors200ResponseOneOfInner: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetErrors200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Job
	err = newStrictDecoder(data).Decode(&dst.Job)
	if err == nil {
		jsonJob, _ := json.Marshal(dst.Job)
		if string(jsonJob) == "{}" { // empty struct
			dst.Job = nil
		} else {
			if err = validator.Validate(dst.Job); err != nil {
				dst.Job = nil
			} else {
				match++
			}
		}
	} else {
		dst.Job = nil
	}

	// try to unmarshal data into ArrayOfGetErrors200ResponseOneOfInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGetErrors200ResponseOneOfInner)
	if err == nil {
		jsonArrayOfGetErrors200ResponseOneOfInner, _ := json.Marshal(dst.ArrayOfGetErrors200ResponseOneOfInner)
		if string(jsonArrayOfGetErrors200ResponseOneOfInner) == "{}" { // empty struct
			dst.ArrayOfGetErrors200ResponseOneOfInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfGetErrors200ResponseOneOfInner); err != nil {
				dst.ArrayOfGetErrors200ResponseOneOfInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfGetErrors200ResponseOneOfInner = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Job = nil
		dst.ArrayOfGetErrors200ResponseOneOfInner = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetErrors200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetErrors200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetErrors200Response) MarshalJSON() ([]byte, error) {
	if src.Job != nil {
		return json.Marshal(&src.Job)
	}

	if src.ArrayOfGetErrors200ResponseOneOfInner != nil {
		return json.Marshal(&src.ArrayOfGetErrors200ResponseOneOfInner)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetErrors200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Job != nil {
		return obj.Job
	}

	if obj.ArrayOfGetErrors200ResponseOneOfInner != nil {
		return obj.ArrayOfGetErrors200ResponseOneOfInner
	}

	// all schemas are nil
	return nil
}

type NullableGetErrors200Response struct {
	value *GetErrors200Response
	isSet bool
}

func (v NullableGetErrors200Response) Get() *GetErrors200Response {
	return v.value
}

func (v *NullableGetErrors200Response) Set(val *GetErrors200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetErrors200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetErrors200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetErrors200Response(val *GetErrors200Response) *NullableGetErrors200Response {
	return &NullableGetErrors200Response{value: val, isSet: true}
}

func (v NullableGetErrors200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetErrors200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
