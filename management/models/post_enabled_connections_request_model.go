/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
)

// PostEnabledConnectionsRequest struct for PostEnabledConnectionsRequest
type PostEnabledConnectionsRequest struct {
	// Single connection ID to add to the organization.
	ConnectionId string `json:"connection_id"`
	// When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
	AssignMembershipOnLogin *bool `json:"assign_membership_on_login,omitempty"`
	// Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false.
	IsSignupEnabled *bool `json:"is_signup_enabled,omitempty"`
	// Determines whether a connection should be displayed on this organizationâ€™s login prompt. Only applicable for enterprise connections. Default: true.
	ShowAsButton *bool `json:"show_as_button,omitempty"`
}

type _PostEnabledConnectionsRequest PostEnabledConnectionsRequest

// GetConnectionId returns the ConnectionId field value
func (o *PostEnabledConnectionsRequest) GetConnectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *PostEnabledConnectionsRequest) GetConnectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *PostEnabledConnectionsRequest) SetConnectionId(v string) {
	o.ConnectionId = v
}

// GetAssignMembershipOnLogin returns the AssignMembershipOnLogin field value if set, zero value otherwise.
func (o *PostEnabledConnectionsRequest) GetAssignMembershipOnLogin() bool {
	if o == nil || IsNil(o.AssignMembershipOnLogin) {
		var ret bool
		return ret
	}
	return *o.AssignMembershipOnLogin
}

// GetAssignMembershipOnLoginOk returns a tuple with the AssignMembershipOnLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEnabledConnectionsRequest) GetAssignMembershipOnLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.AssignMembershipOnLogin) {
		return nil, false
	}
	return o.AssignMembershipOnLogin, true
}

// HasAssignMembershipOnLogin returns a boolean if a field has been set.
func (o *PostEnabledConnectionsRequest) HasAssignMembershipOnLogin() bool {
	if o != nil && !IsNil(o.AssignMembershipOnLogin) {
		return true
	}

	return false
}

// SetAssignMembershipOnLogin gets a reference to the given bool and assigns it to the AssignMembershipOnLogin field.
func (o *PostEnabledConnectionsRequest) SetAssignMembershipOnLogin(v bool) {
	o.AssignMembershipOnLogin = &v
}

// GetIsSignupEnabled returns the IsSignupEnabled field value if set, zero value otherwise.
func (o *PostEnabledConnectionsRequest) GetIsSignupEnabled() bool {
	if o == nil || IsNil(o.IsSignupEnabled) {
		var ret bool
		return ret
	}
	return *o.IsSignupEnabled
}

// GetIsSignupEnabledOk returns a tuple with the IsSignupEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEnabledConnectionsRequest) GetIsSignupEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSignupEnabled) {
		return nil, false
	}
	return o.IsSignupEnabled, true
}

// HasIsSignupEnabled returns a boolean if a field has been set.
func (o *PostEnabledConnectionsRequest) HasIsSignupEnabled() bool {
	if o != nil && !IsNil(o.IsSignupEnabled) {
		return true
	}

	return false
}

// SetIsSignupEnabled gets a reference to the given bool and assigns it to the IsSignupEnabled field.
func (o *PostEnabledConnectionsRequest) SetIsSignupEnabled(v bool) {
	o.IsSignupEnabled = &v
}

// GetShowAsButton returns the ShowAsButton field value if set, zero value otherwise.
func (o *PostEnabledConnectionsRequest) GetShowAsButton() bool {
	if o == nil || IsNil(o.ShowAsButton) {
		var ret bool
		return ret
	}
	return *o.ShowAsButton
}

// GetShowAsButtonOk returns a tuple with the ShowAsButton field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEnabledConnectionsRequest) GetShowAsButtonOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowAsButton) {
		return nil, false
	}
	return o.ShowAsButton, true
}

// HasShowAsButton returns a boolean if a field has been set.
func (o *PostEnabledConnectionsRequest) HasShowAsButton() bool {
	if o != nil && !IsNil(o.ShowAsButton) {
		return true
	}

	return false
}

// SetShowAsButton gets a reference to the given bool and assigns it to the ShowAsButton field.
func (o *PostEnabledConnectionsRequest) SetShowAsButton(v bool) {
	o.ShowAsButton = &v
}

func (o PostEnabledConnectionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostEnabledConnectionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connection_id"] = o.ConnectionId
	if !IsNil(o.AssignMembershipOnLogin) {
		toSerialize["assign_membership_on_login"] = o.AssignMembershipOnLogin
	}
	if !IsNil(o.IsSignupEnabled) {
		toSerialize["is_signup_enabled"] = o.IsSignupEnabled
	}
	if !IsNil(o.ShowAsButton) {
		toSerialize["show_as_button"] = o.ShowAsButton
	}
	return toSerialize, nil
}

func (o *PostEnabledConnectionsRequest) UnmarshalJSON(data []byte) (err error) {
	varPostEnabledConnectionsRequest := _PostEnabledConnectionsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostEnabledConnectionsRequest)

	if err != nil {
		return err
	}

	*o = PostEnabledConnectionsRequest(varPostEnabledConnectionsRequest)

	return err
}

type NullablePostEnabledConnectionsRequest struct {
	value *PostEnabledConnectionsRequest
	isSet bool
}

func (v NullablePostEnabledConnectionsRequest) Get() *PostEnabledConnectionsRequest {
	return v.value
}

func (v *NullablePostEnabledConnectionsRequest) Set(val *PostEnabledConnectionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostEnabledConnectionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostEnabledConnectionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostEnabledConnectionsRequest(val *PostEnabledConnectionsRequest) *NullablePostEnabledConnectionsRequest {
	return &NullablePostEnabledConnectionsRequest{value: val, isSet: true}
}

func (v NullablePostEnabledConnectionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostEnabledConnectionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
