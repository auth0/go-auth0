/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PostPasswordChange201Response struct for PostPasswordChange201Response
type PostPasswordChange201Response struct {
	// URL representing the ticket.
	Ticket               string `json:"ticket"`
	AdditionalProperties map[string]interface{}
}

type _PostPasswordChange201Response PostPasswordChange201Response

// GetTicket returns the Ticket field value
func (o *PostPasswordChange201Response) GetTicket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value
// and a boolean to check if the value has been set.
func (o *PostPasswordChange201Response) GetTicketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ticket, true
}

// SetTicket sets field value
func (o *PostPasswordChange201Response) SetTicket(v string) {
	o.Ticket = v
}

func (o PostPasswordChange201Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostPasswordChange201Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ticket"] = o.Ticket

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PostPasswordChange201Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ticket",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostPasswordChange201Response := _PostPasswordChange201Response{}

	err = json.Unmarshal(data, &varPostPasswordChange201Response)

	if err != nil {
		return err
	}

	*o = PostPasswordChange201Response(varPostPasswordChange201Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ticket")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePostPasswordChange201Response struct {
	value *PostPasswordChange201Response
	isSet bool
}

func (v NullablePostPasswordChange201Response) Get() *PostPasswordChange201Response {
	return v.value
}

func (v *NullablePostPasswordChange201Response) Set(val *PostPasswordChange201Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePostPasswordChange201Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePostPasswordChange201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostPasswordChange201Response(val *PostPasswordChange201Response) *NullablePostPasswordChange201Response {
	return &NullablePostPasswordChange201Response{value: val, isSet: true}
}

func (v NullablePostPasswordChange201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostPasswordChange201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
