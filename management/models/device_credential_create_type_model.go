/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DeviceCredentialCreateType Type of credential. Must be `public_key`.
type DeviceCredentialCreateType string

// List of deviceCredentialCreate_type
const (
	DEVICECREDENTIALCREATETYPE_PUBLIC_KEY DeviceCredentialCreateType = "public_key"
)

// All allowed values of DeviceCredentialCreateType enum
var AllowedDeviceCredentialCreateTypeEnumValues = []DeviceCredentialCreateType{
	"public_key",
}

func (v *DeviceCredentialCreateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceCredentialCreateType(value)
	for _, existing := range AllowedDeviceCredentialCreateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceCredentialCreateType", value)
}

// NewDeviceCredentialCreateTypeFromValue returns a pointer to a valid DeviceCredentialCreateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceCredentialCreateTypeFromValue(v string) (*DeviceCredentialCreateType, error) {
	ev := DeviceCredentialCreateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceCredentialCreateType: valid values are %v", v, AllowedDeviceCredentialCreateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceCredentialCreateType) IsValid() bool {
	for _, existing := range AllowedDeviceCredentialCreateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to deviceCredentialCreate_type value
func (v DeviceCredentialCreateType) Ptr() *DeviceCredentialCreateType {
	return &v
}

type NullableDeviceCredentialCreateType struct {
	value *DeviceCredentialCreateType
	isSet bool
}

func (v NullableDeviceCredentialCreateType) Get() *DeviceCredentialCreateType {
	return v.value
}

func (v *NullableDeviceCredentialCreateType) Set(val *DeviceCredentialCreateType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceCredentialCreateType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceCredentialCreateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceCredentialCreateType(val *DeviceCredentialCreateType) *NullableDeviceCredentialCreateType {
	return &NullableDeviceCredentialCreateType{value: val, isSet: true}
}

func (v NullableDeviceCredentialCreateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceCredentialCreateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
