/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ClientOidcLogout Configuration for OIDC backchannel logout
type ClientOidcLogout struct {
	// Comma-separated list of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.
	BackchannelLogoutUrls []string `json:"backchannel_logout_urls"`
	AdditionalProperties  map[string]interface{}
}

type _ClientOidcLogout ClientOidcLogout

// GetBackchannelLogoutUrls returns the BackchannelLogoutUrls field value
func (o *ClientOidcLogout) GetBackchannelLogoutUrls() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BackchannelLogoutUrls
}

// GetBackchannelLogoutUrlsOk returns a tuple with the BackchannelLogoutUrls field value
// and a boolean to check if the value has been set.
func (o *ClientOidcLogout) GetBackchannelLogoutUrlsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackchannelLogoutUrls, true
}

// SetBackchannelLogoutUrls sets field value
func (o *ClientOidcLogout) SetBackchannelLogoutUrls(v []string) {
	o.BackchannelLogoutUrls = v
}

func (o ClientOidcLogout) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientOidcLogout) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backchannel_logout_urls"] = o.BackchannelLogoutUrls

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClientOidcLogout) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"backchannel_logout_urls",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClientOidcLogout := _ClientOidcLogout{}

	err = json.Unmarshal(data, &varClientOidcLogout)

	if err != nil {
		return err
	}

	*o = ClientOidcLogout(varClientOidcLogout)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "backchannel_logout_urls")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClientOidcLogout struct {
	value *ClientOidcLogout
	isSet bool
}

func (v NullableClientOidcLogout) Get() *ClientOidcLogout {
	return v.value
}

func (v *NullableClientOidcLogout) Set(val *ClientOidcLogout) {
	v.value = val
	v.isSet = true
}

func (v NullableClientOidcLogout) IsSet() bool {
	return v.isSet
}

func (v *NullableClientOidcLogout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientOidcLogout(val *ClientOidcLogout) *NullableClientOidcLogout {
	return &NullableClientOidcLogout{value: val, isSet: true}
}

func (v NullableClientOidcLogout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientOidcLogout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
