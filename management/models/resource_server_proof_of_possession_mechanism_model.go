/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ResourceServerProofOfPossessionMechanism Intended mechanism for Proof-of-Possession
type ResourceServerProofOfPossessionMechanism string

// List of resourceServer_proof_of_possession_mechanism
const (
	RESOURCESERVERPROOFOFPOSSESSIONMECHANISM_MTLS ResourceServerProofOfPossessionMechanism = "mtls"
)

// All allowed values of ResourceServerProofOfPossessionMechanism enum
var AllowedResourceServerProofOfPossessionMechanismEnumValues = []ResourceServerProofOfPossessionMechanism{
	"mtls",
}

func (v *ResourceServerProofOfPossessionMechanism) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceServerProofOfPossessionMechanism(value)
	for _, existing := range AllowedResourceServerProofOfPossessionMechanismEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceServerProofOfPossessionMechanism", value)
}

// NewResourceServerProofOfPossessionMechanismFromValue returns a pointer to a valid ResourceServerProofOfPossessionMechanism
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceServerProofOfPossessionMechanismFromValue(v string) (*ResourceServerProofOfPossessionMechanism, error) {
	ev := ResourceServerProofOfPossessionMechanism(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceServerProofOfPossessionMechanism: valid values are %v", v, AllowedResourceServerProofOfPossessionMechanismEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceServerProofOfPossessionMechanism) IsValid() bool {
	for _, existing := range AllowedResourceServerProofOfPossessionMechanismEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to resourceServer_proof_of_possession_mechanism value
func (v ResourceServerProofOfPossessionMechanism) Ptr() *ResourceServerProofOfPossessionMechanism {
	return &v
}

type NullableResourceServerProofOfPossessionMechanism struct {
	value *ResourceServerProofOfPossessionMechanism
	isSet bool
}

func (v NullableResourceServerProofOfPossessionMechanism) Get() *ResourceServerProofOfPossessionMechanism {
	return v.value
}

func (v *NullableResourceServerProofOfPossessionMechanism) Set(val *ResourceServerProofOfPossessionMechanism) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceServerProofOfPossessionMechanism) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceServerProofOfPossessionMechanism) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceServerProofOfPossessionMechanism(val *ResourceServerProofOfPossessionMechanism) *NullableResourceServerProofOfPossessionMechanism {
	return &NullableResourceServerProofOfPossessionMechanism{value: val, isSet: true}
}

func (v NullableResourceServerProofOfPossessionMechanism) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceServerProofOfPossessionMechanism) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
