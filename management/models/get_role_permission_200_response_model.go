/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetRolePermission200Response - struct for GetRolePermission200Response
type GetRolePermission200Response struct {
	GetRolePermission200ResponseOneOf *GetRolePermission200ResponseOneOf
	ArrayOfPermission                 *[]Permission
}

// GetRolePermission200ResponseOneOfAsGetRolePermission200Response is a convenience function that returns GetRolePermission200ResponseOneOf wrapped in GetRolePermission200Response
func GetRolePermission200ResponseOneOfAsGetRolePermission200Response(v *GetRolePermission200ResponseOneOf) GetRolePermission200Response {
	return GetRolePermission200Response{
		GetRolePermission200ResponseOneOf: v,
	}
}

// []PermissionAsGetRolePermission200Response is a convenience function that returns []Permission wrapped in GetRolePermission200Response
func ArrayOfPermissionAsGetRolePermission200Response(v *[]Permission) GetRolePermission200Response {
	return GetRolePermission200Response{
		ArrayOfPermission: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRolePermission200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRolePermission200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetRolePermission200ResponseOneOf)
	if err == nil {
		jsonGetRolePermission200ResponseOneOf, _ := json.Marshal(dst.GetRolePermission200ResponseOneOf)
		if string(jsonGetRolePermission200ResponseOneOf) == "{}" { // empty struct
			dst.GetRolePermission200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetRolePermission200ResponseOneOf); err != nil {
				dst.GetRolePermission200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetRolePermission200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfPermission
	err = newStrictDecoder(data).Decode(&dst.ArrayOfPermission)
	if err == nil {
		jsonArrayOfPermission, _ := json.Marshal(dst.ArrayOfPermission)
		if string(jsonArrayOfPermission) == "{}" { // empty struct
			dst.ArrayOfPermission = nil
		} else {
			if err = validator.Validate(dst.ArrayOfPermission); err != nil {
				dst.ArrayOfPermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfPermission = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRolePermission200ResponseOneOf = nil
		dst.ArrayOfPermission = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRolePermission200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRolePermission200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRolePermission200Response) MarshalJSON() ([]byte, error) {
	if src.GetRolePermission200ResponseOneOf != nil {
		return json.Marshal(&src.GetRolePermission200ResponseOneOf)
	}

	if src.ArrayOfPermission != nil {
		return json.Marshal(&src.ArrayOfPermission)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRolePermission200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRolePermission200ResponseOneOf != nil {
		return obj.GetRolePermission200ResponseOneOf
	}

	if obj.ArrayOfPermission != nil {
		return obj.ArrayOfPermission
	}

	// all schemas are nil
	return nil
}

type NullableGetRolePermission200Response struct {
	value *GetRolePermission200Response
	isSet bool
}

func (v NullableGetRolePermission200Response) Get() *GetRolePermission200Response {
	return v.value
}

func (v *NullableGetRolePermission200Response) Set(val *GetRolePermission200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRolePermission200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRolePermission200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRolePermission200Response(val *GetRolePermission200Response) *NullableGetRolePermission200Response {
	return &NullableGetRolePermission200Response{value: val, isSet: true}
}

func (v NullableGetRolePermission200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRolePermission200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
