/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// PostPasswordChangeRequest struct for PostPasswordChangeRequest
type PostPasswordChangeRequest struct {
	// URL the user will be redirected to in the classic Universal Login experience once the ticket is used.
	ResultUrl *string `json:"result_url,omitempty"`
	// user_id of for whom the ticket should be created.
	UserId *string `json:"user_id,omitempty"`
	// ID of the client. If provided for tenants using New Universal Login experience, the user will be prompted to redirect to the default login route of the corresponding application once the ticket is used. See <a target='' href='https://manage.local.dev.auth0.com/docs/universal-login/configure-default-login-routes#completing-the-password-reset-flow'>Configuring Default Login Routes</a> for more details.
	ClientId *string `json:"client_id,omitempty"`
	// (Optional) Organization ID â€“ the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.
	OrganizationId *string `json:"organization_id,omitempty"`
	// ID of the connection. If provided, allows the user to be specified using email instead of user_id. If you set this value, you must also send the email parameter. You cannot send user_id when specifying a connection_id.
	ConnectionId *string `json:"connection_id,omitempty"`
	// Email address of the user for whom the tickets should be created. Requires the connection_id parameter. Cannot be specified when using user_id.
	Email *string `json:"email,omitempty"`
	// Number of seconds for which the ticket is valid before expiration. If unspecified or set to 0, this value defaults to 432000 seconds (5 days).
	TtlSec *int32 `json:"ttl_sec,omitempty"`
	// Whether to set the email_verified attribute to true (true) or whether it should not be updated (false).
	MarkEmailAsVerified *bool `json:"mark_email_as_verified,omitempty"`
	// Whether to include the email address as part of the returnUrl in the reset_email (true), or not (false).
	IncludeEmailInRedirect *bool `json:"includeEmailInRedirect,omitempty"`
}

// GetResultUrl returns the ResultUrl field value if set, zero value otherwise.
func (o *PostPasswordChangeRequest) GetResultUrl() string {
	if o == nil || IsNil(o.ResultUrl) {
		var ret string
		return ret
	}
	return *o.ResultUrl
}

// GetResultUrlOk returns a tuple with the ResultUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostPasswordChangeRequest) GetResultUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ResultUrl) {
		return nil, false
	}
	return o.ResultUrl, true
}

// HasResultUrl returns a boolean if a field has been set.
func (o *PostPasswordChangeRequest) HasResultUrl() bool {
	if o != nil && !IsNil(o.ResultUrl) {
		return true
	}

	return false
}

// SetResultUrl gets a reference to the given string and assigns it to the ResultUrl field.
func (o *PostPasswordChangeRequest) SetResultUrl(v string) {
	o.ResultUrl = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PostPasswordChangeRequest) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostPasswordChangeRequest) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PostPasswordChangeRequest) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *PostPasswordChangeRequest) SetUserId(v string) {
	o.UserId = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *PostPasswordChangeRequest) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostPasswordChangeRequest) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *PostPasswordChangeRequest) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *PostPasswordChangeRequest) SetClientId(v string) {
	o.ClientId = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *PostPasswordChangeRequest) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostPasswordChangeRequest) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *PostPasswordChangeRequest) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *PostPasswordChangeRequest) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *PostPasswordChangeRequest) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostPasswordChangeRequest) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *PostPasswordChangeRequest) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *PostPasswordChangeRequest) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *PostPasswordChangeRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostPasswordChangeRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *PostPasswordChangeRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *PostPasswordChangeRequest) SetEmail(v string) {
	o.Email = &v
}

// GetTtlSec returns the TtlSec field value if set, zero value otherwise.
func (o *PostPasswordChangeRequest) GetTtlSec() int32 {
	if o == nil || IsNil(o.TtlSec) {
		var ret int32
		return ret
	}
	return *o.TtlSec
}

// GetTtlSecOk returns a tuple with the TtlSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostPasswordChangeRequest) GetTtlSecOk() (*int32, bool) {
	if o == nil || IsNil(o.TtlSec) {
		return nil, false
	}
	return o.TtlSec, true
}

// HasTtlSec returns a boolean if a field has been set.
func (o *PostPasswordChangeRequest) HasTtlSec() bool {
	if o != nil && !IsNil(o.TtlSec) {
		return true
	}

	return false
}

// SetTtlSec gets a reference to the given int32 and assigns it to the TtlSec field.
func (o *PostPasswordChangeRequest) SetTtlSec(v int32) {
	o.TtlSec = &v
}

// GetMarkEmailAsVerified returns the MarkEmailAsVerified field value if set, zero value otherwise.
func (o *PostPasswordChangeRequest) GetMarkEmailAsVerified() bool {
	if o == nil || IsNil(o.MarkEmailAsVerified) {
		var ret bool
		return ret
	}
	return *o.MarkEmailAsVerified
}

// GetMarkEmailAsVerifiedOk returns a tuple with the MarkEmailAsVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostPasswordChangeRequest) GetMarkEmailAsVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.MarkEmailAsVerified) {
		return nil, false
	}
	return o.MarkEmailAsVerified, true
}

// HasMarkEmailAsVerified returns a boolean if a field has been set.
func (o *PostPasswordChangeRequest) HasMarkEmailAsVerified() bool {
	if o != nil && !IsNil(o.MarkEmailAsVerified) {
		return true
	}

	return false
}

// SetMarkEmailAsVerified gets a reference to the given bool and assigns it to the MarkEmailAsVerified field.
func (o *PostPasswordChangeRequest) SetMarkEmailAsVerified(v bool) {
	o.MarkEmailAsVerified = &v
}

// GetIncludeEmailInRedirect returns the IncludeEmailInRedirect field value if set, zero value otherwise.
func (o *PostPasswordChangeRequest) GetIncludeEmailInRedirect() bool {
	if o == nil || IsNil(o.IncludeEmailInRedirect) {
		var ret bool
		return ret
	}
	return *o.IncludeEmailInRedirect
}

// GetIncludeEmailInRedirectOk returns a tuple with the IncludeEmailInRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostPasswordChangeRequest) GetIncludeEmailInRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeEmailInRedirect) {
		return nil, false
	}
	return o.IncludeEmailInRedirect, true
}

// HasIncludeEmailInRedirect returns a boolean if a field has been set.
func (o *PostPasswordChangeRequest) HasIncludeEmailInRedirect() bool {
	if o != nil && !IsNil(o.IncludeEmailInRedirect) {
		return true
	}

	return false
}

// SetIncludeEmailInRedirect gets a reference to the given bool and assigns it to the IncludeEmailInRedirect field.
func (o *PostPasswordChangeRequest) SetIncludeEmailInRedirect(v bool) {
	o.IncludeEmailInRedirect = &v
}

func (o PostPasswordChangeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostPasswordChangeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResultUrl) {
		toSerialize["result_url"] = o.ResultUrl
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.ClientId) {
		toSerialize["client_id"] = o.ClientId
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.TtlSec) {
		toSerialize["ttl_sec"] = o.TtlSec
	}
	if !IsNil(o.MarkEmailAsVerified) {
		toSerialize["mark_email_as_verified"] = o.MarkEmailAsVerified
	}
	if !IsNil(o.IncludeEmailInRedirect) {
		toSerialize["includeEmailInRedirect"] = o.IncludeEmailInRedirect
	}
	return toSerialize, nil
}

type NullablePostPasswordChangeRequest struct {
	value *PostPasswordChangeRequest
	isSet bool
}

func (v NullablePostPasswordChangeRequest) Get() *PostPasswordChangeRequest {
	return v.value
}

func (v *NullablePostPasswordChangeRequest) Set(val *PostPasswordChangeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostPasswordChangeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostPasswordChangeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostPasswordChangeRequest(val *PostPasswordChangeRequest) *NullablePostPasswordChangeRequest {
	return &NullablePostPasswordChangeRequest{value: val, isSet: true}
}

func (v NullablePostPasswordChangeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostPasswordChangeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
