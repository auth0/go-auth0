/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetResourceServers200Response - struct for GetResourceServers200Response
type GetResourceServers200Response struct {
	GetResourceServers200ResponseOneOf *GetResourceServers200ResponseOneOf
	ArrayOfResourceServer              *[]ResourceServer
}

// GetResourceServers200ResponseOneOfAsGetResourceServers200Response is a convenience function that returns GetResourceServers200ResponseOneOf wrapped in GetResourceServers200Response
func GetResourceServers200ResponseOneOfAsGetResourceServers200Response(v *GetResourceServers200ResponseOneOf) GetResourceServers200Response {
	return GetResourceServers200Response{
		GetResourceServers200ResponseOneOf: v,
	}
}

// []ResourceServerAsGetResourceServers200Response is a convenience function that returns []ResourceServer wrapped in GetResourceServers200Response
func ArrayOfResourceServerAsGetResourceServers200Response(v *[]ResourceServer) GetResourceServers200Response {
	return GetResourceServers200Response{
		ArrayOfResourceServer: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetResourceServers200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetResourceServers200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetResourceServers200ResponseOneOf)
	if err == nil {
		jsonGetResourceServers200ResponseOneOf, _ := json.Marshal(dst.GetResourceServers200ResponseOneOf)
		if string(jsonGetResourceServers200ResponseOneOf) == "{}" { // empty struct
			dst.GetResourceServers200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetResourceServers200ResponseOneOf); err != nil {
				dst.GetResourceServers200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetResourceServers200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfResourceServer
	err = newStrictDecoder(data).Decode(&dst.ArrayOfResourceServer)
	if err == nil {
		jsonArrayOfResourceServer, _ := json.Marshal(dst.ArrayOfResourceServer)
		if string(jsonArrayOfResourceServer) == "{}" { // empty struct
			dst.ArrayOfResourceServer = nil
		} else {
			if err = validator.Validate(dst.ArrayOfResourceServer); err != nil {
				dst.ArrayOfResourceServer = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfResourceServer = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetResourceServers200ResponseOneOf = nil
		dst.ArrayOfResourceServer = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetResourceServers200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetResourceServers200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetResourceServers200Response) MarshalJSON() ([]byte, error) {
	if src.GetResourceServers200ResponseOneOf != nil {
		return json.Marshal(&src.GetResourceServers200ResponseOneOf)
	}

	if src.ArrayOfResourceServer != nil {
		return json.Marshal(&src.ArrayOfResourceServer)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetResourceServers200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetResourceServers200ResponseOneOf != nil {
		return obj.GetResourceServers200ResponseOneOf
	}

	if obj.ArrayOfResourceServer != nil {
		return obj.ArrayOfResourceServer
	}

	// all schemas are nil
	return nil
}

type NullableGetResourceServers200Response struct {
	value *GetResourceServers200Response
	isSet bool
}

func (v NullableGetResourceServers200Response) Get() *GetResourceServers200Response {
	return v.value
}

func (v *NullableGetResourceServers200Response) Set(val *GetResourceServers200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetResourceServers200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetResourceServers200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetResourceServers200Response(val *GetResourceServers200Response) *NullableGetResourceServers200Response {
	return &NullableGetResourceServers200Response{value: val, isSet: true}
}

func (v NullableGetResourceServers200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetResourceServers200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
