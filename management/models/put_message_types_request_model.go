/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PutMessageTypesRequest struct for PutMessageTypesRequest
type PutMessageTypesRequest struct {
	// The list of phone factors to enable on the tenant. Can include `sms` and `voice`.
	MessageTypes []GetMessageTypes200ResponseMessageTypesInner `json:"message_types"`
}

type _PutMessageTypesRequest PutMessageTypesRequest

// GetMessageTypes returns the MessageTypes field value
func (o *PutMessageTypesRequest) GetMessageTypes() []GetMessageTypes200ResponseMessageTypesInner {
	if o == nil {
		var ret []GetMessageTypes200ResponseMessageTypesInner
		return ret
	}

	return o.MessageTypes
}

// GetMessageTypesOk returns a tuple with the MessageTypes field value
// and a boolean to check if the value has been set.
func (o *PutMessageTypesRequest) GetMessageTypesOk() ([]GetMessageTypes200ResponseMessageTypesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessageTypes, true
}

// SetMessageTypes sets field value
func (o *PutMessageTypesRequest) SetMessageTypes(v []GetMessageTypes200ResponseMessageTypesInner) {
	o.MessageTypes = v
}

func (o PutMessageTypesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutMessageTypesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message_types"] = o.MessageTypes
	return toSerialize, nil
}

func (o *PutMessageTypesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message_types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPutMessageTypesRequest := _PutMessageTypesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPutMessageTypesRequest)

	if err != nil {
		return err
	}

	*o = PutMessageTypesRequest(varPutMessageTypesRequest)

	return err
}

type NullablePutMessageTypesRequest struct {
	value *PutMessageTypesRequest
	isSet bool
}

func (v NullablePutMessageTypesRequest) Get() *PutMessageTypesRequest {
	return v.value
}

func (v *NullablePutMessageTypesRequest) Set(val *PutMessageTypesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutMessageTypesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutMessageTypesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutMessageTypesRequest(val *PutMessageTypesRequest) *NullablePutMessageTypesRequest {
	return &NullablePutMessageTypesRequest{value: val, isSet: true}
}

func (v NullablePutMessageTypesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutMessageTypesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
