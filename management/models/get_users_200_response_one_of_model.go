/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// GetUsers200ResponseOneOf struct for GetUsers200ResponseOneOf
type GetUsers200ResponseOneOf struct {
	Start  float32                         `json:"start"`
	Limit  float32                         `json:"limit"`
	Length float32                         `json:"length"`
	Total  float32                         `json:"total"`
	Users  []GetUsers200ResponseOneOfInner `json:"users"`
}

type _GetUsers200ResponseOneOf GetUsers200ResponseOneOf

// GetStart returns the Start field value
func (o *GetUsers200ResponseOneOf) GetStart() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *GetUsers200ResponseOneOf) GetStartOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *GetUsers200ResponseOneOf) SetStart(v float32) {
	o.Start = v
}

// GetLimit returns the Limit field value
func (o *GetUsers200ResponseOneOf) GetLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *GetUsers200ResponseOneOf) GetLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *GetUsers200ResponseOneOf) SetLimit(v float32) {
	o.Limit = v
}

// GetLength returns the Length field value
func (o *GetUsers200ResponseOneOf) GetLength() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Length
}

// GetLengthOk returns a tuple with the Length field value
// and a boolean to check if the value has been set.
func (o *GetUsers200ResponseOneOf) GetLengthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Length, true
}

// SetLength sets field value
func (o *GetUsers200ResponseOneOf) SetLength(v float32) {
	o.Length = v
}

// GetTotal returns the Total field value
func (o *GetUsers200ResponseOneOf) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *GetUsers200ResponseOneOf) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *GetUsers200ResponseOneOf) SetTotal(v float32) {
	o.Total = v
}

// GetUsers returns the Users field value
func (o *GetUsers200ResponseOneOf) GetUsers() []GetUsers200ResponseOneOfInner {
	if o == nil {
		var ret []GetUsers200ResponseOneOfInner
		return ret
	}

	return o.Users
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *GetUsers200ResponseOneOf) GetUsersOk() ([]GetUsers200ResponseOneOfInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Users, true
}

// SetUsers sets field value
func (o *GetUsers200ResponseOneOf) SetUsers(v []GetUsers200ResponseOneOfInner) {
	o.Users = v
}

func (o GetUsers200ResponseOneOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetUsers200ResponseOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["start"] = o.Start
	toSerialize["limit"] = o.Limit
	toSerialize["length"] = o.Length
	toSerialize["total"] = o.Total
	toSerialize["users"] = o.Users
	return toSerialize, nil
}

func (o *GetUsers200ResponseOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"start",
		"limit",
		"length",
		"total",
		"users",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetUsers200ResponseOneOf := _GetUsers200ResponseOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetUsers200ResponseOneOf)

	if err != nil {
		return err
	}

	*o = GetUsers200ResponseOneOf(varGetUsers200ResponseOneOf)

	return err
}

type NullableGetUsers200ResponseOneOf struct {
	value *GetUsers200ResponseOneOf
	isSet bool
}

func (v NullableGetUsers200ResponseOneOf) Get() *GetUsers200ResponseOneOf {
	return v.value
}

func (v *NullableGetUsers200ResponseOneOf) Set(val *GetUsers200ResponseOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUsers200ResponseOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUsers200ResponseOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUsers200ResponseOneOf(val *GetUsers200ResponseOneOf) *NullableGetUsers200ResponseOneOf {
	return &NullableGetUsers200ResponseOneOf{value: val, isSet: true}
}

func (v NullableGetUsers200ResponseOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUsers200ResponseOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
