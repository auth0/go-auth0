/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// GetSigningKeys200ResponseInner struct for GetSigningKeys200ResponseInner
type GetSigningKeys200ResponseInner struct {
	// The key id of the signing key
	Kid string `json:"kid"`
	// The public certificate of the signing key
	Cert string `json:"cert"`
	// The public certificate of the signing key in pkcs7 format
	Pkcs7 *string `json:"pkcs7,omitempty"`
	// True if the key is the the current key
	Current *bool `json:"current,omitempty"`
	// True if the key is the the next key
	Next *bool `json:"next,omitempty"`
	// True if the key is the the previous key
	Previous     *bool                                       `json:"previous,omitempty"`
	CurrentSince *GetSigningKeys200ResponseInnerCurrentSince `json:"current_since,omitempty"`
	CurrentUntil *GetSigningKeys200ResponseInnerCurrentUntil `json:"current_until,omitempty"`
	// The cert fingerprint
	Fingerprint string `json:"fingerprint"`
	// The cert thumbprint
	Thumbprint string `json:"thumbprint"`
	// True if the key is revoked
	Revoked   *bool                                    `json:"revoked,omitempty"`
	RevokedAt *GetSigningKeys200ResponseInnerRevokedAt `json:"revoked_at,omitempty"`
}

type _GetSigningKeys200ResponseInner GetSigningKeys200ResponseInner

// GetKid returns the Kid field value
func (o *GetSigningKeys200ResponseInner) GetKid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kid
}

// GetKidOk returns a tuple with the Kid field value
// and a boolean to check if the value has been set.
func (o *GetSigningKeys200ResponseInner) GetKidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kid, true
}

// SetKid sets field value
func (o *GetSigningKeys200ResponseInner) SetKid(v string) {
	o.Kid = v
}

// GetCert returns the Cert field value
func (o *GetSigningKeys200ResponseInner) GetCert() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cert
}

// GetCertOk returns a tuple with the Cert field value
// and a boolean to check if the value has been set.
func (o *GetSigningKeys200ResponseInner) GetCertOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cert, true
}

// SetCert sets field value
func (o *GetSigningKeys200ResponseInner) SetCert(v string) {
	o.Cert = v
}

// GetPkcs7 returns the Pkcs7 field value if set, zero value otherwise.
func (o *GetSigningKeys200ResponseInner) GetPkcs7() string {
	if o == nil || IsNil(o.Pkcs7) {
		var ret string
		return ret
	}
	return *o.Pkcs7
}

// GetPkcs7Ok returns a tuple with the Pkcs7 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSigningKeys200ResponseInner) GetPkcs7Ok() (*string, bool) {
	if o == nil || IsNil(o.Pkcs7) {
		return nil, false
	}
	return o.Pkcs7, true
}

// HasPkcs7 returns a boolean if a field has been set.
func (o *GetSigningKeys200ResponseInner) HasPkcs7() bool {
	if o != nil && !IsNil(o.Pkcs7) {
		return true
	}

	return false
}

// SetPkcs7 gets a reference to the given string and assigns it to the Pkcs7 field.
func (o *GetSigningKeys200ResponseInner) SetPkcs7(v string) {
	o.Pkcs7 = &v
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *GetSigningKeys200ResponseInner) GetCurrent() bool {
	if o == nil || IsNil(o.Current) {
		var ret bool
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSigningKeys200ResponseInner) GetCurrentOk() (*bool, bool) {
	if o == nil || IsNil(o.Current) {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *GetSigningKeys200ResponseInner) HasCurrent() bool {
	if o != nil && !IsNil(o.Current) {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given bool and assigns it to the Current field.
func (o *GetSigningKeys200ResponseInner) SetCurrent(v bool) {
	o.Current = &v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *GetSigningKeys200ResponseInner) GetNext() bool {
	if o == nil || IsNil(o.Next) {
		var ret bool
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSigningKeys200ResponseInner) GetNextOk() (*bool, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *GetSigningKeys200ResponseInner) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given bool and assigns it to the Next field.
func (o *GetSigningKeys200ResponseInner) SetNext(v bool) {
	o.Next = &v
}

// GetPrevious returns the Previous field value if set, zero value otherwise.
func (o *GetSigningKeys200ResponseInner) GetPrevious() bool {
	if o == nil || IsNil(o.Previous) {
		var ret bool
		return ret
	}
	return *o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSigningKeys200ResponseInner) GetPreviousOk() (*bool, bool) {
	if o == nil || IsNil(o.Previous) {
		return nil, false
	}
	return o.Previous, true
}

// HasPrevious returns a boolean if a field has been set.
func (o *GetSigningKeys200ResponseInner) HasPrevious() bool {
	if o != nil && !IsNil(o.Previous) {
		return true
	}

	return false
}

// SetPrevious gets a reference to the given bool and assigns it to the Previous field.
func (o *GetSigningKeys200ResponseInner) SetPrevious(v bool) {
	o.Previous = &v
}

// GetCurrentSince returns the CurrentSince field value if set, zero value otherwise.
func (o *GetSigningKeys200ResponseInner) GetCurrentSince() GetSigningKeys200ResponseInnerCurrentSince {
	if o == nil || IsNil(o.CurrentSince) {
		var ret GetSigningKeys200ResponseInnerCurrentSince
		return ret
	}
	return *o.CurrentSince
}

// GetCurrentSinceOk returns a tuple with the CurrentSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSigningKeys200ResponseInner) GetCurrentSinceOk() (*GetSigningKeys200ResponseInnerCurrentSince, bool) {
	if o == nil || IsNil(o.CurrentSince) {
		return nil, false
	}
	return o.CurrentSince, true
}

// HasCurrentSince returns a boolean if a field has been set.
func (o *GetSigningKeys200ResponseInner) HasCurrentSince() bool {
	if o != nil && !IsNil(o.CurrentSince) {
		return true
	}

	return false
}

// SetCurrentSince gets a reference to the given GetSigningKeys200ResponseInnerCurrentSince and assigns it to the CurrentSince field.
func (o *GetSigningKeys200ResponseInner) SetCurrentSince(v GetSigningKeys200ResponseInnerCurrentSince) {
	o.CurrentSince = &v
}

// GetCurrentUntil returns the CurrentUntil field value if set, zero value otherwise.
func (o *GetSigningKeys200ResponseInner) GetCurrentUntil() GetSigningKeys200ResponseInnerCurrentUntil {
	if o == nil || IsNil(o.CurrentUntil) {
		var ret GetSigningKeys200ResponseInnerCurrentUntil
		return ret
	}
	return *o.CurrentUntil
}

// GetCurrentUntilOk returns a tuple with the CurrentUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSigningKeys200ResponseInner) GetCurrentUntilOk() (*GetSigningKeys200ResponseInnerCurrentUntil, bool) {
	if o == nil || IsNil(o.CurrentUntil) {
		return nil, false
	}
	return o.CurrentUntil, true
}

// HasCurrentUntil returns a boolean if a field has been set.
func (o *GetSigningKeys200ResponseInner) HasCurrentUntil() bool {
	if o != nil && !IsNil(o.CurrentUntil) {
		return true
	}

	return false
}

// SetCurrentUntil gets a reference to the given GetSigningKeys200ResponseInnerCurrentUntil and assigns it to the CurrentUntil field.
func (o *GetSigningKeys200ResponseInner) SetCurrentUntil(v GetSigningKeys200ResponseInnerCurrentUntil) {
	o.CurrentUntil = &v
}

// GetFingerprint returns the Fingerprint field value
func (o *GetSigningKeys200ResponseInner) GetFingerprint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value
// and a boolean to check if the value has been set.
func (o *GetSigningKeys200ResponseInner) GetFingerprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fingerprint, true
}

// SetFingerprint sets field value
func (o *GetSigningKeys200ResponseInner) SetFingerprint(v string) {
	o.Fingerprint = v
}

// GetThumbprint returns the Thumbprint field value
func (o *GetSigningKeys200ResponseInner) GetThumbprint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Thumbprint
}

// GetThumbprintOk returns a tuple with the Thumbprint field value
// and a boolean to check if the value has been set.
func (o *GetSigningKeys200ResponseInner) GetThumbprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Thumbprint, true
}

// SetThumbprint sets field value
func (o *GetSigningKeys200ResponseInner) SetThumbprint(v string) {
	o.Thumbprint = v
}

// GetRevoked returns the Revoked field value if set, zero value otherwise.
func (o *GetSigningKeys200ResponseInner) GetRevoked() bool {
	if o == nil || IsNil(o.Revoked) {
		var ret bool
		return ret
	}
	return *o.Revoked
}

// GetRevokedOk returns a tuple with the Revoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSigningKeys200ResponseInner) GetRevokedOk() (*bool, bool) {
	if o == nil || IsNil(o.Revoked) {
		return nil, false
	}
	return o.Revoked, true
}

// HasRevoked returns a boolean if a field has been set.
func (o *GetSigningKeys200ResponseInner) HasRevoked() bool {
	if o != nil && !IsNil(o.Revoked) {
		return true
	}

	return false
}

// SetRevoked gets a reference to the given bool and assigns it to the Revoked field.
func (o *GetSigningKeys200ResponseInner) SetRevoked(v bool) {
	o.Revoked = &v
}

// GetRevokedAt returns the RevokedAt field value if set, zero value otherwise.
func (o *GetSigningKeys200ResponseInner) GetRevokedAt() GetSigningKeys200ResponseInnerRevokedAt {
	if o == nil || IsNil(o.RevokedAt) {
		var ret GetSigningKeys200ResponseInnerRevokedAt
		return ret
	}
	return *o.RevokedAt
}

// GetRevokedAtOk returns a tuple with the RevokedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSigningKeys200ResponseInner) GetRevokedAtOk() (*GetSigningKeys200ResponseInnerRevokedAt, bool) {
	if o == nil || IsNil(o.RevokedAt) {
		return nil, false
	}
	return o.RevokedAt, true
}

// HasRevokedAt returns a boolean if a field has been set.
func (o *GetSigningKeys200ResponseInner) HasRevokedAt() bool {
	if o != nil && !IsNil(o.RevokedAt) {
		return true
	}

	return false
}

// SetRevokedAt gets a reference to the given GetSigningKeys200ResponseInnerRevokedAt and assigns it to the RevokedAt field.
func (o *GetSigningKeys200ResponseInner) SetRevokedAt(v GetSigningKeys200ResponseInnerRevokedAt) {
	o.RevokedAt = &v
}

func (o GetSigningKeys200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSigningKeys200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kid"] = o.Kid
	toSerialize["cert"] = o.Cert
	if !IsNil(o.Pkcs7) {
		toSerialize["pkcs7"] = o.Pkcs7
	}
	if !IsNil(o.Current) {
		toSerialize["current"] = o.Current
	}
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	if !IsNil(o.Previous) {
		toSerialize["previous"] = o.Previous
	}
	if !IsNil(o.CurrentSince) {
		toSerialize["current_since"] = o.CurrentSince
	}
	if !IsNil(o.CurrentUntil) {
		toSerialize["current_until"] = o.CurrentUntil
	}
	toSerialize["fingerprint"] = o.Fingerprint
	toSerialize["thumbprint"] = o.Thumbprint
	if !IsNil(o.Revoked) {
		toSerialize["revoked"] = o.Revoked
	}
	if !IsNil(o.RevokedAt) {
		toSerialize["revoked_at"] = o.RevokedAt
	}
	return toSerialize, nil
}

func (o *GetSigningKeys200ResponseInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kid",
		"cert",
		"fingerprint",
		"thumbprint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetSigningKeys200ResponseInner := _GetSigningKeys200ResponseInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetSigningKeys200ResponseInner)

	if err != nil {
		return err
	}

	*o = GetSigningKeys200ResponseInner(varGetSigningKeys200ResponseInner)

	return err
}

type NullableGetSigningKeys200ResponseInner struct {
	value *GetSigningKeys200ResponseInner
	isSet bool
}

func (v NullableGetSigningKeys200ResponseInner) Get() *GetSigningKeys200ResponseInner {
	return v.value
}

func (v *NullableGetSigningKeys200ResponseInner) Set(val *GetSigningKeys200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSigningKeys200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSigningKeys200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSigningKeys200ResponseInner(val *GetSigningKeys200ResponseInner) *NullableGetSigningKeys200ResponseInner {
	return &NullableGetSigningKeys200ResponseInner{value: val, isSet: true}
}

func (v NullableGetSigningKeys200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSigningKeys200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
