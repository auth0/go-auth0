/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ResourceServerTokenDialect Dialect of access tokens that should be issued. `access_token` is a JWT containing standard Auth0 claims; `rfc9068_profile` is a JWT conforming to the IETF JWT Access Token Profile. `access_token_authz` and `rfc9068_profile_authz` additionally include RBAC permissions claims.
type ResourceServerTokenDialect string

// List of resourceServer_token_dialect
const (
	RESOURCESERVERTOKENDIALECT_ACCESS_TOKEN          ResourceServerTokenDialect = "access_token"
	RESOURCESERVERTOKENDIALECT_ACCESS_TOKEN_AUTHZ    ResourceServerTokenDialect = "access_token_authz"
	RESOURCESERVERTOKENDIALECT_RFC9068_PROFILE       ResourceServerTokenDialect = "rfc9068_profile"
	RESOURCESERVERTOKENDIALECT_RFC9068_PROFILE_AUTHZ ResourceServerTokenDialect = "rfc9068_profile_authz"
)

// All allowed values of ResourceServerTokenDialect enum
var AllowedResourceServerTokenDialectEnumValues = []ResourceServerTokenDialect{
	"access_token",
	"access_token_authz",
	"rfc9068_profile",
	"rfc9068_profile_authz",
}

func (v *ResourceServerTokenDialect) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceServerTokenDialect(value)
	for _, existing := range AllowedResourceServerTokenDialectEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceServerTokenDialect", value)
}

// NewResourceServerTokenDialectFromValue returns a pointer to a valid ResourceServerTokenDialect
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceServerTokenDialectFromValue(v string) (*ResourceServerTokenDialect, error) {
	ev := ResourceServerTokenDialect(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceServerTokenDialect: valid values are %v", v, AllowedResourceServerTokenDialectEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceServerTokenDialect) IsValid() bool {
	for _, existing := range AllowedResourceServerTokenDialectEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to resourceServer_token_dialect value
func (v ResourceServerTokenDialect) Ptr() *ResourceServerTokenDialect {
	return &v
}

type NullableResourceServerTokenDialect struct {
	value *ResourceServerTokenDialect
	isSet bool
}

func (v NullableResourceServerTokenDialect) Get() *ResourceServerTokenDialect {
	return v.value
}

func (v *NullableResourceServerTokenDialect) Set(val *ResourceServerTokenDialect) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceServerTokenDialect) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceServerTokenDialect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceServerTokenDialect(val *ResourceServerTokenDialect) *NullableResourceServerTokenDialect {
	return &NullableResourceServerTokenDialect{value: val, isSet: true}
}

func (v NullableResourceServerTokenDialect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceServerTokenDialect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
