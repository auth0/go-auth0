/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ClientAddonsOffice365 Microsoft Office 365 SSO configuration.
type ClientAddonsOffice365 struct {
	// Your Office 365 domain name. e.g. `acme-org.com`.
	Domain string `json:"domain"`
	// Optional Auth0 database connection for testing an already-configured Office 365 tenant.
	Connection           string `json:"connection"`
	AdditionalProperties map[string]interface{}
}

type _ClientAddonsOffice365 ClientAddonsOffice365

// GetDomain returns the Domain field value
func (o *ClientAddonsOffice365) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ClientAddonsOffice365) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ClientAddonsOffice365) SetDomain(v string) {
	o.Domain = v
}

// GetConnection returns the Connection field value
func (o *ClientAddonsOffice365) GetConnection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value
// and a boolean to check if the value has been set.
func (o *ClientAddonsOffice365) GetConnectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connection, true
}

// SetConnection sets field value
func (o *ClientAddonsOffice365) SetConnection(v string) {
	o.Connection = v
}

func (o ClientAddonsOffice365) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientAddonsOffice365) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	toSerialize["connection"] = o.Connection

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClientAddonsOffice365) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"connection",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClientAddonsOffice365 := _ClientAddonsOffice365{}

	err = json.Unmarshal(data, &varClientAddonsOffice365)

	if err != nil {
		return err
	}

	*o = ClientAddonsOffice365(varClientAddonsOffice365)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "domain")
		delete(additionalProperties, "connection")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClientAddonsOffice365 struct {
	value *ClientAddonsOffice365
	isSet bool
}

func (v NullableClientAddonsOffice365) Get() *ClientAddonsOffice365 {
	return v.value
}

func (v *NullableClientAddonsOffice365) Set(val *ClientAddonsOffice365) {
	v.value = val
	v.isSet = true
}

func (v NullableClientAddonsOffice365) IsSet() bool {
	return v.isSet
}

func (v *NullableClientAddonsOffice365) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientAddonsOffice365(val *ClientAddonsOffice365) *NullableClientAddonsOffice365 {
	return &NullableClientAddonsOffice365{value: val, isSet: true}
}

func (v NullableClientAddonsOffice365) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientAddonsOffice365) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
