/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ClientRefreshTokenExpirationType Refresh token expiration types, one of: expiring, non-expiring
type ClientRefreshTokenExpirationType string

// List of client_refresh_token_expiration_type
const (
	CLIENTREFRESHTOKENEXPIRATIONTYPE_EXPIRING     ClientRefreshTokenExpirationType = "expiring"
	CLIENTREFRESHTOKENEXPIRATIONTYPE_NON_EXPIRING ClientRefreshTokenExpirationType = "non-expiring"
)

// All allowed values of ClientRefreshTokenExpirationType enum
var AllowedClientRefreshTokenExpirationTypeEnumValues = []ClientRefreshTokenExpirationType{
	"expiring",
	"non-expiring",
}

func (v *ClientRefreshTokenExpirationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClientRefreshTokenExpirationType(value)
	for _, existing := range AllowedClientRefreshTokenExpirationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClientRefreshTokenExpirationType", value)
}

// NewClientRefreshTokenExpirationTypeFromValue returns a pointer to a valid ClientRefreshTokenExpirationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClientRefreshTokenExpirationTypeFromValue(v string) (*ClientRefreshTokenExpirationType, error) {
	ev := ClientRefreshTokenExpirationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClientRefreshTokenExpirationType: valid values are %v", v, AllowedClientRefreshTokenExpirationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClientRefreshTokenExpirationType) IsValid() bool {
	for _, existing := range AllowedClientRefreshTokenExpirationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to client_refresh_token_expiration_type value
func (v ClientRefreshTokenExpirationType) Ptr() *ClientRefreshTokenExpirationType {
	return &v
}

type NullableClientRefreshTokenExpirationType struct {
	value *ClientRefreshTokenExpirationType
	isSet bool
}

func (v NullableClientRefreshTokenExpirationType) Get() *ClientRefreshTokenExpirationType {
	return v.value
}

func (v *NullableClientRefreshTokenExpirationType) Set(val *ClientRefreshTokenExpirationType) {
	v.value = val
	v.isSet = true
}

func (v NullableClientRefreshTokenExpirationType) IsSet() bool {
	return v.isSet
}

func (v *NullableClientRefreshTokenExpirationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientRefreshTokenExpirationType(val *ClientRefreshTokenExpirationType) *NullableClientRefreshTokenExpirationType {
	return &NullableClientRefreshTokenExpirationType{value: val, isSet: true}
}

func (v NullableClientRefreshTokenExpirationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientRefreshTokenExpirationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
