/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// EmailProviderUpdateCredentialsAnyOf4Region Set to <code>eu</code> if your domain is provisioned to use Mailgun's EU region. Otherwise, set to <code>null</code>.
type EmailProviderUpdateCredentialsAnyOf4Region string

// List of emailProviderUpdate_credentials_anyOf_4_region
const (
	EMAILPROVIDERUPDATECREDENTIALSANYOF4REGION_EU EmailProviderUpdateCredentialsAnyOf4Region = "eu"
)

// All allowed values of EmailProviderUpdateCredentialsAnyOf4Region enum
var AllowedEmailProviderUpdateCredentialsAnyOf4RegionEnumValues = []EmailProviderUpdateCredentialsAnyOf4Region{
	"eu",
}

func (v *EmailProviderUpdateCredentialsAnyOf4Region) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmailProviderUpdateCredentialsAnyOf4Region(value)
	for _, existing := range AllowedEmailProviderUpdateCredentialsAnyOf4RegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmailProviderUpdateCredentialsAnyOf4Region", value)
}

// NewEmailProviderUpdateCredentialsAnyOf4RegionFromValue returns a pointer to a valid EmailProviderUpdateCredentialsAnyOf4Region
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmailProviderUpdateCredentialsAnyOf4RegionFromValue(v string) (*EmailProviderUpdateCredentialsAnyOf4Region, error) {
	ev := EmailProviderUpdateCredentialsAnyOf4Region(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmailProviderUpdateCredentialsAnyOf4Region: valid values are %v", v, AllowedEmailProviderUpdateCredentialsAnyOf4RegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmailProviderUpdateCredentialsAnyOf4Region) IsValid() bool {
	for _, existing := range AllowedEmailProviderUpdateCredentialsAnyOf4RegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to emailProviderUpdate_credentials_anyOf_4_region value
func (v EmailProviderUpdateCredentialsAnyOf4Region) Ptr() *EmailProviderUpdateCredentialsAnyOf4Region {
	return &v
}

type NullableEmailProviderUpdateCredentialsAnyOf4Region struct {
	value *EmailProviderUpdateCredentialsAnyOf4Region
	isSet bool
}

func (v NullableEmailProviderUpdateCredentialsAnyOf4Region) Get() *EmailProviderUpdateCredentialsAnyOf4Region {
	return v.value
}

func (v *NullableEmailProviderUpdateCredentialsAnyOf4Region) Set(val *EmailProviderUpdateCredentialsAnyOf4Region) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProviderUpdateCredentialsAnyOf4Region) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProviderUpdateCredentialsAnyOf4Region) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProviderUpdateCredentialsAnyOf4Region(val *EmailProviderUpdateCredentialsAnyOf4Region) *NullableEmailProviderUpdateCredentialsAnyOf4Region {
	return &NullableEmailProviderUpdateCredentialsAnyOf4Region{value: val, isSet: true}
}

func (v NullableEmailProviderUpdateCredentialsAnyOf4Region) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProviderUpdateCredentialsAnyOf4Region) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
