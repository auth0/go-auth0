/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// PatchCredentialsByCredentialIdRequest struct for PatchCredentialsByCredentialIdRequest
type PatchCredentialsByCredentialIdRequest struct {
	// The ISO 8601 formatted date representing the expiration of the credential.
	ExpiresAt NullableTime `json:"expires_at,omitempty"`
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchCredentialsByCredentialIdRequest) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchCredentialsByCredentialIdRequest) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *PatchCredentialsByCredentialIdRequest) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt.IsSet() {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given NullableTime and assigns it to the ExpiresAt field.
func (o *PatchCredentialsByCredentialIdRequest) SetExpiresAt(v time.Time) {
	o.ExpiresAt.Set(&v)
}

// SetExpiresAtNil sets the value for ExpiresAt to be an explicit nil
func (o *PatchCredentialsByCredentialIdRequest) SetExpiresAtNil() {
	o.ExpiresAt.Set(nil)
}

// UnsetExpiresAt ensures that no value is present for ExpiresAt, not even an explicit nil
func (o *PatchCredentialsByCredentialIdRequest) UnsetExpiresAt() {
	o.ExpiresAt.Unset()
}

func (o PatchCredentialsByCredentialIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchCredentialsByCredentialIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpiresAt.IsSet() {
		toSerialize["expires_at"] = o.ExpiresAt.Get()
	}
	return toSerialize, nil
}

type NullablePatchCredentialsByCredentialIdRequest struct {
	value *PatchCredentialsByCredentialIdRequest
	isSet bool
}

func (v NullablePatchCredentialsByCredentialIdRequest) Get() *PatchCredentialsByCredentialIdRequest {
	return v.value
}

func (v *NullablePatchCredentialsByCredentialIdRequest) Set(val *PatchCredentialsByCredentialIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchCredentialsByCredentialIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchCredentialsByCredentialIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchCredentialsByCredentialIdRequest(val *PatchCredentialsByCredentialIdRequest) *NullablePatchCredentialsByCredentialIdRequest {
	return &NullablePatchCredentialsByCredentialIdRequest{value: val, isSet: true}
}

func (v NullablePatchCredentialsByCredentialIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchCredentialsByCredentialIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
