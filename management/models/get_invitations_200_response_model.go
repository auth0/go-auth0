/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetInvitations200Response - struct for GetInvitations200Response
type GetInvitations200Response struct {
	GetInvitations200ResponseOneOf             *GetInvitations200ResponseOneOf
	ArrayOfGetInvitations200ResponseOneOfInner *[]GetInvitations200ResponseOneOfInner
}

// GetInvitations200ResponseOneOfAsGetInvitations200Response is a convenience function that returns GetInvitations200ResponseOneOf wrapped in GetInvitations200Response
func GetInvitations200ResponseOneOfAsGetInvitations200Response(v *GetInvitations200ResponseOneOf) GetInvitations200Response {
	return GetInvitations200Response{
		GetInvitations200ResponseOneOf: v,
	}
}

// []GetInvitations200ResponseOneOfInnerAsGetInvitations200Response is a convenience function that returns []GetInvitations200ResponseOneOfInner wrapped in GetInvitations200Response
func ArrayOfGetInvitations200ResponseOneOfInnerAsGetInvitations200Response(v *[]GetInvitations200ResponseOneOfInner) GetInvitations200Response {
	return GetInvitations200Response{
		ArrayOfGetInvitations200ResponseOneOfInner: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetInvitations200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetInvitations200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetInvitations200ResponseOneOf)
	if err == nil {
		jsonGetInvitations200ResponseOneOf, _ := json.Marshal(dst.GetInvitations200ResponseOneOf)
		if string(jsonGetInvitations200ResponseOneOf) == "{}" { // empty struct
			dst.GetInvitations200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetInvitations200ResponseOneOf); err != nil {
				dst.GetInvitations200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetInvitations200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfGetInvitations200ResponseOneOfInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGetInvitations200ResponseOneOfInner)
	if err == nil {
		jsonArrayOfGetInvitations200ResponseOneOfInner, _ := json.Marshal(dst.ArrayOfGetInvitations200ResponseOneOfInner)
		if string(jsonArrayOfGetInvitations200ResponseOneOfInner) == "{}" { // empty struct
			dst.ArrayOfGetInvitations200ResponseOneOfInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfGetInvitations200ResponseOneOfInner); err != nil {
				dst.ArrayOfGetInvitations200ResponseOneOfInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfGetInvitations200ResponseOneOfInner = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetInvitations200ResponseOneOf = nil
		dst.ArrayOfGetInvitations200ResponseOneOfInner = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetInvitations200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetInvitations200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetInvitations200Response) MarshalJSON() ([]byte, error) {
	if src.GetInvitations200ResponseOneOf != nil {
		return json.Marshal(&src.GetInvitations200ResponseOneOf)
	}

	if src.ArrayOfGetInvitations200ResponseOneOfInner != nil {
		return json.Marshal(&src.ArrayOfGetInvitations200ResponseOneOfInner)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetInvitations200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetInvitations200ResponseOneOf != nil {
		return obj.GetInvitations200ResponseOneOf
	}

	if obj.ArrayOfGetInvitations200ResponseOneOfInner != nil {
		return obj.ArrayOfGetInvitations200ResponseOneOfInner
	}

	// all schemas are nil
	return nil
}

type NullableGetInvitations200Response struct {
	value *GetInvitations200Response
	isSet bool
}

func (v NullableGetInvitations200Response) Get() *GetInvitations200Response {
	return v.value
}

func (v *NullableGetInvitations200Response) Set(val *GetInvitations200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetInvitations200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetInvitations200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetInvitations200Response(val *GetInvitations200Response) *NullableGetInvitations200Response {
	return &NullableGetInvitations200Response{value: val, isSet: true}
}

func (v NullableGetInvitations200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetInvitations200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
