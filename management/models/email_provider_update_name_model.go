/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// EmailProviderUpdateName Name of the email provider. Can be `mailgun`, `mandrill`, `sendgrid`, `ses`, `sparkpost`, `smtp`, `azure_cs`, `ms365`, or `custom`.
type EmailProviderUpdateName string

// List of emailProviderUpdate_name
const (
	EMAILPROVIDERUPDATENAME_MAILGUN   EmailProviderUpdateName = "mailgun"
	EMAILPROVIDERUPDATENAME_MANDRILL  EmailProviderUpdateName = "mandrill"
	EMAILPROVIDERUPDATENAME_SENDGRID  EmailProviderUpdateName = "sendgrid"
	EMAILPROVIDERUPDATENAME_SES       EmailProviderUpdateName = "ses"
	EMAILPROVIDERUPDATENAME_SPARKPOST EmailProviderUpdateName = "sparkpost"
	EMAILPROVIDERUPDATENAME_SMTP      EmailProviderUpdateName = "smtp"
	EMAILPROVIDERUPDATENAME_AZURE_CS  EmailProviderUpdateName = "azure_cs"
	EMAILPROVIDERUPDATENAME_MS365     EmailProviderUpdateName = "ms365"
	EMAILPROVIDERUPDATENAME_CUSTOM    EmailProviderUpdateName = "custom"
)

// All allowed values of EmailProviderUpdateName enum
var AllowedEmailProviderUpdateNameEnumValues = []EmailProviderUpdateName{
	"mailgun",
	"mandrill",
	"sendgrid",
	"ses",
	"sparkpost",
	"smtp",
	"azure_cs",
	"ms365",
	"custom",
}

func (v *EmailProviderUpdateName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmailProviderUpdateName(value)
	for _, existing := range AllowedEmailProviderUpdateNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmailProviderUpdateName", value)
}

// NewEmailProviderUpdateNameFromValue returns a pointer to a valid EmailProviderUpdateName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmailProviderUpdateNameFromValue(v string) (*EmailProviderUpdateName, error) {
	ev := EmailProviderUpdateName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmailProviderUpdateName: valid values are %v", v, AllowedEmailProviderUpdateNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmailProviderUpdateName) IsValid() bool {
	for _, existing := range AllowedEmailProviderUpdateNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to emailProviderUpdate_name value
func (v EmailProviderUpdateName) Ptr() *EmailProviderUpdateName {
	return &v
}

type NullableEmailProviderUpdateName struct {
	value *EmailProviderUpdateName
	isSet bool
}

func (v NullableEmailProviderUpdateName) Get() *EmailProviderUpdateName {
	return v.value
}

func (v *NullableEmailProviderUpdateName) Set(val *EmailProviderUpdateName) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProviderUpdateName) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProviderUpdateName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProviderUpdateName(val *EmailProviderUpdateName) *NullableEmailProviderUpdateName {
	return &NullableEmailProviderUpdateName{value: val, isSet: true}
}

func (v NullableEmailProviderUpdateName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProviderUpdateName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
