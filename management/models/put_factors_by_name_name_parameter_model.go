/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PutFactorsByNameNameParameter the model 'PutFactorsByNameNameParameter'
type PutFactorsByNameNameParameter string

// List of put_factors_by_name_name_parameter
const (
	PUTFACTORSBYNAMENAMEPARAMETER_PUSH_NOTIFICATION PutFactorsByNameNameParameter = "push-notification"
	PUTFACTORSBYNAMENAMEPARAMETER_SMS               PutFactorsByNameNameParameter = "sms"
	PUTFACTORSBYNAMENAMEPARAMETER_EMAIL             PutFactorsByNameNameParameter = "email"
	PUTFACTORSBYNAMENAMEPARAMETER_DUO               PutFactorsByNameNameParameter = "duo"
	PUTFACTORSBYNAMENAMEPARAMETER_OTP               PutFactorsByNameNameParameter = "otp"
	PUTFACTORSBYNAMENAMEPARAMETER_WEBAUTHN_ROAMING  PutFactorsByNameNameParameter = "webauthn-roaming"
	PUTFACTORSBYNAMENAMEPARAMETER_WEBAUTHN_PLATFORM PutFactorsByNameNameParameter = "webauthn-platform"
	PUTFACTORSBYNAMENAMEPARAMETER_RECOVERY_CODE     PutFactorsByNameNameParameter = "recovery-code"
)

// All allowed values of PutFactorsByNameNameParameter enum
var AllowedPutFactorsByNameNameParameterEnumValues = []PutFactorsByNameNameParameter{
	"push-notification",
	"sms",
	"email",
	"duo",
	"otp",
	"webauthn-roaming",
	"webauthn-platform",
	"recovery-code",
}

func (v *PutFactorsByNameNameParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PutFactorsByNameNameParameter(value)
	for _, existing := range AllowedPutFactorsByNameNameParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PutFactorsByNameNameParameter", value)
}

// NewPutFactorsByNameNameParameterFromValue returns a pointer to a valid PutFactorsByNameNameParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPutFactorsByNameNameParameterFromValue(v string) (*PutFactorsByNameNameParameter, error) {
	ev := PutFactorsByNameNameParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PutFactorsByNameNameParameter: valid values are %v", v, AllowedPutFactorsByNameNameParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PutFactorsByNameNameParameter) IsValid() bool {
	for _, existing := range AllowedPutFactorsByNameNameParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to put_factors_by_name_name_parameter value
func (v PutFactorsByNameNameParameter) Ptr() *PutFactorsByNameNameParameter {
	return &v
}

type NullablePutFactorsByNameNameParameter struct {
	value *PutFactorsByNameNameParameter
	isSet bool
}

func (v NullablePutFactorsByNameNameParameter) Get() *PutFactorsByNameNameParameter {
	return v.value
}

func (v *NullablePutFactorsByNameNameParameter) Set(val *PutFactorsByNameNameParameter) {
	v.value = val
	v.isSet = true
}

func (v NullablePutFactorsByNameNameParameter) IsSet() bool {
	return v.isSet
}

func (v *NullablePutFactorsByNameNameParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutFactorsByNameNameParameter(val *PutFactorsByNameNameParameter) *NullablePutFactorsByNameNameParameter {
	return &NullablePutFactorsByNameNameParameter{value: val, isSet: true}
}

func (v NullablePutFactorsByNameNameParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutFactorsByNameNameParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
