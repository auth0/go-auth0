/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ClientAddonsEchosign Adobe EchoSign SSO configuration.
type ClientAddonsEchosign struct {
	// Your custom domain found in your EchoSign URL. e.g. `https://acme-org.echosign.com` would be `acme-org`.
	Domain               *string `json:"domain,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClientAddonsEchosign ClientAddonsEchosign

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ClientAddonsEchosign) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientAddonsEchosign) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ClientAddonsEchosign) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ClientAddonsEchosign) SetDomain(v string) {
	o.Domain = &v
}

func (o ClientAddonsEchosign) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientAddonsEchosign) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClientAddonsEchosign) UnmarshalJSON(data []byte) (err error) {
	varClientAddonsEchosign := _ClientAddonsEchosign{}

	err = json.Unmarshal(data, &varClientAddonsEchosign)

	if err != nil {
		return err
	}

	*o = ClientAddonsEchosign(varClientAddonsEchosign)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "domain")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClientAddonsEchosign struct {
	value *ClientAddonsEchosign
	isSet bool
}

func (v NullableClientAddonsEchosign) Get() *ClientAddonsEchosign {
	return v.value
}

func (v *NullableClientAddonsEchosign) Set(val *ClientAddonsEchosign) {
	v.value = val
	v.isSet = true
}

func (v NullableClientAddonsEchosign) IsSet() bool {
	return v.isSet
}

func (v *NullableClientAddonsEchosign) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientAddonsEchosign(val *ClientAddonsEchosign) *NullableClientAddonsEchosign {
	return &NullableClientAddonsEchosign{value: val, isSet: true}
}

func (v NullableClientAddonsEchosign) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientAddonsEchosign) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
