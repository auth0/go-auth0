/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// GetLogStreams200ResponseInnerOneOf4Sink struct for GetLogStreams200ResponseInnerOneOf4Sink
type GetLogStreams200ResponseInnerOneOf4Sink struct {
	// Splunk URL Endpoint
	SplunkDomain string `json:"splunkDomain"`
	// Port
	SplunkPort string `json:"splunkPort"`
	// Splunk token
	SplunkToken string `json:"splunkToken"`
	// Verify TLS certificate
	SplunkSecure bool `json:"splunkSecure"`
}

type _GetLogStreams200ResponseInnerOneOf4Sink GetLogStreams200ResponseInnerOneOf4Sink

// GetSplunkDomain returns the SplunkDomain field value
func (o *GetLogStreams200ResponseInnerOneOf4Sink) GetSplunkDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SplunkDomain
}

// GetSplunkDomainOk returns a tuple with the SplunkDomain field value
// and a boolean to check if the value has been set.
func (o *GetLogStreams200ResponseInnerOneOf4Sink) GetSplunkDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SplunkDomain, true
}

// SetSplunkDomain sets field value
func (o *GetLogStreams200ResponseInnerOneOf4Sink) SetSplunkDomain(v string) {
	o.SplunkDomain = v
}

// GetSplunkPort returns the SplunkPort field value
func (o *GetLogStreams200ResponseInnerOneOf4Sink) GetSplunkPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SplunkPort
}

// GetSplunkPortOk returns a tuple with the SplunkPort field value
// and a boolean to check if the value has been set.
func (o *GetLogStreams200ResponseInnerOneOf4Sink) GetSplunkPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SplunkPort, true
}

// SetSplunkPort sets field value
func (o *GetLogStreams200ResponseInnerOneOf4Sink) SetSplunkPort(v string) {
	o.SplunkPort = v
}

// GetSplunkToken returns the SplunkToken field value
func (o *GetLogStreams200ResponseInnerOneOf4Sink) GetSplunkToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SplunkToken
}

// GetSplunkTokenOk returns a tuple with the SplunkToken field value
// and a boolean to check if the value has been set.
func (o *GetLogStreams200ResponseInnerOneOf4Sink) GetSplunkTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SplunkToken, true
}

// SetSplunkToken sets field value
func (o *GetLogStreams200ResponseInnerOneOf4Sink) SetSplunkToken(v string) {
	o.SplunkToken = v
}

// GetSplunkSecure returns the SplunkSecure field value
func (o *GetLogStreams200ResponseInnerOneOf4Sink) GetSplunkSecure() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SplunkSecure
}

// GetSplunkSecureOk returns a tuple with the SplunkSecure field value
// and a boolean to check if the value has been set.
func (o *GetLogStreams200ResponseInnerOneOf4Sink) GetSplunkSecureOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SplunkSecure, true
}

// SetSplunkSecure sets field value
func (o *GetLogStreams200ResponseInnerOneOf4Sink) SetSplunkSecure(v bool) {
	o.SplunkSecure = v
}

func (o GetLogStreams200ResponseInnerOneOf4Sink) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetLogStreams200ResponseInnerOneOf4Sink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["splunkDomain"] = o.SplunkDomain
	toSerialize["splunkPort"] = o.SplunkPort
	toSerialize["splunkToken"] = o.SplunkToken
	toSerialize["splunkSecure"] = o.SplunkSecure
	return toSerialize, nil
}

func (o *GetLogStreams200ResponseInnerOneOf4Sink) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"splunkDomain",
		"splunkPort",
		"splunkToken",
		"splunkSecure",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetLogStreams200ResponseInnerOneOf4Sink := _GetLogStreams200ResponseInnerOneOf4Sink{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varGetLogStreams200ResponseInnerOneOf4Sink)

	if err != nil {
		return err
	}

	*o = GetLogStreams200ResponseInnerOneOf4Sink(varGetLogStreams200ResponseInnerOneOf4Sink)

	return err
}

type NullableGetLogStreams200ResponseInnerOneOf4Sink struct {
	value *GetLogStreams200ResponseInnerOneOf4Sink
	isSet bool
}

func (v NullableGetLogStreams200ResponseInnerOneOf4Sink) Get() *GetLogStreams200ResponseInnerOneOf4Sink {
	return v.value
}

func (v *NullableGetLogStreams200ResponseInnerOneOf4Sink) Set(val *GetLogStreams200ResponseInnerOneOf4Sink) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLogStreams200ResponseInnerOneOf4Sink) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLogStreams200ResponseInnerOneOf4Sink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLogStreams200ResponseInnerOneOf4Sink(val *GetLogStreams200ResponseInnerOneOf4Sink) *NullableGetLogStreams200ResponseInnerOneOf4Sink {
	return &NullableGetLogStreams200ResponseInnerOneOf4Sink{value: val, isSet: true}
}

func (v NullableGetLogStreams200ResponseInnerOneOf4Sink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLogStreams200ResponseInnerOneOf4Sink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
