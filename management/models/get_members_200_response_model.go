/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetMembers200Response - struct for GetMembers200Response
type GetMembers200Response struct {
	GetMembers200ResponseOneOf             *GetMembers200ResponseOneOf
	GetMembers200ResponseOneOf1            *GetMembers200ResponseOneOf1
	ArrayOfGetMembers200ResponseOneOfInner *[]GetMembers200ResponseOneOfInner
}

// GetMembers200ResponseOneOfAsGetMembers200Response is a convenience function that returns GetMembers200ResponseOneOf wrapped in GetMembers200Response
func GetMembers200ResponseOneOfAsGetMembers200Response(v *GetMembers200ResponseOneOf) GetMembers200Response {
	return GetMembers200Response{
		GetMembers200ResponseOneOf: v,
	}
}

// GetMembers200ResponseOneOf1AsGetMembers200Response is a convenience function that returns GetMembers200ResponseOneOf1 wrapped in GetMembers200Response
func GetMembers200ResponseOneOf1AsGetMembers200Response(v *GetMembers200ResponseOneOf1) GetMembers200Response {
	return GetMembers200Response{
		GetMembers200ResponseOneOf1: v,
	}
}

// []GetMembers200ResponseOneOfInnerAsGetMembers200Response is a convenience function that returns []GetMembers200ResponseOneOfInner wrapped in GetMembers200Response
func ArrayOfGetMembers200ResponseOneOfInnerAsGetMembers200Response(v *[]GetMembers200ResponseOneOfInner) GetMembers200Response {
	return GetMembers200Response{
		ArrayOfGetMembers200ResponseOneOfInner: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMembers200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMembers200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetMembers200ResponseOneOf)
	if err == nil {
		jsonGetMembers200ResponseOneOf, _ := json.Marshal(dst.GetMembers200ResponseOneOf)
		if string(jsonGetMembers200ResponseOneOf) == "{}" { // empty struct
			dst.GetMembers200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetMembers200ResponseOneOf); err != nil {
				dst.GetMembers200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetMembers200ResponseOneOf = nil
	}

	// try to unmarshal data into GetMembers200ResponseOneOf1
	err = newStrictDecoder(data).Decode(&dst.GetMembers200ResponseOneOf1)
	if err == nil {
		jsonGetMembers200ResponseOneOf1, _ := json.Marshal(dst.GetMembers200ResponseOneOf1)
		if string(jsonGetMembers200ResponseOneOf1) == "{}" { // empty struct
			dst.GetMembers200ResponseOneOf1 = nil
		} else {
			if err = validator.Validate(dst.GetMembers200ResponseOneOf1); err != nil {
				dst.GetMembers200ResponseOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetMembers200ResponseOneOf1 = nil
	}

	// try to unmarshal data into ArrayOfGetMembers200ResponseOneOfInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGetMembers200ResponseOneOfInner)
	if err == nil {
		jsonArrayOfGetMembers200ResponseOneOfInner, _ := json.Marshal(dst.ArrayOfGetMembers200ResponseOneOfInner)
		if string(jsonArrayOfGetMembers200ResponseOneOfInner) == "{}" { // empty struct
			dst.ArrayOfGetMembers200ResponseOneOfInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfGetMembers200ResponseOneOfInner); err != nil {
				dst.ArrayOfGetMembers200ResponseOneOfInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfGetMembers200ResponseOneOfInner = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMembers200ResponseOneOf = nil
		dst.GetMembers200ResponseOneOf1 = nil
		dst.ArrayOfGetMembers200ResponseOneOfInner = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMembers200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMembers200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMembers200Response) MarshalJSON() ([]byte, error) {
	if src.GetMembers200ResponseOneOf != nil {
		return json.Marshal(&src.GetMembers200ResponseOneOf)
	}

	if src.GetMembers200ResponseOneOf1 != nil {
		return json.Marshal(&src.GetMembers200ResponseOneOf1)
	}

	if src.ArrayOfGetMembers200ResponseOneOfInner != nil {
		return json.Marshal(&src.ArrayOfGetMembers200ResponseOneOfInner)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMembers200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMembers200ResponseOneOf != nil {
		return obj.GetMembers200ResponseOneOf
	}

	if obj.GetMembers200ResponseOneOf1 != nil {
		return obj.GetMembers200ResponseOneOf1
	}

	if obj.ArrayOfGetMembers200ResponseOneOfInner != nil {
		return obj.ArrayOfGetMembers200ResponseOneOfInner
	}

	// all schemas are nil
	return nil
}

type NullableGetMembers200Response struct {
	value *GetMembers200Response
	isSet bool
}

func (v NullableGetMembers200Response) Get() *GetMembers200Response {
	return v.value
}

func (v *NullableGetMembers200Response) Set(val *GetMembers200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMembers200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMembers200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMembers200Response(val *GetMembers200Response) *NullableGetMembers200Response {
	return &NullableGetMembers200Response{value: val, isSet: true}
}

func (v NullableGetMembers200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMembers200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
