/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// PatchBrandingRequest Branding settings
type PatchBrandingRequest struct {
	Colors NullablePatchBrandingRequestColors `json:"colors,omitempty"`
	// URL for the favicon. Must use HTTPS.
	FaviconUrl NullableString `json:"favicon_url,omitempty"`
	// URL for the logo. Must use HTTPS.
	LogoUrl NullableString                   `json:"logo_url,omitempty"`
	Font    NullablePatchBrandingRequestFont `json:"font,omitempty"`
}

// GetColors returns the Colors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchBrandingRequest) GetColors() PatchBrandingRequestColors {
	if o == nil || IsNil(o.Colors.Get()) {
		var ret PatchBrandingRequestColors
		return ret
	}
	return *o.Colors.Get()
}

// GetColorsOk returns a tuple with the Colors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchBrandingRequest) GetColorsOk() (*PatchBrandingRequestColors, bool) {
	if o == nil {
		return nil, false
	}
	return o.Colors.Get(), o.Colors.IsSet()
}

// HasColors returns a boolean if a field has been set.
func (o *PatchBrandingRequest) HasColors() bool {
	if o != nil && o.Colors.IsSet() {
		return true
	}

	return false
}

// SetColors gets a reference to the given NullablePatchBrandingRequestColors and assigns it to the Colors field.
func (o *PatchBrandingRequest) SetColors(v PatchBrandingRequestColors) {
	o.Colors.Set(&v)
}

// SetColorsNil sets the value for Colors to be an explicit nil
func (o *PatchBrandingRequest) SetColorsNil() {
	o.Colors.Set(nil)
}

// UnsetColors ensures that no value is present for Colors, not even an explicit nil
func (o *PatchBrandingRequest) UnsetColors() {
	o.Colors.Unset()
}

// GetFaviconUrl returns the FaviconUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchBrandingRequest) GetFaviconUrl() string {
	if o == nil || IsNil(o.FaviconUrl.Get()) {
		var ret string
		return ret
	}
	return *o.FaviconUrl.Get()
}

// GetFaviconUrlOk returns a tuple with the FaviconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchBrandingRequest) GetFaviconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FaviconUrl.Get(), o.FaviconUrl.IsSet()
}

// HasFaviconUrl returns a boolean if a field has been set.
func (o *PatchBrandingRequest) HasFaviconUrl() bool {
	if o != nil && o.FaviconUrl.IsSet() {
		return true
	}

	return false
}

// SetFaviconUrl gets a reference to the given NullableString and assigns it to the FaviconUrl field.
func (o *PatchBrandingRequest) SetFaviconUrl(v string) {
	o.FaviconUrl.Set(&v)
}

// SetFaviconUrlNil sets the value for FaviconUrl to be an explicit nil
func (o *PatchBrandingRequest) SetFaviconUrlNil() {
	o.FaviconUrl.Set(nil)
}

// UnsetFaviconUrl ensures that no value is present for FaviconUrl, not even an explicit nil
func (o *PatchBrandingRequest) UnsetFaviconUrl() {
	o.FaviconUrl.Unset()
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchBrandingRequest) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl.Get()) {
		var ret string
		return ret
	}
	return *o.LogoUrl.Get()
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchBrandingRequest) GetLogoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogoUrl.Get(), o.LogoUrl.IsSet()
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *PatchBrandingRequest) HasLogoUrl() bool {
	if o != nil && o.LogoUrl.IsSet() {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given NullableString and assigns it to the LogoUrl field.
func (o *PatchBrandingRequest) SetLogoUrl(v string) {
	o.LogoUrl.Set(&v)
}

// SetLogoUrlNil sets the value for LogoUrl to be an explicit nil
func (o *PatchBrandingRequest) SetLogoUrlNil() {
	o.LogoUrl.Set(nil)
}

// UnsetLogoUrl ensures that no value is present for LogoUrl, not even an explicit nil
func (o *PatchBrandingRequest) UnsetLogoUrl() {
	o.LogoUrl.Unset()
}

// GetFont returns the Font field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchBrandingRequest) GetFont() PatchBrandingRequestFont {
	if o == nil || IsNil(o.Font.Get()) {
		var ret PatchBrandingRequestFont
		return ret
	}
	return *o.Font.Get()
}

// GetFontOk returns a tuple with the Font field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchBrandingRequest) GetFontOk() (*PatchBrandingRequestFont, bool) {
	if o == nil {
		return nil, false
	}
	return o.Font.Get(), o.Font.IsSet()
}

// HasFont returns a boolean if a field has been set.
func (o *PatchBrandingRequest) HasFont() bool {
	if o != nil && o.Font.IsSet() {
		return true
	}

	return false
}

// SetFont gets a reference to the given NullablePatchBrandingRequestFont and assigns it to the Font field.
func (o *PatchBrandingRequest) SetFont(v PatchBrandingRequestFont) {
	o.Font.Set(&v)
}

// SetFontNil sets the value for Font to be an explicit nil
func (o *PatchBrandingRequest) SetFontNil() {
	o.Font.Set(nil)
}

// UnsetFont ensures that no value is present for Font, not even an explicit nil
func (o *PatchBrandingRequest) UnsetFont() {
	o.Font.Unset()
}

func (o PatchBrandingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchBrandingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Colors.IsSet() {
		toSerialize["colors"] = o.Colors.Get()
	}
	if o.FaviconUrl.IsSet() {
		toSerialize["favicon_url"] = o.FaviconUrl.Get()
	}
	if o.LogoUrl.IsSet() {
		toSerialize["logo_url"] = o.LogoUrl.Get()
	}
	if o.Font.IsSet() {
		toSerialize["font"] = o.Font.Get()
	}
	return toSerialize, nil
}

type NullablePatchBrandingRequest struct {
	value *PatchBrandingRequest
	isSet bool
}

func (v NullablePatchBrandingRequest) Get() *PatchBrandingRequest {
	return v.value
}

func (v *NullablePatchBrandingRequest) Set(val *PatchBrandingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchBrandingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchBrandingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchBrandingRequest(val *PatchBrandingRequest) *NullablePatchBrandingRequest {
	return &NullablePatchBrandingRequest{value: val, isSet: true}
}

func (v NullablePatchBrandingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchBrandingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
