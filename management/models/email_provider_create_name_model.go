/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// EmailProviderCreateName Name of the email provider. Can be `mailgun`, `mandrill`, `sendgrid`, `ses`, `sparkpost`, `smtp`, `azure_cs`, `ms365`, or `custom`.
type EmailProviderCreateName string

// List of emailProviderCreate_name
const (
	EMAILPROVIDERCREATENAME_MAILGUN   EmailProviderCreateName = "mailgun"
	EMAILPROVIDERCREATENAME_MANDRILL  EmailProviderCreateName = "mandrill"
	EMAILPROVIDERCREATENAME_SENDGRID  EmailProviderCreateName = "sendgrid"
	EMAILPROVIDERCREATENAME_SES       EmailProviderCreateName = "ses"
	EMAILPROVIDERCREATENAME_SPARKPOST EmailProviderCreateName = "sparkpost"
	EMAILPROVIDERCREATENAME_SMTP      EmailProviderCreateName = "smtp"
	EMAILPROVIDERCREATENAME_AZURE_CS  EmailProviderCreateName = "azure_cs"
	EMAILPROVIDERCREATENAME_MS365     EmailProviderCreateName = "ms365"
	EMAILPROVIDERCREATENAME_CUSTOM    EmailProviderCreateName = "custom"
)

// All allowed values of EmailProviderCreateName enum
var AllowedEmailProviderCreateNameEnumValues = []EmailProviderCreateName{
	"mailgun",
	"mandrill",
	"sendgrid",
	"ses",
	"sparkpost",
	"smtp",
	"azure_cs",
	"ms365",
	"custom",
}

func (v *EmailProviderCreateName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmailProviderCreateName(value)
	for _, existing := range AllowedEmailProviderCreateNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmailProviderCreateName", value)
}

// NewEmailProviderCreateNameFromValue returns a pointer to a valid EmailProviderCreateName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmailProviderCreateNameFromValue(v string) (*EmailProviderCreateName, error) {
	ev := EmailProviderCreateName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmailProviderCreateName: valid values are %v", v, AllowedEmailProviderCreateNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmailProviderCreateName) IsValid() bool {
	for _, existing := range AllowedEmailProviderCreateNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to emailProviderCreate_name value
func (v EmailProviderCreateName) Ptr() *EmailProviderCreateName {
	return &v
}

type NullableEmailProviderCreateName struct {
	value *EmailProviderCreateName
	isSet bool
}

func (v NullableEmailProviderCreateName) Get() *EmailProviderCreateName {
	return v.value
}

func (v *NullableEmailProviderCreateName) Set(val *EmailProviderCreateName) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailProviderCreateName) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailProviderCreateName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailProviderCreateName(val *EmailProviderCreateName) *NullableEmailProviderCreateName {
	return &NullableEmailProviderCreateName{value: val, isSet: true}
}

func (v NullableEmailProviderCreateName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailProviderCreateName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
