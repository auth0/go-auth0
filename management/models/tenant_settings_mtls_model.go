/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// TenantSettingsMtls mTLS configuration.
type TenantSettingsMtls struct {
	// If true, enables mTLS endpoint aliases
	EnableEndpointAliases *bool `json:"enable_endpoint_aliases,omitempty"`
}

// GetEnableEndpointAliases returns the EnableEndpointAliases field value if set, zero value otherwise.
func (o *TenantSettingsMtls) GetEnableEndpointAliases() bool {
	if o == nil || IsNil(o.EnableEndpointAliases) {
		var ret bool
		return ret
	}
	return *o.EnableEndpointAliases
}

// GetEnableEndpointAliasesOk returns a tuple with the EnableEndpointAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantSettingsMtls) GetEnableEndpointAliasesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEndpointAliases) {
		return nil, false
	}
	return o.EnableEndpointAliases, true
}

// HasEnableEndpointAliases returns a boolean if a field has been set.
func (o *TenantSettingsMtls) HasEnableEndpointAliases() bool {
	if o != nil && !IsNil(o.EnableEndpointAliases) {
		return true
	}

	return false
}

// SetEnableEndpointAliases gets a reference to the given bool and assigns it to the EnableEndpointAliases field.
func (o *TenantSettingsMtls) SetEnableEndpointAliases(v bool) {
	o.EnableEndpointAliases = &v
}

func (o TenantSettingsMtls) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantSettingsMtls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableEndpointAliases) {
		toSerialize["enable_endpoint_aliases"] = o.EnableEndpointAliases
	}
	return toSerialize, nil
}

type NullableTenantSettingsMtls struct {
	value *TenantSettingsMtls
	isSet bool
}

func (v NullableTenantSettingsMtls) Get() *TenantSettingsMtls {
	return v.value
}

func (v *NullableTenantSettingsMtls) Set(val *TenantSettingsMtls) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantSettingsMtls) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantSettingsMtls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantSettingsMtls(val *TenantSettingsMtls) *NullableTenantSettingsMtls {
	return &NullableTenantSettingsMtls{value: val, isSet: true}
}

func (v NullableTenantSettingsMtls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantSettingsMtls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
