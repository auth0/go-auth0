/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// GetEnabledConnections200Response - struct for GetEnabledConnections200Response
type GetEnabledConnections200Response struct {
	GetEnabledConnections200ResponseOneOf             *GetEnabledConnections200ResponseOneOf
	ArrayOfGetEnabledConnections200ResponseOneOfInner *[]GetEnabledConnections200ResponseOneOfInner
}

// GetEnabledConnections200ResponseOneOfAsGetEnabledConnections200Response is a convenience function that returns GetEnabledConnections200ResponseOneOf wrapped in GetEnabledConnections200Response
func GetEnabledConnections200ResponseOneOfAsGetEnabledConnections200Response(v *GetEnabledConnections200ResponseOneOf) GetEnabledConnections200Response {
	return GetEnabledConnections200Response{
		GetEnabledConnections200ResponseOneOf: v,
	}
}

// []GetEnabledConnections200ResponseOneOfInnerAsGetEnabledConnections200Response is a convenience function that returns []GetEnabledConnections200ResponseOneOfInner wrapped in GetEnabledConnections200Response
func ArrayOfGetEnabledConnections200ResponseOneOfInnerAsGetEnabledConnections200Response(v *[]GetEnabledConnections200ResponseOneOfInner) GetEnabledConnections200Response {
	return GetEnabledConnections200Response{
		ArrayOfGetEnabledConnections200ResponseOneOfInner: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetEnabledConnections200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetEnabledConnections200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetEnabledConnections200ResponseOneOf)
	if err == nil {
		jsonGetEnabledConnections200ResponseOneOf, _ := json.Marshal(dst.GetEnabledConnections200ResponseOneOf)
		if string(jsonGetEnabledConnections200ResponseOneOf) == "{}" { // empty struct
			dst.GetEnabledConnections200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetEnabledConnections200ResponseOneOf); err != nil {
				dst.GetEnabledConnections200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetEnabledConnections200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfGetEnabledConnections200ResponseOneOfInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGetEnabledConnections200ResponseOneOfInner)
	if err == nil {
		jsonArrayOfGetEnabledConnections200ResponseOneOfInner, _ := json.Marshal(dst.ArrayOfGetEnabledConnections200ResponseOneOfInner)
		if string(jsonArrayOfGetEnabledConnections200ResponseOneOfInner) == "{}" { // empty struct
			dst.ArrayOfGetEnabledConnections200ResponseOneOfInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfGetEnabledConnections200ResponseOneOfInner); err != nil {
				dst.ArrayOfGetEnabledConnections200ResponseOneOfInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfGetEnabledConnections200ResponseOneOfInner = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetEnabledConnections200ResponseOneOf = nil
		dst.ArrayOfGetEnabledConnections200ResponseOneOfInner = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetEnabledConnections200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetEnabledConnections200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetEnabledConnections200Response) MarshalJSON() ([]byte, error) {
	if src.GetEnabledConnections200ResponseOneOf != nil {
		return json.Marshal(&src.GetEnabledConnections200ResponseOneOf)
	}

	if src.ArrayOfGetEnabledConnections200ResponseOneOfInner != nil {
		return json.Marshal(&src.ArrayOfGetEnabledConnections200ResponseOneOfInner)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetEnabledConnections200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetEnabledConnections200ResponseOneOf != nil {
		return obj.GetEnabledConnections200ResponseOneOf
	}

	if obj.ArrayOfGetEnabledConnections200ResponseOneOfInner != nil {
		return obj.ArrayOfGetEnabledConnections200ResponseOneOfInner
	}

	// all schemas are nil
	return nil
}

type NullableGetEnabledConnections200Response struct {
	value *GetEnabledConnections200Response
	isSet bool
}

func (v NullableGetEnabledConnections200Response) Get() *GetEnabledConnections200Response {
	return v.value
}

func (v *NullableGetEnabledConnections200Response) Set(val *GetEnabledConnections200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEnabledConnections200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEnabledConnections200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEnabledConnections200Response(val *GetEnabledConnections200Response) *NullableGetEnabledConnections200Response {
	return &NullableGetEnabledConnections200Response{value: val, isSet: true}
}

func (v NullableGetEnabledConnections200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEnabledConnections200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
