/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// ConnectionCreateOptionsValidationUsername struct for ConnectionCreateOptionsValidationUsername
type ConnectionCreateOptionsValidationUsername struct {
	Min int32 `json:"min"`
	Max int32 `json:"max"`
}

type _ConnectionCreateOptionsValidationUsername ConnectionCreateOptionsValidationUsername

// GetMin returns the Min field value
func (o *ConnectionCreateOptionsValidationUsername) GetMin() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Min
}

// GetMinOk returns a tuple with the Min field value
// and a boolean to check if the value has been set.
func (o *ConnectionCreateOptionsValidationUsername) GetMinOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Min, true
}

// SetMin sets field value
func (o *ConnectionCreateOptionsValidationUsername) SetMin(v int32) {
	o.Min = v
}

// GetMax returns the Max field value
func (o *ConnectionCreateOptionsValidationUsername) GetMax() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Max
}

// GetMaxOk returns a tuple with the Max field value
// and a boolean to check if the value has been set.
func (o *ConnectionCreateOptionsValidationUsername) GetMaxOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Max, true
}

// SetMax sets field value
func (o *ConnectionCreateOptionsValidationUsername) SetMax(v int32) {
	o.Max = v
}

func (o ConnectionCreateOptionsValidationUsername) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionCreateOptionsValidationUsername) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["min"] = o.Min
	toSerialize["max"] = o.Max
	return toSerialize, nil
}

func (o *ConnectionCreateOptionsValidationUsername) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"min",
		"max",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionCreateOptionsValidationUsername := _ConnectionCreateOptionsValidationUsername{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectionCreateOptionsValidationUsername)

	if err != nil {
		return err
	}

	*o = ConnectionCreateOptionsValidationUsername(varConnectionCreateOptionsValidationUsername)

	return err
}

type NullableConnectionCreateOptionsValidationUsername struct {
	value *ConnectionCreateOptionsValidationUsername
	isSet bool
}

func (v NullableConnectionCreateOptionsValidationUsername) Get() *ConnectionCreateOptionsValidationUsername {
	return v.value
}

func (v *NullableConnectionCreateOptionsValidationUsername) Set(val *ConnectionCreateOptionsValidationUsername) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionCreateOptionsValidationUsername) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionCreateOptionsValidationUsername) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionCreateOptionsValidationUsername(val *ConnectionCreateOptionsValidationUsername) *NullableConnectionCreateOptionsValidationUsername {
	return &NullableConnectionCreateOptionsValidationUsername{value: val, isSet: true}
}

func (v NullableConnectionCreateOptionsValidationUsername) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionCreateOptionsValidationUsername) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
