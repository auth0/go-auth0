/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// ResourceServerProofOfPossession Proof-of-Possession configuration for access tokens
type ResourceServerProofOfPossession struct {
	Mechanism ResourceServerProofOfPossessionMechanism `json:"mechanism"`
	// Whether the use of Proof-of-Possession is required for the resource server
	Required bool `json:"required"`
}

type _ResourceServerProofOfPossession ResourceServerProofOfPossession

// GetMechanism returns the Mechanism field value
func (o *ResourceServerProofOfPossession) GetMechanism() ResourceServerProofOfPossessionMechanism {
	if o == nil {
		var ret ResourceServerProofOfPossessionMechanism
		return ret
	}

	return o.Mechanism
}

// GetMechanismOk returns a tuple with the Mechanism field value
// and a boolean to check if the value has been set.
func (o *ResourceServerProofOfPossession) GetMechanismOk() (*ResourceServerProofOfPossessionMechanism, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mechanism, true
}

// SetMechanism sets field value
func (o *ResourceServerProofOfPossession) SetMechanism(v ResourceServerProofOfPossessionMechanism) {
	o.Mechanism = v
}

// GetRequired returns the Required field value
func (o *ResourceServerProofOfPossession) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *ResourceServerProofOfPossession) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *ResourceServerProofOfPossession) SetRequired(v bool) {
	o.Required = v
}

func (o ResourceServerProofOfPossession) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceServerProofOfPossession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mechanism"] = o.Mechanism
	toSerialize["required"] = o.Required
	return toSerialize, nil
}

func (o *ResourceServerProofOfPossession) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mechanism",
		"required",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceServerProofOfPossession := _ResourceServerProofOfPossession{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceServerProofOfPossession)

	if err != nil {
		return err
	}

	*o = ResourceServerProofOfPossession(varResourceServerProofOfPossession)

	return err
}

type NullableResourceServerProofOfPossession struct {
	value *ResourceServerProofOfPossession
	isSet bool
}

func (v NullableResourceServerProofOfPossession) Get() *ResourceServerProofOfPossession {
	return v.value
}

func (v *NullableResourceServerProofOfPossession) Set(val *ResourceServerProofOfPossession) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceServerProofOfPossession) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceServerProofOfPossession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceServerProofOfPossession(val *ResourceServerProofOfPossession) *NullableResourceServerProofOfPossession {
	return &NullableResourceServerProofOfPossession{value: val, isSet: true}
}

func (v NullableResourceServerProofOfPossession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceServerProofOfPossession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
