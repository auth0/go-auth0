/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ClientTokenEndpointAuthMethod Defines the requested authentication method for the token endpoint. Can be `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), or `client_secret_basic` (client uses HTTP Basic).
type ClientTokenEndpointAuthMethod string

// List of client_token_endpoint_auth_method
const (
	CLIENTTOKENENDPOINTAUTHMETHOD_NONE                ClientTokenEndpointAuthMethod = "none"
	CLIENTTOKENENDPOINTAUTHMETHOD_CLIENT_SECRET_POST  ClientTokenEndpointAuthMethod = "client_secret_post"
	CLIENTTOKENENDPOINTAUTHMETHOD_CLIENT_SECRET_BASIC ClientTokenEndpointAuthMethod = "client_secret_basic"
)

// All allowed values of ClientTokenEndpointAuthMethod enum
var AllowedClientTokenEndpointAuthMethodEnumValues = []ClientTokenEndpointAuthMethod{
	"none",
	"client_secret_post",
	"client_secret_basic",
}

func (v *ClientTokenEndpointAuthMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClientTokenEndpointAuthMethod(value)
	for _, existing := range AllowedClientTokenEndpointAuthMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClientTokenEndpointAuthMethod", value)
}

// NewClientTokenEndpointAuthMethodFromValue returns a pointer to a valid ClientTokenEndpointAuthMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClientTokenEndpointAuthMethodFromValue(v string) (*ClientTokenEndpointAuthMethod, error) {
	ev := ClientTokenEndpointAuthMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClientTokenEndpointAuthMethod: valid values are %v", v, AllowedClientTokenEndpointAuthMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClientTokenEndpointAuthMethod) IsValid() bool {
	for _, existing := range AllowedClientTokenEndpointAuthMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to client_token_endpoint_auth_method value
func (v ClientTokenEndpointAuthMethod) Ptr() *ClientTokenEndpointAuthMethod {
	return &v
}

type NullableClientTokenEndpointAuthMethod struct {
	value *ClientTokenEndpointAuthMethod
	isSet bool
}

func (v NullableClientTokenEndpointAuthMethod) Get() *ClientTokenEndpointAuthMethod {
	return v.value
}

func (v *NullableClientTokenEndpointAuthMethod) Set(val *ClientTokenEndpointAuthMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableClientTokenEndpointAuthMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableClientTokenEndpointAuthMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientTokenEndpointAuthMethod(val *ClientTokenEndpointAuthMethod) *NullableClientTokenEndpointAuthMethod {
	return &NullableClientTokenEndpointAuthMethod{value: val, isSet: true}
}

func (v NullableClientTokenEndpointAuthMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientTokenEndpointAuthMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
