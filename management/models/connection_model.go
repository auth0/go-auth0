/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// Connection struct for Connection
type Connection struct {
	// The name of the connection
	Name *string `json:"name,omitempty"`
	// Connection name used in login screen
	DisplayName *string                `json:"display_name,omitempty"`
	Options     map[string]interface{} `json:"options,omitempty"`
	// The connection's identifier
	Id *string `json:"id,omitempty"`
	// The type of the connection, related to the identity provider
	Strategy *string `json:"strategy,omitempty"`
	// Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm.
	Realms []string `json:"realms,omitempty"`
	// The ids of the clients for which the connection is enabled
	EnabledClients []string `json:"enabled_clients,omitempty"`
	// True if the connection is domain level
	IsDomainConnection *bool `json:"is_domain_connection,omitempty"`
	// Metadata associated with the connection in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Connection) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Connection) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Connection) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Connection) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Connection) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Connection) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Connection) GetOptions() map[string]interface{} {
	if o == nil || IsNil(o.Options) {
		var ret map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Options) {
		return map[string]interface{}{}, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Connection) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *Connection) SetOptions(v map[string]interface{}) {
	o.Options = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Connection) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Connection) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Connection) SetId(v string) {
	o.Id = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *Connection) GetStrategy() string {
	if o == nil || IsNil(o.Strategy) {
		var ret string
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *Connection) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given string and assigns it to the Strategy field.
func (o *Connection) SetStrategy(v string) {
	o.Strategy = &v
}

// GetRealms returns the Realms field value if set, zero value otherwise.
func (o *Connection) GetRealms() []string {
	if o == nil || IsNil(o.Realms) {
		var ret []string
		return ret
	}
	return o.Realms
}

// GetRealmsOk returns a tuple with the Realms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetRealmsOk() ([]string, bool) {
	if o == nil || IsNil(o.Realms) {
		return nil, false
	}
	return o.Realms, true
}

// HasRealms returns a boolean if a field has been set.
func (o *Connection) HasRealms() bool {
	if o != nil && !IsNil(o.Realms) {
		return true
	}

	return false
}

// SetRealms gets a reference to the given []string and assigns it to the Realms field.
func (o *Connection) SetRealms(v []string) {
	o.Realms = v
}

// GetEnabledClients returns the EnabledClients field value if set, zero value otherwise.
func (o *Connection) GetEnabledClients() []string {
	if o == nil || IsNil(o.EnabledClients) {
		var ret []string
		return ret
	}
	return o.EnabledClients
}

// GetEnabledClientsOk returns a tuple with the EnabledClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetEnabledClientsOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledClients) {
		return nil, false
	}
	return o.EnabledClients, true
}

// HasEnabledClients returns a boolean if a field has been set.
func (o *Connection) HasEnabledClients() bool {
	if o != nil && !IsNil(o.EnabledClients) {
		return true
	}

	return false
}

// SetEnabledClients gets a reference to the given []string and assigns it to the EnabledClients field.
func (o *Connection) SetEnabledClients(v []string) {
	o.EnabledClients = v
}

// GetIsDomainConnection returns the IsDomainConnection field value if set, zero value otherwise.
func (o *Connection) GetIsDomainConnection() bool {
	if o == nil || IsNil(o.IsDomainConnection) {
		var ret bool
		return ret
	}
	return *o.IsDomainConnection
}

// GetIsDomainConnectionOk returns a tuple with the IsDomainConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetIsDomainConnectionOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDomainConnection) {
		return nil, false
	}
	return o.IsDomainConnection, true
}

// HasIsDomainConnection returns a boolean if a field has been set.
func (o *Connection) HasIsDomainConnection() bool {
	if o != nil && !IsNil(o.IsDomainConnection) {
		return true
	}

	return false
}

// SetIsDomainConnection gets a reference to the given bool and assigns it to the IsDomainConnection field.
func (o *Connection) SetIsDomainConnection(v bool) {
	o.IsDomainConnection = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Connection) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Connection) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Connection) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o Connection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Connection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	if !IsNil(o.Realms) {
		toSerialize["realms"] = o.Realms
	}
	if !IsNil(o.EnabledClients) {
		toSerialize["enabled_clients"] = o.EnabledClients
	}
	if !IsNil(o.IsDomainConnection) {
		toSerialize["is_domain_connection"] = o.IsDomainConnection
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableConnection struct {
	value *Connection
	isSet bool
}

func (v NullableConnection) Get() *Connection {
	return v.value
}

func (v *NullableConnection) Set(val *Connection) {
	v.value = val
	v.isSet = true
}

func (v NullableConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnection(val *Connection) *NullableConnection {
	return &NullableConnection{value: val, isSet: true}
}

func (v NullableConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
