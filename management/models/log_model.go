/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// Log struct for Log
type Log struct {
	Date *LogDate `json:"date,omitempty"`
	// Type of event.
	Type *string `json:"type,omitempty"`
	// Description of this event.
	Description NullableString `json:"description,omitempty"`
	// Name of the connection the event relates to.
	Connection *string `json:"connection,omitempty"`
	// ID of the connection the event relates to.
	ConnectionId *string `json:"connection_id,omitempty"`
	// ID of the client (application).
	ClientId *string `json:"client_id,omitempty"`
	// Name of the client (application).
	ClientName *string `json:"client_name,omitempty"`
	// IP address of the log event source.
	Ip *string `json:"ip,omitempty"`
	// Hostname the event applies to.
	Hostname *string `json:"hostname,omitempty"`
	// ID of the user involved in the event.
	UserId *string `json:"user_id,omitempty"`
	// Name of the user involved in the event.
	UserName *string `json:"user_name,omitempty"`
	// API audience the event applies to.
	Audience *string `json:"audience,omitempty"`
	// Scope permissions applied to the event.
	Scope *string `json:"scope,omitempty"`
	// Name of the strategy involved in the event.
	Strategy *string `json:"strategy,omitempty"`
	// Type of strategy involved in the event.
	StrategyType *string `json:"strategy_type,omitempty"`
	// Unique ID of the event.
	LogId *string `json:"log_id,omitempty"`
	// Whether the client was a mobile device (true) or desktop/laptop/server (false).
	IsMobile *bool `json:"isMobile,omitempty"`
	// Additional useful details about this event (structure is dependent upon event type).
	Details map[string]interface{} `json:"details,omitempty"`
	// User agent string from the client device that caused the event.
	UserAgent            *string          `json:"user_agent,omitempty"`
	LocationInfo         *LogLocationInfo `json:"location_info,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Log Log

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Log) GetDate() LogDate {
	if o == nil || IsNil(o.Date) {
		var ret LogDate
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetDateOk() (*LogDate, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Log) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given LogDate and assigns it to the Date field.
func (o *Log) SetDate(v LogDate) {
	o.Date = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Log) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Log) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Log) SetType(v string) {
	o.Type = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Log) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Log) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Log) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Log) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Log) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Log) UnsetDescription() {
	o.Description.Unset()
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *Log) GetConnection() string {
	if o == nil || IsNil(o.Connection) {
		var ret string
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetConnectionOk() (*string, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *Log) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given string and assigns it to the Connection field.
func (o *Log) SetConnection(v string) {
	o.Connection = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *Log) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *Log) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *Log) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *Log) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *Log) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *Log) SetClientId(v string) {
	o.ClientId = &v
}

// GetClientName returns the ClientName field value if set, zero value otherwise.
func (o *Log) GetClientName() string {
	if o == nil || IsNil(o.ClientName) {
		var ret string
		return ret
	}
	return *o.ClientName
}

// GetClientNameOk returns a tuple with the ClientName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetClientNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClientName) {
		return nil, false
	}
	return o.ClientName, true
}

// HasClientName returns a boolean if a field has been set.
func (o *Log) HasClientName() bool {
	if o != nil && !IsNil(o.ClientName) {
		return true
	}

	return false
}

// SetClientName gets a reference to the given string and assigns it to the ClientName field.
func (o *Log) SetClientName(v string) {
	o.ClientName = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *Log) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *Log) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *Log) SetIp(v string) {
	o.Ip = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *Log) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *Log) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *Log) SetHostname(v string) {
	o.Hostname = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Log) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Log) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Log) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *Log) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *Log) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *Log) SetUserName(v string) {
	o.UserName = &v
}

// GetAudience returns the Audience field value if set, zero value otherwise.
func (o *Log) GetAudience() string {
	if o == nil || IsNil(o.Audience) {
		var ret string
		return ret
	}
	return *o.Audience
}

// GetAudienceOk returns a tuple with the Audience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetAudienceOk() (*string, bool) {
	if o == nil || IsNil(o.Audience) {
		return nil, false
	}
	return o.Audience, true
}

// HasAudience returns a boolean if a field has been set.
func (o *Log) HasAudience() bool {
	if o != nil && !IsNil(o.Audience) {
		return true
	}

	return false
}

// SetAudience gets a reference to the given string and assigns it to the Audience field.
func (o *Log) SetAudience(v string) {
	o.Audience = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *Log) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *Log) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *Log) SetScope(v string) {
	o.Scope = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *Log) GetStrategy() string {
	if o == nil || IsNil(o.Strategy) {
		var ret string
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *Log) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given string and assigns it to the Strategy field.
func (o *Log) SetStrategy(v string) {
	o.Strategy = &v
}

// GetStrategyType returns the StrategyType field value if set, zero value otherwise.
func (o *Log) GetStrategyType() string {
	if o == nil || IsNil(o.StrategyType) {
		var ret string
		return ret
	}
	return *o.StrategyType
}

// GetStrategyTypeOk returns a tuple with the StrategyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetStrategyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StrategyType) {
		return nil, false
	}
	return o.StrategyType, true
}

// HasStrategyType returns a boolean if a field has been set.
func (o *Log) HasStrategyType() bool {
	if o != nil && !IsNil(o.StrategyType) {
		return true
	}

	return false
}

// SetStrategyType gets a reference to the given string and assigns it to the StrategyType field.
func (o *Log) SetStrategyType(v string) {
	o.StrategyType = &v
}

// GetLogId returns the LogId field value if set, zero value otherwise.
func (o *Log) GetLogId() string {
	if o == nil || IsNil(o.LogId) {
		var ret string
		return ret
	}
	return *o.LogId
}

// GetLogIdOk returns a tuple with the LogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetLogIdOk() (*string, bool) {
	if o == nil || IsNil(o.LogId) {
		return nil, false
	}
	return o.LogId, true
}

// HasLogId returns a boolean if a field has been set.
func (o *Log) HasLogId() bool {
	if o != nil && !IsNil(o.LogId) {
		return true
	}

	return false
}

// SetLogId gets a reference to the given string and assigns it to the LogId field.
func (o *Log) SetLogId(v string) {
	o.LogId = &v
}

// GetIsMobile returns the IsMobile field value if set, zero value otherwise.
func (o *Log) GetIsMobile() bool {
	if o == nil || IsNil(o.IsMobile) {
		var ret bool
		return ret
	}
	return *o.IsMobile
}

// GetIsMobileOk returns a tuple with the IsMobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetIsMobileOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMobile) {
		return nil, false
	}
	return o.IsMobile, true
}

// HasIsMobile returns a boolean if a field has been set.
func (o *Log) HasIsMobile() bool {
	if o != nil && !IsNil(o.IsMobile) {
		return true
	}

	return false
}

// SetIsMobile gets a reference to the given bool and assigns it to the IsMobile field.
func (o *Log) SetIsMobile(v bool) {
	o.IsMobile = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Log) GetDetails() map[string]interface{} {
	if o == nil || IsNil(o.Details) {
		var ret map[string]interface{}
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetDetailsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Details) {
		return map[string]interface{}{}, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Log) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]interface{} and assigns it to the Details field.
func (o *Log) SetDetails(v map[string]interface{}) {
	o.Details = v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *Log) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetUserAgentOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *Log) HasUserAgent() bool {
	if o != nil && !IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *Log) SetUserAgent(v string) {
	o.UserAgent = &v
}

// GetLocationInfo returns the LocationInfo field value if set, zero value otherwise.
func (o *Log) GetLocationInfo() LogLocationInfo {
	if o == nil || IsNil(o.LocationInfo) {
		var ret LogLocationInfo
		return ret
	}
	return *o.LocationInfo
}

// GetLocationInfoOk returns a tuple with the LocationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetLocationInfoOk() (*LogLocationInfo, bool) {
	if o == nil || IsNil(o.LocationInfo) {
		return nil, false
	}
	return o.LocationInfo, true
}

// HasLocationInfo returns a boolean if a field has been set.
func (o *Log) HasLocationInfo() bool {
	if o != nil && !IsNil(o.LocationInfo) {
		return true
	}

	return false
}

// SetLocationInfo gets a reference to the given LogLocationInfo and assigns it to the LocationInfo field.
func (o *Log) SetLocationInfo(v LogLocationInfo) {
	o.LocationInfo = &v
}

func (o Log) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Log) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if !IsNil(o.ClientId) {
		toSerialize["client_id"] = o.ClientId
	}
	if !IsNil(o.ClientName) {
		toSerialize["client_name"] = o.ClientName
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	if !IsNil(o.Audience) {
		toSerialize["audience"] = o.Audience
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	if !IsNil(o.StrategyType) {
		toSerialize["strategy_type"] = o.StrategyType
	}
	if !IsNil(o.LogId) {
		toSerialize["log_id"] = o.LogId
	}
	if !IsNil(o.IsMobile) {
		toSerialize["isMobile"] = o.IsMobile
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.UserAgent) {
		toSerialize["user_agent"] = o.UserAgent
	}
	if !IsNil(o.LocationInfo) {
		toSerialize["location_info"] = o.LocationInfo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Log) UnmarshalJSON(data []byte) (err error) {
	varLog := _Log{}

	err = json.Unmarshal(data, &varLog)

	if err != nil {
		return err
	}

	*o = Log(varLog)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "date")
		delete(additionalProperties, "type")
		delete(additionalProperties, "description")
		delete(additionalProperties, "connection")
		delete(additionalProperties, "connection_id")
		delete(additionalProperties, "client_id")
		delete(additionalProperties, "client_name")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "user_name")
		delete(additionalProperties, "audience")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "strategy")
		delete(additionalProperties, "strategy_type")
		delete(additionalProperties, "log_id")
		delete(additionalProperties, "isMobile")
		delete(additionalProperties, "details")
		delete(additionalProperties, "user_agent")
		delete(additionalProperties, "location_info")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLog struct {
	value *Log
	isSet bool
}

func (v NullableLog) Get() *Log {
	return v.value
}

func (v *NullableLog) Set(val *Log) {
	v.value = val
	v.isSet = true
}

func (v NullableLog) IsSet() bool {
	return v.isSet
}

func (v *NullableLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLog(val *Log) *NullableLog {
	return &NullableLog{value: val, isSet: true}
}

func (v NullableLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
