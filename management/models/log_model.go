/*
Auth0 Management API

Auth0 Management API v2.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// Log struct for Log
type Log struct {
	Date LogDate `json:"date"`
	// Type of event.
	Type string `json:"type"`
	// Description of this event.
	Description NullableString `json:"description"`
	// Name of the connection the event relates to.
	Connection string `json:"connection"`
	// ID of the connection the event relates to.
	ConnectionId string `json:"connection_id"`
	// ID of the client (application).
	ClientId string `json:"client_id"`
	// Name of the client (application).
	ClientName string `json:"client_name"`
	// IP address of the log event source.
	Ip string `json:"ip"`
	// Hostname the event applies to.
	Hostname string `json:"hostname"`
	// ID of the user involved in the event.
	UserId string `json:"user_id"`
	// Name of the user involved in the event.
	UserName string `json:"user_name"`
	// API audience the event applies to.
	Audience string `json:"audience"`
	// Scope permissions applied to the event.
	Scope string `json:"scope"`
	// Name of the strategy involved in the event.
	Strategy string `json:"strategy"`
	// Type of strategy involved in the event.
	StrategyType string `json:"strategy_type"`
	// Unique ID of the event.
	LogId string `json:"log_id"`
	// Whether the client was a mobile device (true) or desktop/laptop/server (false).
	IsMobile bool `json:"isMobile"`
	// Additional useful details about this event (structure is dependent upon event type).
	Details map[string]interface{} `json:"details"`
	// User agent string from the client device that caused the event.
	UserAgent            string          `json:"user_agent"`
	LocationInfo         LogLocationInfo `json:"location_info"`
	AdditionalProperties map[string]interface{}
}

type _Log Log

// GetDate returns the Date field value
func (o *Log) GetDate() LogDate {
	if o == nil {
		var ret LogDate
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Log) GetDateOk() (*LogDate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Log) SetDate(v LogDate) {
	o.Date = v
}

// GetType returns the Type field value
func (o *Log) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Log) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Log) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Log) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Log) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *Log) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetConnection returns the Connection field value
func (o *Log) GetConnection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value
// and a boolean to check if the value has been set.
func (o *Log) GetConnectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connection, true
}

// SetConnection sets field value
func (o *Log) SetConnection(v string) {
	o.Connection = v
}

// GetConnectionId returns the ConnectionId field value
func (o *Log) GetConnectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *Log) GetConnectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *Log) SetConnectionId(v string) {
	o.ConnectionId = v
}

// GetClientId returns the ClientId field value
func (o *Log) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *Log) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *Log) SetClientId(v string) {
	o.ClientId = v
}

// GetClientName returns the ClientName field value
func (o *Log) GetClientName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientName
}

// GetClientNameOk returns a tuple with the ClientName field value
// and a boolean to check if the value has been set.
func (o *Log) GetClientNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientName, true
}

// SetClientName sets field value
func (o *Log) SetClientName(v string) {
	o.ClientName = v
}

// GetIp returns the Ip field value
func (o *Log) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *Log) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *Log) SetIp(v string) {
	o.Ip = v
}

// GetHostname returns the Hostname field value
func (o *Log) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *Log) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *Log) SetHostname(v string) {
	o.Hostname = v
}

// GetUserId returns the UserId field value
func (o *Log) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Log) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Log) SetUserId(v string) {
	o.UserId = v
}

// GetUserName returns the UserName field value
func (o *Log) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *Log) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *Log) SetUserName(v string) {
	o.UserName = v
}

// GetAudience returns the Audience field value
func (o *Log) GetAudience() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Audience
}

// GetAudienceOk returns a tuple with the Audience field value
// and a boolean to check if the value has been set.
func (o *Log) GetAudienceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Audience, true
}

// SetAudience sets field value
func (o *Log) SetAudience(v string) {
	o.Audience = v
}

// GetScope returns the Scope field value
func (o *Log) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *Log) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *Log) SetScope(v string) {
	o.Scope = v
}

// GetStrategy returns the Strategy field value
func (o *Log) GetStrategy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value
// and a boolean to check if the value has been set.
func (o *Log) GetStrategyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Strategy, true
}

// SetStrategy sets field value
func (o *Log) SetStrategy(v string) {
	o.Strategy = v
}

// GetStrategyType returns the StrategyType field value
func (o *Log) GetStrategyType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StrategyType
}

// GetStrategyTypeOk returns a tuple with the StrategyType field value
// and a boolean to check if the value has been set.
func (o *Log) GetStrategyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StrategyType, true
}

// SetStrategyType sets field value
func (o *Log) SetStrategyType(v string) {
	o.StrategyType = v
}

// GetLogId returns the LogId field value
func (o *Log) GetLogId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogId
}

// GetLogIdOk returns a tuple with the LogId field value
// and a boolean to check if the value has been set.
func (o *Log) GetLogIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogId, true
}

// SetLogId sets field value
func (o *Log) SetLogId(v string) {
	o.LogId = v
}

// GetIsMobile returns the IsMobile field value
func (o *Log) GetIsMobile() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMobile
}

// GetIsMobileOk returns a tuple with the IsMobile field value
// and a boolean to check if the value has been set.
func (o *Log) GetIsMobileOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMobile, true
}

// SetIsMobile sets field value
func (o *Log) SetIsMobile(v bool) {
	o.IsMobile = v
}

// GetDetails returns the Details field value
func (o *Log) GetDetails() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *Log) GetDetailsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Details, true
}

// SetDetails sets field value
func (o *Log) SetDetails(v map[string]interface{}) {
	o.Details = v
}

// GetUserAgent returns the UserAgent field value
func (o *Log) GetUserAgent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value
// and a boolean to check if the value has been set.
func (o *Log) GetUserAgentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserAgent, true
}

// SetUserAgent sets field value
func (o *Log) SetUserAgent(v string) {
	o.UserAgent = v
}

// GetLocationInfo returns the LocationInfo field value
func (o *Log) GetLocationInfo() LogLocationInfo {
	if o == nil {
		var ret LogLocationInfo
		return ret
	}

	return o.LocationInfo
}

// GetLocationInfoOk returns a tuple with the LocationInfo field value
// and a boolean to check if the value has been set.
func (o *Log) GetLocationInfoOk() (*LogLocationInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocationInfo, true
}

// SetLocationInfo sets field value
func (o *Log) SetLocationInfo(v LogLocationInfo) {
	o.LocationInfo = v
}

func (o Log) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Log) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	toSerialize["type"] = o.Type
	toSerialize["description"] = o.Description.Get()
	toSerialize["connection"] = o.Connection
	toSerialize["connection_id"] = o.ConnectionId
	toSerialize["client_id"] = o.ClientId
	toSerialize["client_name"] = o.ClientName
	toSerialize["ip"] = o.Ip
	toSerialize["hostname"] = o.Hostname
	toSerialize["user_id"] = o.UserId
	toSerialize["user_name"] = o.UserName
	toSerialize["audience"] = o.Audience
	toSerialize["scope"] = o.Scope
	toSerialize["strategy"] = o.Strategy
	toSerialize["strategy_type"] = o.StrategyType
	toSerialize["log_id"] = o.LogId
	toSerialize["isMobile"] = o.IsMobile
	toSerialize["details"] = o.Details
	toSerialize["user_agent"] = o.UserAgent
	toSerialize["location_info"] = o.LocationInfo

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Log) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
		"type",
		"description",
		"connection",
		"connection_id",
		"client_id",
		"client_name",
		"ip",
		"hostname",
		"user_id",
		"user_name",
		"audience",
		"scope",
		"strategy",
		"strategy_type",
		"log_id",
		"isMobile",
		"details",
		"user_agent",
		"location_info",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLog := _Log{}

	err = json.Unmarshal(data, &varLog)

	if err != nil {
		return err
	}

	*o = Log(varLog)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "date")
		delete(additionalProperties, "type")
		delete(additionalProperties, "description")
		delete(additionalProperties, "connection")
		delete(additionalProperties, "connection_id")
		delete(additionalProperties, "client_id")
		delete(additionalProperties, "client_name")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "user_name")
		delete(additionalProperties, "audience")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "strategy")
		delete(additionalProperties, "strategy_type")
		delete(additionalProperties, "log_id")
		delete(additionalProperties, "isMobile")
		delete(additionalProperties, "details")
		delete(additionalProperties, "user_agent")
		delete(additionalProperties, "location_info")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLog struct {
	value *Log
	isSet bool
}

func (v NullableLog) Get() *Log {
	return v.value
}

func (v *NullableLog) Set(val *Log) {
	v.value = val
	v.isSet = true
}

func (v NullableLog) IsSet() bool {
	return v.isSet
}

func (v *NullableLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLog(val *Log) *NullableLog {
	return &NullableLog{value: val, isSet: true}
}

func (v NullableLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
