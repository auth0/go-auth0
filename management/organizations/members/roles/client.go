// Code generated by Fern. DO NOT EDIT.

package roles

import (
	context "context"
	fmt "fmt"
	management "github.com/auth0/go-auth0/v2/management"
	core "github.com/auth0/go-auth0/v2/management/core"
	internal "github.com/auth0/go-auth0/v2/management/internal"
	option "github.com/auth0/go-auth0/v2/management/option"
	http "net/http"
	strconv "strconv"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Retrieve detailed list of roles assigned to a given user within the context of a specific Organization.
//
// Users can be members of multiple Organizations with unique roles assigned for each membership. This action only returns the roles associated with the specified Organization; any roles assigned to the user within other Organizations are not included.
func (c *Client) List(
	ctx context.Context,
	// Organization identifier.
	id string,
	// ID of the user to associate roles with.
	userID string,
	request *management.ListOrganizationMemberRolesRequestParameters,
	opts ...option.RequestOption,
) (*core.Page[*management.Role], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://%7BTENANT%7D.auth0.com/api/v2",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/organizations/%v/members/%v/roles",
		id,
		userID,
	)
	queryParams, err := internal.QueryValuesWithDefaults(
		request,
		map[string]any{
			"page":           0,
			"per_page":       50,
			"include_totals": true,
		},
	)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.options.ToHeader(),
		options.ToHeader(),
	)
	prepareCall := func(pageRequest *internal.PageRequest[*int]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("page", fmt.Sprintf("%v", *pageRequest.Cursor))
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
			ErrorDecoder:    internal.NewErrorDecoder(management.ErrorCodes),
		}
	}
	next := 1
	if queryParams.Has("page") {
		var err error
		if next, err = strconv.Atoi(queryParams.Get("page")); err != nil {
			return nil, err
		}
	}

	readPageResponse := func(response *management.ListOrganizationMemberRolesOffsetPaginatedResponseContent) *internal.PageResponse[*int, *management.Role] {
		next += 1
		results := response.Roles
		return &internal.PageResponse[*int, *management.Role]{
			Next:    &next,
			Results: results,
		}
	}
	pager := internal.NewOffsetPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, &next)
}

// Assign one or more <a href="https://auth0.com/docs/manage-users/access-control/rbac">roles</a> to a user to determine their access for a specific Organization.
//
// Users can be members of multiple Organizations with unique roles assigned for each membership. This action assigns roles to a user only for the specified Organization. Roles cannot be assigned to a user across multiple Organizations in the same call.
func (c *Client) Assign(
	ctx context.Context,
	// Organization identifier.
	id string,
	// ID of the user to associate roles with.
	userID string,
	request *management.AssignOrganizationMemberRolesRequestContent,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Assign(
		ctx,
		id,
		userID,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Remove one or more Organization-specific <a href="https://auth0.com/docs/manage-users/access-control/rbac">roles</a> from a given user.
//
// Users can be members of multiple Organizations with unique roles assigned for each membership. This action removes roles from a user in relation to the specified Organization. Roles assigned to the user within a different Organization cannot be managed in the same call.
func (c *Client) Delete(
	ctx context.Context,
	// Organization identifier.
	id string,
	// User ID of the organization member to remove roles from.
	userID string,
	request *management.DeleteOrganizationMemberRolesRequestContent,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Delete(
		ctx,
		id,
		userID,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}
