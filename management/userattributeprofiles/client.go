// Code generated by Fern. DO NOT EDIT.

package userattributeprofiles

import (
	context "context"
	management "github.com/auth0/go-auth0/v2/management"
	core "github.com/auth0/go-auth0/v2/management/core"
	internal "github.com/auth0/go-auth0/v2/management/internal"
	option "github.com/auth0/go-auth0/v2/management/option"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Retrieve a list of User Attribute Profiles. This endpoint supports Checkpoint pagination.
func (c *Client) List(
	ctx context.Context,
	request *management.ListUserAttributeProfileRequestParameters,
	opts ...option.RequestOption,
) (*core.Page[*management.UserAttributeProfile], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://%7BTENANT%7D.auth0.com/api/v2",
	)
	endpointURL := baseURL + "/user-attribute-profiles"
	queryParams, err := internal.QueryValuesWithDefaults(
		request,
		map[string]any{
			"take": 50,
		},
	)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.options.ToHeader(),
		options.ToHeader(),
	)
	prepareCall := func(pageRequest *internal.PageRequest[*string]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("from", *pageRequest.Cursor)
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
			ErrorDecoder:    internal.NewErrorDecoder(management.ErrorCodes),
		}
	}
	readPageResponse := func(response *management.ListUserAttributeProfilesPaginatedResponseContent) *internal.PageResponse[*string, *management.UserAttributeProfile] {
		var zeroValue *string
		next := response.Next
		results := response.UserAttributeProfiles
		return &internal.PageResponse[*string, *management.UserAttributeProfile]{
			Next:    next,
			Results: results,
			Done:    next == zeroValue,
		}
	}
	pager := internal.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.From)
}

// Retrieve details about a single User Attribute Profile specified by ID.
func (c *Client) Create(
	ctx context.Context,
	request *management.CreateUserAttributeProfileRequestContent,
	opts ...option.RequestOption,
) (*management.CreateUserAttributeProfileResponseContent, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieve a list of User Attribute Profile Templates.
func (c *Client) ListTemplates(
	ctx context.Context,
	opts ...option.RequestOption,
) (*management.ListUserAttributeProfileTemplateResponseContent, error) {
	response, err := c.WithRawResponse.ListTemplates(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieve a User Attribute Profile Template.
func (c *Client) GetTemplate(
	ctx context.Context,
	// ID of the user-attribute-profile-template to retrieve.
	id string,
	opts ...option.RequestOption,
) (*management.GetUserAttributeProfileTemplateResponseContent, error) {
	response, err := c.WithRawResponse.GetTemplate(
		ctx,
		id,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieve details about a single User Attribute Profile specified by ID.
func (c *Client) Get(
	ctx context.Context,
	// ID of the user-attribute-profile to retrieve.
	id string,
	opts ...option.RequestOption,
) (*management.GetUserAttributeProfileResponseContent, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		id,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Delete a single User Attribute Profile specified by ID.
func (c *Client) Delete(
	ctx context.Context,
	// ID of the user-attribute-profile to delete.
	id string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Delete(
		ctx,
		id,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Update the details of a specific User attribute profile, such as name, user_id and user_attributes.
func (c *Client) Update(
	ctx context.Context,
	// ID of the user attribute profile to update.
	id string,
	request *management.UpdateUserAttributeProfileRequestContent,
	opts ...option.RequestOption,
) (*management.UpdateUserAttributeProfileResponseContent, error) {
	response, err := c.WithRawResponse.Update(
		ctx,
		id,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
