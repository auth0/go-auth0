// Code generated by Fern. DO NOT EDIT.

package client

import (
	context "context"
	management "github.com/auth0/go-auth0/v2/management"
	clients "github.com/auth0/go-auth0/v2/management/connections/clients"
	keys "github.com/auth0/go-auth0/v2/management/connections/keys"
	client "github.com/auth0/go-auth0/v2/management/connections/scimconfiguration/client"
	users "github.com/auth0/go-auth0/v2/management/connections/users"
	core "github.com/auth0/go-auth0/v2/management/core"
	internal "github.com/auth0/go-auth0/v2/management/internal"
	option "github.com/auth0/go-auth0/v2/management/option"
	http "net/http"
)

type Client struct {
	WithRawResponse   *RawClient
	Clients           *clients.Client
	Keys              *keys.Client
	SCIMConfiguration *client.Client
	Users             *users.Client

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		Clients:           clients.NewClient(options),
		Keys:              keys.NewClient(options),
		SCIMConfiguration: client.NewClient(options),
		Users:             users.NewClient(options),
		WithRawResponse:   NewRawClient(options),
		options:           options,
		baseURL:           options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Retrieves detailed list of all <a href="https://auth0.com/docs/authenticate/identity-providers">connections</a> that match the specified strategy. If no strategy is provided, all connections within your tenant are retrieved. This action can accept a list of fields to include or exclude from the resulting list of connections.
//
// This endpoint supports two types of pagination:
// <ul>
// <li>Offset pagination</li>
// <li>Checkpoint pagination</li>
// </ul>
//
// Checkpoint pagination must be used if you need to retrieve more than 1000 connections.
//
// <h2>Checkpoint Pagination</h2>
//
// To search by checkpoint, use the following parameters:
// <ul>
// <li><code>from</code>: Optional id from which to start selection.</li>
// <li><code>take</code>: The total amount of entries to retrieve when using the from parameter. Defaults to 50.</li>
// </ul>
//
// <b>Note</b>: The first time you call this endpoint using checkpoint pagination, omit the <code>from</code> parameter. If there are more results, a <code>next</code> value is included in the response. You can use this for subsequent API calls. When <code>next</code> is no longer included in the response, no pages are remaining.
func (c *Client) List(
	ctx context.Context,
	request *management.ListConnectionsQueryParameters,
	opts ...option.RequestOption,
) (*core.Page[*management.ConnectionForList], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://%7BTENANT%7D.auth0.com/api/v2",
	)
	endpointURL := baseURL + "/connections"
	queryParams, err := internal.QueryValuesWithDefaults(
		request,
		map[string]any{
			"take": 50,
		},
	)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.options.ToHeader(),
		options.ToHeader(),
	)
	prepareCall := func(pageRequest *internal.PageRequest[*string]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("from", *pageRequest.Cursor)
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
			ErrorDecoder:    internal.NewErrorDecoder(management.ErrorCodes),
		}
	}
	readPageResponse := func(response *management.ListConnectionsCheckpointPaginatedResponseContent) *internal.PageResponse[*string, *management.ConnectionForList] {
		var zeroValue *string
		next := response.Next
		results := response.Connections
		return &internal.PageResponse[*string, *management.ConnectionForList]{
			Next:    next,
			Results: results,
			Done:    next == zeroValue,
		}
	}
	pager := internal.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.From)
}

// Creates a new connection according to the JSON object received in <code>body</code>.<br/>
func (c *Client) Create(
	ctx context.Context,
	request *management.CreateConnectionRequestContent,
	opts ...option.RequestOption,
) (*management.CreateConnectionResponseContent, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieve details for a specified <a href="https://auth0.com/docs/authenticate/identity-providers">connection</a> along with options that can be used for identity provider configuration.
func (c *Client) Get(
	ctx context.Context,
	// The id of the connection to retrieve
	id string,
	request *management.GetConnectionRequestParameters,
	opts ...option.RequestOption,
) (*management.GetConnectionResponseContent, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		id,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Removes a specific <a href="https://auth0.com/docs/authenticate/identity-providers">connection</a> from your tenant. This action cannot be undone. Once removed, users can no longer use this connection to authenticate.
func (c *Client) Delete(
	ctx context.Context,
	// The id of the connection to delete
	id string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Delete(
		ctx,
		id,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Update details for a specific <a href="https://auth0.com/docs/authenticate/identity-providers">connection</a>, including option properties for identity provider configuration.
//
// <b>Note</b>: If you use the <code>options</code> parameter, the entire <code>options</code> object is overriden. To avoid partial data or other issues, ensure all parameters are present when using this option.
func (c *Client) Update(
	ctx context.Context,
	// The id of the connection to update
	id string,
	request *management.UpdateConnectionRequestContent,
	opts ...option.RequestOption,
) (*management.UpdateConnectionResponseContent, error) {
	response, err := c.WithRawResponse.Update(
		ctx,
		id,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves the status of an ad/ldap connection referenced by its <code>ID</code>. <code>200 OK</code> http status code response is returned  when the connection is online, otherwise a <code>404</code> status code is returned along with an error message
func (c *Client) CheckStatus(
	ctx context.Context,
	// ID of the connection to check
	id string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.CheckStatus(
		ctx,
		id,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}
