// Code generated by Fern. DO NOT EDIT.

package rendering

import (
	context "context"
	fmt "fmt"
	management "github.com/auth0/go-auth0/v2/management"
	core "github.com/auth0/go-auth0/v2/management/core"
	internal "github.com/auth0/go-auth0/v2/management/internal"
	option "github.com/auth0/go-auth0/v2/management/option"
	http "net/http"
	strconv "strconv"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Get render setting configurations for all screens.
func (c *Client) List(
	ctx context.Context,
	request *management.ListAculsRequestParameters,
	opts ...option.RequestOption,
) (*core.Page[*management.AculResponseContent], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://%7BTENANT%7D.auth0.com/api/v2",
	)
	endpointURL := baseURL + "/prompts/rendering"
	queryParams, err := internal.QueryValuesWithDefaults(
		request,
		map[string]any{
			"page":           0,
			"per_page":       50,
			"include_totals": true,
		},
	)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.options.ToHeader(),
		options.ToHeader(),
	)
	prepareCall := func(pageRequest *internal.PageRequest[*int]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("page", fmt.Sprintf("%v", *pageRequest.Cursor))
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
			ErrorDecoder:    internal.NewErrorDecoder(management.ErrorCodes),
		}
	}
	next := 1
	if queryParams.Has("page") {
		var err error
		if next, err = strconv.Atoi(queryParams.Get("page")); err != nil {
			return nil, err
		}
	}

	readPageResponse := func(response *management.ListAculsOffsetPaginatedResponseContent) *internal.PageResponse[*int, *management.AculResponseContent] {
		next += 1
		results := response.Configs
		return &internal.PageResponse[*int, *management.AculResponseContent]{
			Next:    &next,
			Results: results,
		}
	}
	pager := internal.NewOffsetPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, &next)
}

// Learn more about <a href='https://auth0.com/docs/customize/login-pages/advanced-customizations/getting-started/configure-acul-screens'>configuring render settings</a> for advanced customization.
//
// <p>
//
//	Example <code>head_tags</code> array. See our <a href='https://auth0.com/docs/customize/login-pages/advanced-customizations/getting-started/configure-acul-screens'>documentation</a> on using Liquid variables within head tags.
//
// </p>
//
//	<pre>{
//	  "head_tags": [
//	    {
//	      "tag": "script",
//	      "attributes": {
//	        "defer": true,
//	        "src": "URL_TO_ASSET",
//	        "async": true,
//	        "integrity": [
//	          "ASSET_SHA"
//	        ]
//	      }
//	    },
//	    {
//	      "tag": "link",
//	      "attributes": {
//	        "href": "URL_TO_ASSET",
//	        "rel": "stylesheet"
//	      }
//	    }
//	  ]
//	}
//
// </pre>
func (c *Client) BulkUpdate(
	ctx context.Context,
	request *management.BulkUpdateAculRequestContent,
	opts ...option.RequestOption,
) (*management.BulkUpdateAculResponseContent, error) {
	response, err := c.WithRawResponse.BulkUpdate(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get render settings for a screen.
func (c *Client) Get(
	ctx context.Context,
	// Name of the prompt
	prompt *management.PromptGroupNameEnum,
	// Name of the screen
	screen *management.ScreenGroupNameEnum,
	opts ...option.RequestOption,
) (*management.GetAculResponseContent, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		prompt,
		screen,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Learn more about <a href='https://auth0.com/docs/customize/login-pages/advanced-customizations/getting-started/configure-acul-screens'>configuring render settings</a> for advanced customization.
//
// <p>
//
//	Example <code>head_tags</code> array. See our <a href='https://auth0.com/docs/customize/login-pages/advanced-customizations/getting-started/configure-acul-screens'>documentation</a> on using Liquid variables within head tags.
//
// </p>
//
//	<pre>{
//	  "head_tags": [
//	    {
//	      "tag": "script",
//	      "attributes": {
//	        "defer": true,
//	        "src": "URL_TO_ASSET",
//	        "async": true,
//	        "integrity": [
//	          "ASSET_SHA"
//	        ]
//	      }
//	    },
//	    {
//	      "tag": "link",
//	      "attributes": {
//	        "href": "URL_TO_ASSET",
//	        "rel": "stylesheet"
//	      }
//	    }
//	  ]
//	}
//
// </pre>
func (c *Client) Update(
	ctx context.Context,
	// Name of the prompt
	prompt *management.PromptGroupNameEnum,
	// Name of the screen
	screen *management.ScreenGroupNameEnum,
	request *management.UpdateAculRequestContent,
	opts ...option.RequestOption,
) (*management.UpdateAculResponseContent, error) {
	response, err := c.WithRawResponse.Update(
		ctx,
		prompt,
		screen,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
