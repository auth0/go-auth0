// Code generated by Fern. DO NOT EDIT.

package client

import (
	context "context"
	fmt "fmt"
	management "github.com/auth0/go-auth0/v2/management"
	executions "github.com/auth0/go-auth0/v2/management/actions/executions"
	client "github.com/auth0/go-auth0/v2/management/actions/triggers/client"
	versions "github.com/auth0/go-auth0/v2/management/actions/versions"
	core "github.com/auth0/go-auth0/v2/management/core"
	internal "github.com/auth0/go-auth0/v2/management/internal"
	option "github.com/auth0/go-auth0/v2/management/option"
	http "net/http"
	strconv "strconv"
)

type Client struct {
	WithRawResponse *RawClient
	Versions        *versions.Client
	Executions      *executions.Client
	Triggers        *client.Client

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		Versions:        versions.NewClient(options),
		Executions:      executions.NewClient(options),
		Triggers:        client.NewClient(options),
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Retrieve all actions.
func (c *Client) List(
	ctx context.Context,
	request *management.ListActionsRequestParameters,
	opts ...option.RequestOption,
) (*core.Page[*management.Action], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://%7BTENANT%7D.auth0.com/api/v2",
	)
	endpointURL := baseURL + "/actions/actions"
	queryParams, err := internal.QueryValuesWithDefaults(
		request,
		map[string]any{
			"page":     0,
			"per_page": 50,
		},
	)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.options.ToHeader(),
		options.ToHeader(),
	)
	prepareCall := func(pageRequest *internal.PageRequest[*int]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("page", fmt.Sprintf("%v", *pageRequest.Cursor))
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
			ErrorDecoder:    internal.NewErrorDecoder(management.ErrorCodes),
		}
	}
	next := 1
	if queryParams.Has("page") {
		var err error
		if next, err = strconv.Atoi(queryParams.Get("page")); err != nil {
			return nil, err
		}
	}

	readPageResponse := func(response *management.ListActionsPaginatedResponseContent) *internal.PageResponse[*int, *management.Action] {
		next += 1
		results := response.Actions
		return &internal.PageResponse[*int, *management.Action]{
			Next:    &next,
			Results: results,
		}
	}
	pager := internal.NewOffsetPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, &next)
}

// Create an action. Once an action is created, it must be deployed, and then bound to a trigger before it will be executed as part of a flow.
func (c *Client) Create(
	ctx context.Context,
	request *management.CreateActionRequestContent,
	opts ...option.RequestOption,
) (*management.CreateActionResponseContent, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieve an action by its ID.
func (c *Client) Get(
	ctx context.Context,
	// The ID of the action to retrieve.
	id string,
	opts ...option.RequestOption,
) (*management.GetActionResponseContent, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		id,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes an action and all of its associated versions. An action must be unbound from all triggers before it can be deleted.
func (c *Client) Delete(
	ctx context.Context,
	// The ID of the action to delete.
	id string,
	request *management.DeleteActionRequestParameters,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Delete(
		ctx,
		id,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Update an existing action. If this action is currently bound to a trigger, updating it will <strong>not</strong> affect any user flows until the action is deployed.
func (c *Client) Update(
	ctx context.Context,
	// The id of the action to update.
	id string,
	request *management.UpdateActionRequestContent,
	opts ...option.RequestOption,
) (*management.UpdateActionResponseContent, error) {
	response, err := c.WithRawResponse.Update(
		ctx,
		id,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deploy an action. Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately. Otherwise, the action will only be executed as a part of a flow once it is bound to that flow.
func (c *Client) Deploy(
	ctx context.Context,
	// The ID of an action.
	id string,
	opts ...option.RequestOption,
) (*management.DeployActionResponseContent, error) {
	response, err := c.WithRawResponse.Deploy(
		ctx,
		id,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Test an action. After updating an action, it can be tested prior to being deployed to ensure it behaves as expected.
func (c *Client) Test(
	ctx context.Context,
	// The id of the action to test.
	id string,
	request *management.TestActionRequestContent,
	opts ...option.RequestOption,
) (*management.TestActionResponseContent, error) {
	response, err := c.WithRawResponse.Test(
		ctx,
		id,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
