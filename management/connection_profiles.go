// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
	big "math/big"
)

// Connection name prefix template.
type ConnectionNamePrefixTemplate = string

var (
	connectionProfileFieldID                           = big.NewInt(1 << 0)
	connectionProfileFieldName                         = big.NewInt(1 << 1)
	connectionProfileFieldOrganization                 = big.NewInt(1 << 2)
	connectionProfileFieldConnectionNamePrefixTemplate = big.NewInt(1 << 3)
	connectionProfileFieldEnabledFeatures              = big.NewInt(1 << 4)
	connectionProfileFieldConnectionConfig             = big.NewInt(1 << 5)
	connectionProfileFieldStrategyOverrides            = big.NewInt(1 << 6)
)

type ConnectionProfile struct {
	ID                           *ConnectionProfileID                `json:"id,omitempty" url:"id,omitempty"`
	Name                         *ConnectionProfileName              `json:"name,omitempty" url:"name,omitempty"`
	Organization                 *ConnectionProfileOrganization      `json:"organization,omitempty" url:"organization,omitempty"`
	ConnectionNamePrefixTemplate *ConnectionNamePrefixTemplate       `json:"connection_name_prefix_template,omitempty" url:"connection_name_prefix_template,omitempty"`
	EnabledFeatures              *ConnectionProfileEnabledFeatures   `json:"enabled_features,omitempty" url:"enabled_features,omitempty"`
	ConnectionConfig             *ConnectionProfileConfig            `json:"connection_config,omitempty" url:"connection_config,omitempty"`
	StrategyOverrides            *ConnectionProfileStrategyOverrides `json:"strategy_overrides,omitempty" url:"strategy_overrides,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConnectionProfile) GetID() ConnectionProfileID {
	if c == nil || c.ID == nil {
		return ""
	}
	return *c.ID
}

func (c *ConnectionProfile) GetName() ConnectionProfileName {
	if c == nil || c.Name == nil {
		return ""
	}
	return *c.Name
}

func (c *ConnectionProfile) GetOrganization() ConnectionProfileOrganization {
	if c == nil || c.Organization == nil {
		return ConnectionProfileOrganization{}
	}
	return *c.Organization
}

func (c *ConnectionProfile) GetConnectionNamePrefixTemplate() ConnectionNamePrefixTemplate {
	if c == nil || c.ConnectionNamePrefixTemplate == nil {
		return ""
	}
	return *c.ConnectionNamePrefixTemplate
}

func (c *ConnectionProfile) GetEnabledFeatures() ConnectionProfileEnabledFeatures {
	if c == nil || c.EnabledFeatures == nil {
		return nil
	}
	return *c.EnabledFeatures
}

func (c *ConnectionProfile) GetConnectionConfig() ConnectionProfileConfig {
	if c == nil || c.ConnectionConfig == nil {
		return ConnectionProfileConfig{}
	}
	return *c.ConnectionConfig
}

func (c *ConnectionProfile) GetStrategyOverrides() ConnectionProfileStrategyOverrides {
	if c == nil || c.StrategyOverrides == nil {
		return ConnectionProfileStrategyOverrides{}
	}
	return *c.StrategyOverrides
}

func (c *ConnectionProfile) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConnectionProfile) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetID sets the ID field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfile) SetID(id *ConnectionProfileID) {
	c.ID = id
	c.require(connectionProfileFieldID)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfile) SetName(name *ConnectionProfileName) {
	c.Name = name
	c.require(connectionProfileFieldName)
}

// SetOrganization sets the Organization field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfile) SetOrganization(organization *ConnectionProfileOrganization) {
	c.Organization = organization
	c.require(connectionProfileFieldOrganization)
}

// SetConnectionNamePrefixTemplate sets the ConnectionNamePrefixTemplate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfile) SetConnectionNamePrefixTemplate(connectionNamePrefixTemplate *ConnectionNamePrefixTemplate) {
	c.ConnectionNamePrefixTemplate = connectionNamePrefixTemplate
	c.require(connectionProfileFieldConnectionNamePrefixTemplate)
}

// SetEnabledFeatures sets the EnabledFeatures field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfile) SetEnabledFeatures(enabledFeatures *ConnectionProfileEnabledFeatures) {
	c.EnabledFeatures = enabledFeatures
	c.require(connectionProfileFieldEnabledFeatures)
}

// SetConnectionConfig sets the ConnectionConfig field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfile) SetConnectionConfig(connectionConfig *ConnectionProfileConfig) {
	c.ConnectionConfig = connectionConfig
	c.require(connectionProfileFieldConnectionConfig)
}

// SetStrategyOverrides sets the StrategyOverrides field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfile) SetStrategyOverrides(strategyOverrides *ConnectionProfileStrategyOverrides) {
	c.StrategyOverrides = strategyOverrides
	c.require(connectionProfileFieldStrategyOverrides)
}

func (c *ConnectionProfile) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectionProfile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectionProfile(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectionProfile) MarshalJSON() ([]byte, error) {
	type embed ConnectionProfile
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *ConnectionProfile) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Connection profile configuration.
type ConnectionProfileConfig struct {

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConnectionProfileConfig) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConnectionProfileConfig) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

func (c *ConnectionProfileConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectionProfileConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectionProfileConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectionProfileConfig) MarshalJSON() ([]byte, error) {
	type embed ConnectionProfileConfig
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *ConnectionProfileConfig) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Enabled features for the connection profile.
type ConnectionProfileEnabledFeatures = []EnabledFeaturesEnum

// Connection Profile identifier.
type ConnectionProfileID = string

// The name of the connection profile.
type ConnectionProfileName = string

// The organization of the connection profile.
var (
	connectionProfileOrganizationFieldShowAsButton            = big.NewInt(1 << 0)
	connectionProfileOrganizationFieldAssignMembershipOnLogin = big.NewInt(1 << 1)
)

type ConnectionProfileOrganization struct {
	ShowAsButton            *ConnectionProfileOrganizationShowAsButtonEnum            `json:"show_as_button,omitempty" url:"show_as_button,omitempty"`
	AssignMembershipOnLogin *ConnectionProfileOrganizationAssignMembershipOnLoginEnum `json:"assign_membership_on_login,omitempty" url:"assign_membership_on_login,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConnectionProfileOrganization) GetShowAsButton() ConnectionProfileOrganizationShowAsButtonEnum {
	if c == nil || c.ShowAsButton == nil {
		return ""
	}
	return *c.ShowAsButton
}

func (c *ConnectionProfileOrganization) GetAssignMembershipOnLogin() ConnectionProfileOrganizationAssignMembershipOnLoginEnum {
	if c == nil || c.AssignMembershipOnLogin == nil {
		return ""
	}
	return *c.AssignMembershipOnLogin
}

func (c *ConnectionProfileOrganization) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConnectionProfileOrganization) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetShowAsButton sets the ShowAsButton field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileOrganization) SetShowAsButton(showAsButton *ConnectionProfileOrganizationShowAsButtonEnum) {
	c.ShowAsButton = showAsButton
	c.require(connectionProfileOrganizationFieldShowAsButton)
}

// SetAssignMembershipOnLogin sets the AssignMembershipOnLogin field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileOrganization) SetAssignMembershipOnLogin(assignMembershipOnLogin *ConnectionProfileOrganizationAssignMembershipOnLoginEnum) {
	c.AssignMembershipOnLogin = assignMembershipOnLogin
	c.require(connectionProfileOrganizationFieldAssignMembershipOnLogin)
}

func (c *ConnectionProfileOrganization) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectionProfileOrganization
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectionProfileOrganization(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectionProfileOrganization) MarshalJSON() ([]byte, error) {
	type embed ConnectionProfileOrganization
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *ConnectionProfileOrganization) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Indicates if membership should be assigned on login.
type ConnectionProfileOrganizationAssignMembershipOnLoginEnum string

const (
	ConnectionProfileOrganizationAssignMembershipOnLoginEnumNone     ConnectionProfileOrganizationAssignMembershipOnLoginEnum = "none"
	ConnectionProfileOrganizationAssignMembershipOnLoginEnumOptional ConnectionProfileOrganizationAssignMembershipOnLoginEnum = "optional"
	ConnectionProfileOrganizationAssignMembershipOnLoginEnumRequired ConnectionProfileOrganizationAssignMembershipOnLoginEnum = "required"
)

func NewConnectionProfileOrganizationAssignMembershipOnLoginEnumFromString(s string) (ConnectionProfileOrganizationAssignMembershipOnLoginEnum, error) {
	switch s {
	case "none":
		return ConnectionProfileOrganizationAssignMembershipOnLoginEnumNone, nil
	case "optional":
		return ConnectionProfileOrganizationAssignMembershipOnLoginEnumOptional, nil
	case "required":
		return ConnectionProfileOrganizationAssignMembershipOnLoginEnumRequired, nil
	}
	var t ConnectionProfileOrganizationAssignMembershipOnLoginEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConnectionProfileOrganizationAssignMembershipOnLoginEnum) Ptr() *ConnectionProfileOrganizationAssignMembershipOnLoginEnum {
	return &c
}

// Indicates if the organization should be shown as a button.
type ConnectionProfileOrganizationShowAsButtonEnum string

const (
	ConnectionProfileOrganizationShowAsButtonEnumNone     ConnectionProfileOrganizationShowAsButtonEnum = "none"
	ConnectionProfileOrganizationShowAsButtonEnumOptional ConnectionProfileOrganizationShowAsButtonEnum = "optional"
	ConnectionProfileOrganizationShowAsButtonEnumRequired ConnectionProfileOrganizationShowAsButtonEnum = "required"
)

func NewConnectionProfileOrganizationShowAsButtonEnumFromString(s string) (ConnectionProfileOrganizationShowAsButtonEnum, error) {
	switch s {
	case "none":
		return ConnectionProfileOrganizationShowAsButtonEnumNone, nil
	case "optional":
		return ConnectionProfileOrganizationShowAsButtonEnumOptional, nil
	case "required":
		return ConnectionProfileOrganizationShowAsButtonEnumRequired, nil
	}
	var t ConnectionProfileOrganizationShowAsButtonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConnectionProfileOrganizationShowAsButtonEnum) Ptr() *ConnectionProfileOrganizationShowAsButtonEnum {
	return &c
}

// Connection Profile Strategy Override
var (
	connectionProfileStrategyOverrideFieldEnabledFeatures  = big.NewInt(1 << 0)
	connectionProfileStrategyOverrideFieldConnectionConfig = big.NewInt(1 << 1)
)

type ConnectionProfileStrategyOverride struct {
	EnabledFeatures  *ConnectionProfileStrategyOverridesEnabledFeatures  `json:"enabled_features,omitempty" url:"enabled_features,omitempty"`
	ConnectionConfig *ConnectionProfileStrategyOverridesConnectionConfig `json:"connection_config,omitempty" url:"connection_config,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConnectionProfileStrategyOverride) GetEnabledFeatures() ConnectionProfileStrategyOverridesEnabledFeatures {
	if c == nil || c.EnabledFeatures == nil {
		return nil
	}
	return *c.EnabledFeatures
}

func (c *ConnectionProfileStrategyOverride) GetConnectionConfig() ConnectionProfileStrategyOverridesConnectionConfig {
	if c == nil || c.ConnectionConfig == nil {
		return ConnectionProfileStrategyOverridesConnectionConfig{}
	}
	return *c.ConnectionConfig
}

func (c *ConnectionProfileStrategyOverride) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConnectionProfileStrategyOverride) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetEnabledFeatures sets the EnabledFeatures field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileStrategyOverride) SetEnabledFeatures(enabledFeatures *ConnectionProfileStrategyOverridesEnabledFeatures) {
	c.EnabledFeatures = enabledFeatures
	c.require(connectionProfileStrategyOverrideFieldEnabledFeatures)
}

// SetConnectionConfig sets the ConnectionConfig field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileStrategyOverride) SetConnectionConfig(connectionConfig *ConnectionProfileStrategyOverridesConnectionConfig) {
	c.ConnectionConfig = connectionConfig
	c.require(connectionProfileStrategyOverrideFieldConnectionConfig)
}

func (c *ConnectionProfileStrategyOverride) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectionProfileStrategyOverride
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectionProfileStrategyOverride(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectionProfileStrategyOverride) MarshalJSON() ([]byte, error) {
	type embed ConnectionProfileStrategyOverride
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *ConnectionProfileStrategyOverride) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Strategy-specific overrides for this attribute
var (
	connectionProfileStrategyOverridesFieldPingfederate = big.NewInt(1 << 0)
	connectionProfileStrategyOverridesFieldAd           = big.NewInt(1 << 1)
	connectionProfileStrategyOverridesFieldAdfs         = big.NewInt(1 << 2)
	connectionProfileStrategyOverridesFieldWaad         = big.NewInt(1 << 3)
	connectionProfileStrategyOverridesFieldGoogleApps   = big.NewInt(1 << 4)
	connectionProfileStrategyOverridesFieldOkta         = big.NewInt(1 << 5)
	connectionProfileStrategyOverridesFieldOidc         = big.NewInt(1 << 6)
	connectionProfileStrategyOverridesFieldSamlp        = big.NewInt(1 << 7)
)

type ConnectionProfileStrategyOverrides struct {
	Pingfederate *ConnectionProfileStrategyOverride `json:"pingfederate,omitempty" url:"pingfederate,omitempty"`
	Ad           *ConnectionProfileStrategyOverride `json:"ad,omitempty" url:"ad,omitempty"`
	Adfs         *ConnectionProfileStrategyOverride `json:"adfs,omitempty" url:"adfs,omitempty"`
	Waad         *ConnectionProfileStrategyOverride `json:"waad,omitempty" url:"waad,omitempty"`
	GoogleApps   *ConnectionProfileStrategyOverride `json:"google-apps,omitempty" url:"google-apps,omitempty"`
	Okta         *ConnectionProfileStrategyOverride `json:"okta,omitempty" url:"okta,omitempty"`
	Oidc         *ConnectionProfileStrategyOverride `json:"oidc,omitempty" url:"oidc,omitempty"`
	Samlp        *ConnectionProfileStrategyOverride `json:"samlp,omitempty" url:"samlp,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConnectionProfileStrategyOverrides) GetPingfederate() ConnectionProfileStrategyOverride {
	if c == nil || c.Pingfederate == nil {
		return ConnectionProfileStrategyOverride{}
	}
	return *c.Pingfederate
}

func (c *ConnectionProfileStrategyOverrides) GetAd() ConnectionProfileStrategyOverride {
	if c == nil || c.Ad == nil {
		return ConnectionProfileStrategyOverride{}
	}
	return *c.Ad
}

func (c *ConnectionProfileStrategyOverrides) GetAdfs() ConnectionProfileStrategyOverride {
	if c == nil || c.Adfs == nil {
		return ConnectionProfileStrategyOverride{}
	}
	return *c.Adfs
}

func (c *ConnectionProfileStrategyOverrides) GetWaad() ConnectionProfileStrategyOverride {
	if c == nil || c.Waad == nil {
		return ConnectionProfileStrategyOverride{}
	}
	return *c.Waad
}

func (c *ConnectionProfileStrategyOverrides) GetGoogleApps() ConnectionProfileStrategyOverride {
	if c == nil || c.GoogleApps == nil {
		return ConnectionProfileStrategyOverride{}
	}
	return *c.GoogleApps
}

func (c *ConnectionProfileStrategyOverrides) GetOkta() ConnectionProfileStrategyOverride {
	if c == nil || c.Okta == nil {
		return ConnectionProfileStrategyOverride{}
	}
	return *c.Okta
}

func (c *ConnectionProfileStrategyOverrides) GetOidc() ConnectionProfileStrategyOverride {
	if c == nil || c.Oidc == nil {
		return ConnectionProfileStrategyOverride{}
	}
	return *c.Oidc
}

func (c *ConnectionProfileStrategyOverrides) GetSamlp() ConnectionProfileStrategyOverride {
	if c == nil || c.Samlp == nil {
		return ConnectionProfileStrategyOverride{}
	}
	return *c.Samlp
}

func (c *ConnectionProfileStrategyOverrides) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConnectionProfileStrategyOverrides) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetPingfederate sets the Pingfederate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileStrategyOverrides) SetPingfederate(pingfederate *ConnectionProfileStrategyOverride) {
	c.Pingfederate = pingfederate
	c.require(connectionProfileStrategyOverridesFieldPingfederate)
}

// SetAd sets the Ad field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileStrategyOverrides) SetAd(ad *ConnectionProfileStrategyOverride) {
	c.Ad = ad
	c.require(connectionProfileStrategyOverridesFieldAd)
}

// SetAdfs sets the Adfs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileStrategyOverrides) SetAdfs(adfs *ConnectionProfileStrategyOverride) {
	c.Adfs = adfs
	c.require(connectionProfileStrategyOverridesFieldAdfs)
}

// SetWaad sets the Waad field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileStrategyOverrides) SetWaad(waad *ConnectionProfileStrategyOverride) {
	c.Waad = waad
	c.require(connectionProfileStrategyOverridesFieldWaad)
}

// SetGoogleApps sets the GoogleApps field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileStrategyOverrides) SetGoogleApps(googleApps *ConnectionProfileStrategyOverride) {
	c.GoogleApps = googleApps
	c.require(connectionProfileStrategyOverridesFieldGoogleApps)
}

// SetOkta sets the Okta field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileStrategyOverrides) SetOkta(okta *ConnectionProfileStrategyOverride) {
	c.Okta = okta
	c.require(connectionProfileStrategyOverridesFieldOkta)
}

// SetOidc sets the Oidc field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileStrategyOverrides) SetOidc(oidc *ConnectionProfileStrategyOverride) {
	c.Oidc = oidc
	c.require(connectionProfileStrategyOverridesFieldOidc)
}

// SetSamlp sets the Samlp field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileStrategyOverrides) SetSamlp(samlp *ConnectionProfileStrategyOverride) {
	c.Samlp = samlp
	c.require(connectionProfileStrategyOverridesFieldSamlp)
}

func (c *ConnectionProfileStrategyOverrides) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectionProfileStrategyOverrides
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectionProfileStrategyOverrides(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectionProfileStrategyOverrides) MarshalJSON() ([]byte, error) {
	type embed ConnectionProfileStrategyOverrides
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *ConnectionProfileStrategyOverrides) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Connection profile strategy overrides connection configuration.
type ConnectionProfileStrategyOverridesConnectionConfig struct {

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConnectionProfileStrategyOverridesConnectionConfig) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConnectionProfileStrategyOverridesConnectionConfig) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

func (c *ConnectionProfileStrategyOverridesConnectionConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectionProfileStrategyOverridesConnectionConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectionProfileStrategyOverridesConnectionConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectionProfileStrategyOverridesConnectionConfig) MarshalJSON() ([]byte, error) {
	type embed ConnectionProfileStrategyOverridesConnectionConfig
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *ConnectionProfileStrategyOverridesConnectionConfig) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Enabled features for a connections profile strategy override.
type ConnectionProfileStrategyOverridesEnabledFeatures = []EnabledFeaturesEnum

// The structure of the template, which can be used as the payload for creating or updating a Connection Profile.
var (
	connectionProfileTemplateFieldName                         = big.NewInt(1 << 0)
	connectionProfileTemplateFieldOrganization                 = big.NewInt(1 << 1)
	connectionProfileTemplateFieldConnectionNamePrefixTemplate = big.NewInt(1 << 2)
	connectionProfileTemplateFieldEnabledFeatures              = big.NewInt(1 << 3)
	connectionProfileTemplateFieldConnectionConfig             = big.NewInt(1 << 4)
	connectionProfileTemplateFieldStrategyOverrides            = big.NewInt(1 << 5)
)

type ConnectionProfileTemplate struct {
	Name                         *ConnectionProfileName              `json:"name,omitempty" url:"name,omitempty"`
	Organization                 *ConnectionProfileOrganization      `json:"organization,omitempty" url:"organization,omitempty"`
	ConnectionNamePrefixTemplate *ConnectionNamePrefixTemplate       `json:"connection_name_prefix_template,omitempty" url:"connection_name_prefix_template,omitempty"`
	EnabledFeatures              *ConnectionProfileEnabledFeatures   `json:"enabled_features,omitempty" url:"enabled_features,omitempty"`
	ConnectionConfig             *ConnectionProfileConfig            `json:"connection_config,omitempty" url:"connection_config,omitempty"`
	StrategyOverrides            *ConnectionProfileStrategyOverrides `json:"strategy_overrides,omitempty" url:"strategy_overrides,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConnectionProfileTemplate) GetName() ConnectionProfileName {
	if c == nil || c.Name == nil {
		return ""
	}
	return *c.Name
}

func (c *ConnectionProfileTemplate) GetOrganization() ConnectionProfileOrganization {
	if c == nil || c.Organization == nil {
		return ConnectionProfileOrganization{}
	}
	return *c.Organization
}

func (c *ConnectionProfileTemplate) GetConnectionNamePrefixTemplate() ConnectionNamePrefixTemplate {
	if c == nil || c.ConnectionNamePrefixTemplate == nil {
		return ""
	}
	return *c.ConnectionNamePrefixTemplate
}

func (c *ConnectionProfileTemplate) GetEnabledFeatures() ConnectionProfileEnabledFeatures {
	if c == nil || c.EnabledFeatures == nil {
		return nil
	}
	return *c.EnabledFeatures
}

func (c *ConnectionProfileTemplate) GetConnectionConfig() ConnectionProfileConfig {
	if c == nil || c.ConnectionConfig == nil {
		return ConnectionProfileConfig{}
	}
	return *c.ConnectionConfig
}

func (c *ConnectionProfileTemplate) GetStrategyOverrides() ConnectionProfileStrategyOverrides {
	if c == nil || c.StrategyOverrides == nil {
		return ConnectionProfileStrategyOverrides{}
	}
	return *c.StrategyOverrides
}

func (c *ConnectionProfileTemplate) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConnectionProfileTemplate) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileTemplate) SetName(name *ConnectionProfileName) {
	c.Name = name
	c.require(connectionProfileTemplateFieldName)
}

// SetOrganization sets the Organization field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileTemplate) SetOrganization(organization *ConnectionProfileOrganization) {
	c.Organization = organization
	c.require(connectionProfileTemplateFieldOrganization)
}

// SetConnectionNamePrefixTemplate sets the ConnectionNamePrefixTemplate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileTemplate) SetConnectionNamePrefixTemplate(connectionNamePrefixTemplate *ConnectionNamePrefixTemplate) {
	c.ConnectionNamePrefixTemplate = connectionNamePrefixTemplate
	c.require(connectionProfileTemplateFieldConnectionNamePrefixTemplate)
}

// SetEnabledFeatures sets the EnabledFeatures field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileTemplate) SetEnabledFeatures(enabledFeatures *ConnectionProfileEnabledFeatures) {
	c.EnabledFeatures = enabledFeatures
	c.require(connectionProfileTemplateFieldEnabledFeatures)
}

// SetConnectionConfig sets the ConnectionConfig field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileTemplate) SetConnectionConfig(connectionConfig *ConnectionProfileConfig) {
	c.ConnectionConfig = connectionConfig
	c.require(connectionProfileTemplateFieldConnectionConfig)
}

// SetStrategyOverrides sets the StrategyOverrides field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileTemplate) SetStrategyOverrides(strategyOverrides *ConnectionProfileStrategyOverrides) {
	c.StrategyOverrides = strategyOverrides
	c.require(connectionProfileTemplateFieldStrategyOverrides)
}

func (c *ConnectionProfileTemplate) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectionProfileTemplate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectionProfileTemplate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectionProfileTemplate) MarshalJSON() ([]byte, error) {
	type embed ConnectionProfileTemplate
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *ConnectionProfileTemplate) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	connectionProfileTemplateItemFieldID          = big.NewInt(1 << 0)
	connectionProfileTemplateItemFieldDisplayName = big.NewInt(1 << 1)
	connectionProfileTemplateItemFieldTemplate    = big.NewInt(1 << 2)
)

type ConnectionProfileTemplateItem struct {
	// The id of the template.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The user-friendly name of the template displayed in the UI.
	DisplayName *string                    `json:"display_name,omitempty" url:"display_name,omitempty"`
	Template    *ConnectionProfileTemplate `json:"template,omitempty" url:"template,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConnectionProfileTemplateItem) GetID() string {
	if c == nil || c.ID == nil {
		return ""
	}
	return *c.ID
}

func (c *ConnectionProfileTemplateItem) GetDisplayName() string {
	if c == nil || c.DisplayName == nil {
		return ""
	}
	return *c.DisplayName
}

func (c *ConnectionProfileTemplateItem) GetTemplate() ConnectionProfileTemplate {
	if c == nil || c.Template == nil {
		return ConnectionProfileTemplate{}
	}
	return *c.Template
}

func (c *ConnectionProfileTemplateItem) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConnectionProfileTemplateItem) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetID sets the ID field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileTemplateItem) SetID(id *string) {
	c.ID = id
	c.require(connectionProfileTemplateItemFieldID)
}

// SetDisplayName sets the DisplayName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileTemplateItem) SetDisplayName(displayName *string) {
	c.DisplayName = displayName
	c.require(connectionProfileTemplateItemFieldDisplayName)
}

// SetTemplate sets the Template field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ConnectionProfileTemplateItem) SetTemplate(template *ConnectionProfileTemplate) {
	c.Template = template
	c.require(connectionProfileTemplateItemFieldTemplate)
}

func (c *ConnectionProfileTemplateItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectionProfileTemplateItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectionProfileTemplateItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectionProfileTemplateItem) MarshalJSON() ([]byte, error) {
	type embed ConnectionProfileTemplateItem
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *ConnectionProfileTemplateItem) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	createConnectionProfileResponseContentFieldID                           = big.NewInt(1 << 0)
	createConnectionProfileResponseContentFieldName                         = big.NewInt(1 << 1)
	createConnectionProfileResponseContentFieldOrganization                 = big.NewInt(1 << 2)
	createConnectionProfileResponseContentFieldConnectionNamePrefixTemplate = big.NewInt(1 << 3)
	createConnectionProfileResponseContentFieldEnabledFeatures              = big.NewInt(1 << 4)
	createConnectionProfileResponseContentFieldConnectionConfig             = big.NewInt(1 << 5)
	createConnectionProfileResponseContentFieldStrategyOverrides            = big.NewInt(1 << 6)
)

type CreateConnectionProfileResponseContent struct {
	ID                           *ConnectionProfileID                `json:"id,omitempty" url:"id,omitempty"`
	Name                         *ConnectionProfileName              `json:"name,omitempty" url:"name,omitempty"`
	Organization                 *ConnectionProfileOrganization      `json:"organization,omitempty" url:"organization,omitempty"`
	ConnectionNamePrefixTemplate *ConnectionNamePrefixTemplate       `json:"connection_name_prefix_template,omitempty" url:"connection_name_prefix_template,omitempty"`
	EnabledFeatures              *ConnectionProfileEnabledFeatures   `json:"enabled_features,omitempty" url:"enabled_features,omitempty"`
	ConnectionConfig             *ConnectionProfileConfig            `json:"connection_config,omitempty" url:"connection_config,omitempty"`
	StrategyOverrides            *ConnectionProfileStrategyOverrides `json:"strategy_overrides,omitempty" url:"strategy_overrides,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateConnectionProfileResponseContent) GetID() ConnectionProfileID {
	if c == nil || c.ID == nil {
		return ""
	}
	return *c.ID
}

func (c *CreateConnectionProfileResponseContent) GetName() ConnectionProfileName {
	if c == nil || c.Name == nil {
		return ""
	}
	return *c.Name
}

func (c *CreateConnectionProfileResponseContent) GetOrganization() ConnectionProfileOrganization {
	if c == nil || c.Organization == nil {
		return ConnectionProfileOrganization{}
	}
	return *c.Organization
}

func (c *CreateConnectionProfileResponseContent) GetConnectionNamePrefixTemplate() ConnectionNamePrefixTemplate {
	if c == nil || c.ConnectionNamePrefixTemplate == nil {
		return ""
	}
	return *c.ConnectionNamePrefixTemplate
}

func (c *CreateConnectionProfileResponseContent) GetEnabledFeatures() ConnectionProfileEnabledFeatures {
	if c == nil || c.EnabledFeatures == nil {
		return nil
	}
	return *c.EnabledFeatures
}

func (c *CreateConnectionProfileResponseContent) GetConnectionConfig() ConnectionProfileConfig {
	if c == nil || c.ConnectionConfig == nil {
		return ConnectionProfileConfig{}
	}
	return *c.ConnectionConfig
}

func (c *CreateConnectionProfileResponseContent) GetStrategyOverrides() ConnectionProfileStrategyOverrides {
	if c == nil || c.StrategyOverrides == nil {
		return ConnectionProfileStrategyOverrides{}
	}
	return *c.StrategyOverrides
}

func (c *CreateConnectionProfileResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateConnectionProfileResponseContent) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetID sets the ID field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateConnectionProfileResponseContent) SetID(id *ConnectionProfileID) {
	c.ID = id
	c.require(createConnectionProfileResponseContentFieldID)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateConnectionProfileResponseContent) SetName(name *ConnectionProfileName) {
	c.Name = name
	c.require(createConnectionProfileResponseContentFieldName)
}

// SetOrganization sets the Organization field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateConnectionProfileResponseContent) SetOrganization(organization *ConnectionProfileOrganization) {
	c.Organization = organization
	c.require(createConnectionProfileResponseContentFieldOrganization)
}

// SetConnectionNamePrefixTemplate sets the ConnectionNamePrefixTemplate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateConnectionProfileResponseContent) SetConnectionNamePrefixTemplate(connectionNamePrefixTemplate *ConnectionNamePrefixTemplate) {
	c.ConnectionNamePrefixTemplate = connectionNamePrefixTemplate
	c.require(createConnectionProfileResponseContentFieldConnectionNamePrefixTemplate)
}

// SetEnabledFeatures sets the EnabledFeatures field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateConnectionProfileResponseContent) SetEnabledFeatures(enabledFeatures *ConnectionProfileEnabledFeatures) {
	c.EnabledFeatures = enabledFeatures
	c.require(createConnectionProfileResponseContentFieldEnabledFeatures)
}

// SetConnectionConfig sets the ConnectionConfig field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateConnectionProfileResponseContent) SetConnectionConfig(connectionConfig *ConnectionProfileConfig) {
	c.ConnectionConfig = connectionConfig
	c.require(createConnectionProfileResponseContentFieldConnectionConfig)
}

// SetStrategyOverrides sets the StrategyOverrides field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateConnectionProfileResponseContent) SetStrategyOverrides(strategyOverrides *ConnectionProfileStrategyOverrides) {
	c.StrategyOverrides = strategyOverrides
	c.require(createConnectionProfileResponseContentFieldStrategyOverrides)
}

func (c *CreateConnectionProfileResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateConnectionProfileResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateConnectionProfileResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateConnectionProfileResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateConnectionProfileResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CreateConnectionProfileResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Enum for enabled features.
type EnabledFeaturesEnum string

const (
	EnabledFeaturesEnumSCIM            EnabledFeaturesEnum = "scim"
	EnabledFeaturesEnumUniversalLogout EnabledFeaturesEnum = "universal_logout"
)

func NewEnabledFeaturesEnumFromString(s string) (EnabledFeaturesEnum, error) {
	switch s {
	case "scim":
		return EnabledFeaturesEnumSCIM, nil
	case "universal_logout":
		return EnabledFeaturesEnumUniversalLogout, nil
	}
	var t EnabledFeaturesEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EnabledFeaturesEnum) Ptr() *EnabledFeaturesEnum {
	return &e
}

var (
	getConnectionProfileResponseContentFieldID                           = big.NewInt(1 << 0)
	getConnectionProfileResponseContentFieldName                         = big.NewInt(1 << 1)
	getConnectionProfileResponseContentFieldOrganization                 = big.NewInt(1 << 2)
	getConnectionProfileResponseContentFieldConnectionNamePrefixTemplate = big.NewInt(1 << 3)
	getConnectionProfileResponseContentFieldEnabledFeatures              = big.NewInt(1 << 4)
	getConnectionProfileResponseContentFieldConnectionConfig             = big.NewInt(1 << 5)
	getConnectionProfileResponseContentFieldStrategyOverrides            = big.NewInt(1 << 6)
)

type GetConnectionProfileResponseContent struct {
	ID                           *ConnectionProfileID                `json:"id,omitempty" url:"id,omitempty"`
	Name                         *ConnectionProfileName              `json:"name,omitempty" url:"name,omitempty"`
	Organization                 *ConnectionProfileOrganization      `json:"organization,omitempty" url:"organization,omitempty"`
	ConnectionNamePrefixTemplate *ConnectionNamePrefixTemplate       `json:"connection_name_prefix_template,omitempty" url:"connection_name_prefix_template,omitempty"`
	EnabledFeatures              *ConnectionProfileEnabledFeatures   `json:"enabled_features,omitempty" url:"enabled_features,omitempty"`
	ConnectionConfig             *ConnectionProfileConfig            `json:"connection_config,omitempty" url:"connection_config,omitempty"`
	StrategyOverrides            *ConnectionProfileStrategyOverrides `json:"strategy_overrides,omitempty" url:"strategy_overrides,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetConnectionProfileResponseContent) GetID() ConnectionProfileID {
	if g == nil || g.ID == nil {
		return ""
	}
	return *g.ID
}

func (g *GetConnectionProfileResponseContent) GetName() ConnectionProfileName {
	if g == nil || g.Name == nil {
		return ""
	}
	return *g.Name
}

func (g *GetConnectionProfileResponseContent) GetOrganization() ConnectionProfileOrganization {
	if g == nil || g.Organization == nil {
		return ConnectionProfileOrganization{}
	}
	return *g.Organization
}

func (g *GetConnectionProfileResponseContent) GetConnectionNamePrefixTemplate() ConnectionNamePrefixTemplate {
	if g == nil || g.ConnectionNamePrefixTemplate == nil {
		return ""
	}
	return *g.ConnectionNamePrefixTemplate
}

func (g *GetConnectionProfileResponseContent) GetEnabledFeatures() ConnectionProfileEnabledFeatures {
	if g == nil || g.EnabledFeatures == nil {
		return nil
	}
	return *g.EnabledFeatures
}

func (g *GetConnectionProfileResponseContent) GetConnectionConfig() ConnectionProfileConfig {
	if g == nil || g.ConnectionConfig == nil {
		return ConnectionProfileConfig{}
	}
	return *g.ConnectionConfig
}

func (g *GetConnectionProfileResponseContent) GetStrategyOverrides() ConnectionProfileStrategyOverrides {
	if g == nil || g.StrategyOverrides == nil {
		return ConnectionProfileStrategyOverrides{}
	}
	return *g.StrategyOverrides
}

func (g *GetConnectionProfileResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetConnectionProfileResponseContent) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetID sets the ID field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetConnectionProfileResponseContent) SetID(id *ConnectionProfileID) {
	g.ID = id
	g.require(getConnectionProfileResponseContentFieldID)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetConnectionProfileResponseContent) SetName(name *ConnectionProfileName) {
	g.Name = name
	g.require(getConnectionProfileResponseContentFieldName)
}

// SetOrganization sets the Organization field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetConnectionProfileResponseContent) SetOrganization(organization *ConnectionProfileOrganization) {
	g.Organization = organization
	g.require(getConnectionProfileResponseContentFieldOrganization)
}

// SetConnectionNamePrefixTemplate sets the ConnectionNamePrefixTemplate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetConnectionProfileResponseContent) SetConnectionNamePrefixTemplate(connectionNamePrefixTemplate *ConnectionNamePrefixTemplate) {
	g.ConnectionNamePrefixTemplate = connectionNamePrefixTemplate
	g.require(getConnectionProfileResponseContentFieldConnectionNamePrefixTemplate)
}

// SetEnabledFeatures sets the EnabledFeatures field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetConnectionProfileResponseContent) SetEnabledFeatures(enabledFeatures *ConnectionProfileEnabledFeatures) {
	g.EnabledFeatures = enabledFeatures
	g.require(getConnectionProfileResponseContentFieldEnabledFeatures)
}

// SetConnectionConfig sets the ConnectionConfig field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetConnectionProfileResponseContent) SetConnectionConfig(connectionConfig *ConnectionProfileConfig) {
	g.ConnectionConfig = connectionConfig
	g.require(getConnectionProfileResponseContentFieldConnectionConfig)
}

// SetStrategyOverrides sets the StrategyOverrides field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetConnectionProfileResponseContent) SetStrategyOverrides(strategyOverrides *ConnectionProfileStrategyOverrides) {
	g.StrategyOverrides = strategyOverrides
	g.require(getConnectionProfileResponseContentFieldStrategyOverrides)
}

func (g *GetConnectionProfileResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetConnectionProfileResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetConnectionProfileResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetConnectionProfileResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetConnectionProfileResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GetConnectionProfileResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	getConnectionProfileTemplateResponseContentFieldID          = big.NewInt(1 << 0)
	getConnectionProfileTemplateResponseContentFieldDisplayName = big.NewInt(1 << 1)
	getConnectionProfileTemplateResponseContentFieldTemplate    = big.NewInt(1 << 2)
)

type GetConnectionProfileTemplateResponseContent struct {
	// The id of the template.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The user-friendly name of the template displayed in the UI.
	DisplayName *string                    `json:"display_name,omitempty" url:"display_name,omitempty"`
	Template    *ConnectionProfileTemplate `json:"template,omitempty" url:"template,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetConnectionProfileTemplateResponseContent) GetID() string {
	if g == nil || g.ID == nil {
		return ""
	}
	return *g.ID
}

func (g *GetConnectionProfileTemplateResponseContent) GetDisplayName() string {
	if g == nil || g.DisplayName == nil {
		return ""
	}
	return *g.DisplayName
}

func (g *GetConnectionProfileTemplateResponseContent) GetTemplate() ConnectionProfileTemplate {
	if g == nil || g.Template == nil {
		return ConnectionProfileTemplate{}
	}
	return *g.Template
}

func (g *GetConnectionProfileTemplateResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetConnectionProfileTemplateResponseContent) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetID sets the ID field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetConnectionProfileTemplateResponseContent) SetID(id *string) {
	g.ID = id
	g.require(getConnectionProfileTemplateResponseContentFieldID)
}

// SetDisplayName sets the DisplayName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetConnectionProfileTemplateResponseContent) SetDisplayName(displayName *string) {
	g.DisplayName = displayName
	g.require(getConnectionProfileTemplateResponseContentFieldDisplayName)
}

// SetTemplate sets the Template field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetConnectionProfileTemplateResponseContent) SetTemplate(template *ConnectionProfileTemplate) {
	g.Template = template
	g.require(getConnectionProfileTemplateResponseContentFieldTemplate)
}

func (g *GetConnectionProfileTemplateResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetConnectionProfileTemplateResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetConnectionProfileTemplateResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetConnectionProfileTemplateResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetConnectionProfileTemplateResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GetConnectionProfileTemplateResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	listConnectionProfileTemplateResponseContentFieldConnectionProfileTemplates = big.NewInt(1 << 0)
)

type ListConnectionProfileTemplateResponseContent struct {
	ConnectionProfileTemplates []*ConnectionProfileTemplateItem `json:"connection_profile_templates,omitempty" url:"connection_profile_templates,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListConnectionProfileTemplateResponseContent) GetConnectionProfileTemplates() []*ConnectionProfileTemplateItem {
	if l == nil || l.ConnectionProfileTemplates == nil {
		return nil
	}
	return l.ConnectionProfileTemplates
}

func (l *ListConnectionProfileTemplateResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListConnectionProfileTemplateResponseContent) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetConnectionProfileTemplates sets the ConnectionProfileTemplates field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListConnectionProfileTemplateResponseContent) SetConnectionProfileTemplates(connectionProfileTemplates []*ConnectionProfileTemplateItem) {
	l.ConnectionProfileTemplates = connectionProfileTemplates
	l.require(listConnectionProfileTemplateResponseContentFieldConnectionProfileTemplates)
}

func (l *ListConnectionProfileTemplateResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListConnectionProfileTemplateResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListConnectionProfileTemplateResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListConnectionProfileTemplateResponseContent) MarshalJSON() ([]byte, error) {
	type embed ListConnectionProfileTemplateResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListConnectionProfileTemplateResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	listConnectionProfilesPaginatedResponseContentFieldNext               = big.NewInt(1 << 0)
	listConnectionProfilesPaginatedResponseContentFieldConnectionProfiles = big.NewInt(1 << 1)
)

type ListConnectionProfilesPaginatedResponseContent struct {
	// A cursor to be used as the "from" query parameter for the next page of results.
	Next               *string              `json:"next,omitempty" url:"next,omitempty"`
	ConnectionProfiles []*ConnectionProfile `json:"connection_profiles,omitempty" url:"connection_profiles,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListConnectionProfilesPaginatedResponseContent) GetNext() string {
	if l == nil || l.Next == nil {
		return ""
	}
	return *l.Next
}

func (l *ListConnectionProfilesPaginatedResponseContent) GetConnectionProfiles() []*ConnectionProfile {
	if l == nil || l.ConnectionProfiles == nil {
		return nil
	}
	return l.ConnectionProfiles
}

func (l *ListConnectionProfilesPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListConnectionProfilesPaginatedResponseContent) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetNext sets the Next field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListConnectionProfilesPaginatedResponseContent) SetNext(next *string) {
	l.Next = next
	l.require(listConnectionProfilesPaginatedResponseContentFieldNext)
}

// SetConnectionProfiles sets the ConnectionProfiles field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListConnectionProfilesPaginatedResponseContent) SetConnectionProfiles(connectionProfiles []*ConnectionProfile) {
	l.ConnectionProfiles = connectionProfiles
	l.require(listConnectionProfilesPaginatedResponseContentFieldConnectionProfiles)
}

func (l *ListConnectionProfilesPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListConnectionProfilesPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListConnectionProfilesPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListConnectionProfilesPaginatedResponseContent) MarshalJSON() ([]byte, error) {
	type embed ListConnectionProfilesPaginatedResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListConnectionProfilesPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	updateConnectionProfileResponseContentFieldID                           = big.NewInt(1 << 0)
	updateConnectionProfileResponseContentFieldName                         = big.NewInt(1 << 1)
	updateConnectionProfileResponseContentFieldOrganization                 = big.NewInt(1 << 2)
	updateConnectionProfileResponseContentFieldConnectionNamePrefixTemplate = big.NewInt(1 << 3)
	updateConnectionProfileResponseContentFieldEnabledFeatures              = big.NewInt(1 << 4)
	updateConnectionProfileResponseContentFieldConnectionConfig             = big.NewInt(1 << 5)
	updateConnectionProfileResponseContentFieldStrategyOverrides            = big.NewInt(1 << 6)
)

type UpdateConnectionProfileResponseContent struct {
	ID                           *ConnectionProfileID                `json:"id,omitempty" url:"id,omitempty"`
	Name                         *ConnectionProfileName              `json:"name,omitempty" url:"name,omitempty"`
	Organization                 *ConnectionProfileOrganization      `json:"organization,omitempty" url:"organization,omitempty"`
	ConnectionNamePrefixTemplate *ConnectionNamePrefixTemplate       `json:"connection_name_prefix_template,omitempty" url:"connection_name_prefix_template,omitempty"`
	EnabledFeatures              *ConnectionProfileEnabledFeatures   `json:"enabled_features,omitempty" url:"enabled_features,omitempty"`
	ConnectionConfig             *ConnectionProfileConfig            `json:"connection_config,omitempty" url:"connection_config,omitempty"`
	StrategyOverrides            *ConnectionProfileStrategyOverrides `json:"strategy_overrides,omitempty" url:"strategy_overrides,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateConnectionProfileResponseContent) GetID() ConnectionProfileID {
	if u == nil || u.ID == nil {
		return ""
	}
	return *u.ID
}

func (u *UpdateConnectionProfileResponseContent) GetName() ConnectionProfileName {
	if u == nil || u.Name == nil {
		return ""
	}
	return *u.Name
}

func (u *UpdateConnectionProfileResponseContent) GetOrganization() ConnectionProfileOrganization {
	if u == nil || u.Organization == nil {
		return ConnectionProfileOrganization{}
	}
	return *u.Organization
}

func (u *UpdateConnectionProfileResponseContent) GetConnectionNamePrefixTemplate() ConnectionNamePrefixTemplate {
	if u == nil || u.ConnectionNamePrefixTemplate == nil {
		return ""
	}
	return *u.ConnectionNamePrefixTemplate
}

func (u *UpdateConnectionProfileResponseContent) GetEnabledFeatures() ConnectionProfileEnabledFeatures {
	if u == nil || u.EnabledFeatures == nil {
		return nil
	}
	return *u.EnabledFeatures
}

func (u *UpdateConnectionProfileResponseContent) GetConnectionConfig() ConnectionProfileConfig {
	if u == nil || u.ConnectionConfig == nil {
		return ConnectionProfileConfig{}
	}
	return *u.ConnectionConfig
}

func (u *UpdateConnectionProfileResponseContent) GetStrategyOverrides() ConnectionProfileStrategyOverrides {
	if u == nil || u.StrategyOverrides == nil {
		return ConnectionProfileStrategyOverrides{}
	}
	return *u.StrategyOverrides
}

func (u *UpdateConnectionProfileResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateConnectionProfileResponseContent) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetID sets the ID field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateConnectionProfileResponseContent) SetID(id *ConnectionProfileID) {
	u.ID = id
	u.require(updateConnectionProfileResponseContentFieldID)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateConnectionProfileResponseContent) SetName(name *ConnectionProfileName) {
	u.Name = name
	u.require(updateConnectionProfileResponseContentFieldName)
}

// SetOrganization sets the Organization field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateConnectionProfileResponseContent) SetOrganization(organization *ConnectionProfileOrganization) {
	u.Organization = organization
	u.require(updateConnectionProfileResponseContentFieldOrganization)
}

// SetConnectionNamePrefixTemplate sets the ConnectionNamePrefixTemplate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateConnectionProfileResponseContent) SetConnectionNamePrefixTemplate(connectionNamePrefixTemplate *ConnectionNamePrefixTemplate) {
	u.ConnectionNamePrefixTemplate = connectionNamePrefixTemplate
	u.require(updateConnectionProfileResponseContentFieldConnectionNamePrefixTemplate)
}

// SetEnabledFeatures sets the EnabledFeatures field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateConnectionProfileResponseContent) SetEnabledFeatures(enabledFeatures *ConnectionProfileEnabledFeatures) {
	u.EnabledFeatures = enabledFeatures
	u.require(updateConnectionProfileResponseContentFieldEnabledFeatures)
}

// SetConnectionConfig sets the ConnectionConfig field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateConnectionProfileResponseContent) SetConnectionConfig(connectionConfig *ConnectionProfileConfig) {
	u.ConnectionConfig = connectionConfig
	u.require(updateConnectionProfileResponseContentFieldConnectionConfig)
}

// SetStrategyOverrides sets the StrategyOverrides field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateConnectionProfileResponseContent) SetStrategyOverrides(strategyOverrides *ConnectionProfileStrategyOverrides) {
	u.StrategyOverrides = strategyOverrides
	u.require(updateConnectionProfileResponseContentFieldStrategyOverrides)
}

func (u *UpdateConnectionProfileResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateConnectionProfileResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateConnectionProfileResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateConnectionProfileResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateConnectionProfileResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UpdateConnectionProfileResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
